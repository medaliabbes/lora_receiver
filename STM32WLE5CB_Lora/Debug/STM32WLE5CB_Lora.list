
STM32WLE5CB_Lora.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000baec  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000518  0800bc24  0800bc24  0001bc24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c13c  0800c13c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c13c  0800c13c  0001c13c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c144  0800c144  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c144  0800c144  0001c144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c148  0800c148  0001c148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  0800c14c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000904  2000001c  0800c168  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000920  0800c168  00020920  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002b2a3  00000000  00000000  00020046  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a8b  00000000  00000000  0004b2e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001df8  00000000  00000000  00050d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c08  00000000  00000000  00052b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f471  00000000  00000000  00054778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f21c  00000000  00000000  00073be9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000af8e7  00000000  00000000  00092e05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001426ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007a58  00000000  00000000  00142740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000001c 	.word	0x2000001c
 8000154:	00000000 	.word	0x00000000
 8000158:	0800bc0c 	.word	0x0800bc0c

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000020 	.word	0x20000020
 8000174:	0800bc0c 	.word	0x0800bc0c

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_uldivmod>:
 8000188:	b953      	cbnz	r3, 80001a0 <__aeabi_uldivmod+0x18>
 800018a:	b94a      	cbnz	r2, 80001a0 <__aeabi_uldivmod+0x18>
 800018c:	2900      	cmp	r1, #0
 800018e:	bf08      	it	eq
 8000190:	2800      	cmpeq	r0, #0
 8000192:	bf1c      	itt	ne
 8000194:	f04f 31ff 	movne.w	r1, #4294967295
 8000198:	f04f 30ff 	movne.w	r0, #4294967295
 800019c:	f000 b96c 	b.w	8000478 <__aeabi_idiv0>
 80001a0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001a8:	f000 f806 	bl	80001b8 <__udivmoddi4>
 80001ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b4:	b004      	add	sp, #16
 80001b6:	4770      	bx	lr

080001b8 <__udivmoddi4>:
 80001b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001bc:	9e08      	ldr	r6, [sp, #32]
 80001be:	460d      	mov	r5, r1
 80001c0:	4604      	mov	r4, r0
 80001c2:	468e      	mov	lr, r1
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	f040 8082 	bne.w	80002ce <__udivmoddi4+0x116>
 80001ca:	428a      	cmp	r2, r1
 80001cc:	4617      	mov	r7, r2
 80001ce:	d946      	bls.n	800025e <__udivmoddi4+0xa6>
 80001d0:	fab2 f282 	clz	r2, r2
 80001d4:	b14a      	cbz	r2, 80001ea <__udivmoddi4+0x32>
 80001d6:	f1c2 0120 	rsb	r1, r2, #32
 80001da:	fa05 f302 	lsl.w	r3, r5, r2
 80001de:	fa20 f101 	lsr.w	r1, r0, r1
 80001e2:	4097      	lsls	r7, r2
 80001e4:	ea41 0e03 	orr.w	lr, r1, r3
 80001e8:	4094      	lsls	r4, r2
 80001ea:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001ee:	0c23      	lsrs	r3, r4, #16
 80001f0:	fbbe fcf8 	udiv	ip, lr, r8
 80001f4:	b2b9      	uxth	r1, r7
 80001f6:	fb08 ee1c 	mls	lr, r8, ip, lr
 80001fa:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 80001fe:	fb0c f001 	mul.w	r0, ip, r1
 8000202:	4298      	cmp	r0, r3
 8000204:	d90a      	bls.n	800021c <__udivmoddi4+0x64>
 8000206:	18fb      	adds	r3, r7, r3
 8000208:	f10c 35ff 	add.w	r5, ip, #4294967295
 800020c:	f080 8116 	bcs.w	800043c <__udivmoddi4+0x284>
 8000210:	4298      	cmp	r0, r3
 8000212:	f240 8113 	bls.w	800043c <__udivmoddi4+0x284>
 8000216:	f1ac 0c02 	sub.w	ip, ip, #2
 800021a:	443b      	add	r3, r7
 800021c:	1a1b      	subs	r3, r3, r0
 800021e:	b2a4      	uxth	r4, r4
 8000220:	fbb3 f0f8 	udiv	r0, r3, r8
 8000224:	fb08 3310 	mls	r3, r8, r0, r3
 8000228:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800022c:	fb00 f101 	mul.w	r1, r0, r1
 8000230:	42a1      	cmp	r1, r4
 8000232:	d909      	bls.n	8000248 <__udivmoddi4+0x90>
 8000234:	193c      	adds	r4, r7, r4
 8000236:	f100 33ff 	add.w	r3, r0, #4294967295
 800023a:	f080 8101 	bcs.w	8000440 <__udivmoddi4+0x288>
 800023e:	42a1      	cmp	r1, r4
 8000240:	f240 80fe 	bls.w	8000440 <__udivmoddi4+0x288>
 8000244:	3802      	subs	r0, #2
 8000246:	443c      	add	r4, r7
 8000248:	1a64      	subs	r4, r4, r1
 800024a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800024e:	2100      	movs	r1, #0
 8000250:	b11e      	cbz	r6, 800025a <__udivmoddi4+0xa2>
 8000252:	40d4      	lsrs	r4, r2
 8000254:	2300      	movs	r3, #0
 8000256:	e9c6 4300 	strd	r4, r3, [r6]
 800025a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800025e:	b902      	cbnz	r2, 8000262 <__udivmoddi4+0xaa>
 8000260:	deff      	udf	#255	; 0xff
 8000262:	fab2 f282 	clz	r2, r2
 8000266:	2a00      	cmp	r2, #0
 8000268:	d14f      	bne.n	800030a <__udivmoddi4+0x152>
 800026a:	1bcb      	subs	r3, r1, r7
 800026c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000270:	fa1f f887 	uxth.w	r8, r7
 8000274:	2101      	movs	r1, #1
 8000276:	fbb3 fcfe 	udiv	ip, r3, lr
 800027a:	0c25      	lsrs	r5, r4, #16
 800027c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000280:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000284:	fb08 f30c 	mul.w	r3, r8, ip
 8000288:	42ab      	cmp	r3, r5
 800028a:	d907      	bls.n	800029c <__udivmoddi4+0xe4>
 800028c:	197d      	adds	r5, r7, r5
 800028e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000292:	d202      	bcs.n	800029a <__udivmoddi4+0xe2>
 8000294:	42ab      	cmp	r3, r5
 8000296:	f200 80e7 	bhi.w	8000468 <__udivmoddi4+0x2b0>
 800029a:	4684      	mov	ip, r0
 800029c:	1aed      	subs	r5, r5, r3
 800029e:	b2a3      	uxth	r3, r4
 80002a0:	fbb5 f0fe 	udiv	r0, r5, lr
 80002a4:	fb0e 5510 	mls	r5, lr, r0, r5
 80002a8:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80002ac:	fb08 f800 	mul.w	r8, r8, r0
 80002b0:	45a0      	cmp	r8, r4
 80002b2:	d907      	bls.n	80002c4 <__udivmoddi4+0x10c>
 80002b4:	193c      	adds	r4, r7, r4
 80002b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ba:	d202      	bcs.n	80002c2 <__udivmoddi4+0x10a>
 80002bc:	45a0      	cmp	r8, r4
 80002be:	f200 80d7 	bhi.w	8000470 <__udivmoddi4+0x2b8>
 80002c2:	4618      	mov	r0, r3
 80002c4:	eba4 0408 	sub.w	r4, r4, r8
 80002c8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002cc:	e7c0      	b.n	8000250 <__udivmoddi4+0x98>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d908      	bls.n	80002e4 <__udivmoddi4+0x12c>
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	f000 80af 	beq.w	8000436 <__udivmoddi4+0x27e>
 80002d8:	2100      	movs	r1, #0
 80002da:	e9c6 0500 	strd	r0, r5, [r6]
 80002de:	4608      	mov	r0, r1
 80002e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e4:	fab3 f183 	clz	r1, r3
 80002e8:	2900      	cmp	r1, #0
 80002ea:	d14b      	bne.n	8000384 <__udivmoddi4+0x1cc>
 80002ec:	42ab      	cmp	r3, r5
 80002ee:	d302      	bcc.n	80002f6 <__udivmoddi4+0x13e>
 80002f0:	4282      	cmp	r2, r0
 80002f2:	f200 80b7 	bhi.w	8000464 <__udivmoddi4+0x2ac>
 80002f6:	1a84      	subs	r4, r0, r2
 80002f8:	eb65 0303 	sbc.w	r3, r5, r3
 80002fc:	2001      	movs	r0, #1
 80002fe:	469e      	mov	lr, r3
 8000300:	2e00      	cmp	r6, #0
 8000302:	d0aa      	beq.n	800025a <__udivmoddi4+0xa2>
 8000304:	e9c6 4e00 	strd	r4, lr, [r6]
 8000308:	e7a7      	b.n	800025a <__udivmoddi4+0xa2>
 800030a:	f1c2 0c20 	rsb	ip, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	4097      	lsls	r7, r2
 8000314:	fa20 f00c 	lsr.w	r0, r0, ip
 8000318:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800031c:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000320:	4318      	orrs	r0, r3
 8000322:	fbbc f1fe 	udiv	r1, ip, lr
 8000326:	0c05      	lsrs	r5, r0, #16
 8000328:	fb0e cc11 	mls	ip, lr, r1, ip
 800032c:	fa1f f887 	uxth.w	r8, r7
 8000330:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000334:	fb01 f308 	mul.w	r3, r1, r8
 8000338:	42ab      	cmp	r3, r5
 800033a:	fa04 f402 	lsl.w	r4, r4, r2
 800033e:	d909      	bls.n	8000354 <__udivmoddi4+0x19c>
 8000340:	197d      	adds	r5, r7, r5
 8000342:	f101 3cff 	add.w	ip, r1, #4294967295
 8000346:	f080 808b 	bcs.w	8000460 <__udivmoddi4+0x2a8>
 800034a:	42ab      	cmp	r3, r5
 800034c:	f240 8088 	bls.w	8000460 <__udivmoddi4+0x2a8>
 8000350:	3902      	subs	r1, #2
 8000352:	443d      	add	r5, r7
 8000354:	1aeb      	subs	r3, r5, r3
 8000356:	b285      	uxth	r5, r0
 8000358:	fbb3 f0fe 	udiv	r0, r3, lr
 800035c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000360:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000364:	fb00 f308 	mul.w	r3, r0, r8
 8000368:	42ab      	cmp	r3, r5
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x1c4>
 800036c:	197d      	adds	r5, r7, r5
 800036e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000372:	d271      	bcs.n	8000458 <__udivmoddi4+0x2a0>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d96f      	bls.n	8000458 <__udivmoddi4+0x2a0>
 8000378:	3802      	subs	r0, #2
 800037a:	443d      	add	r5, r7
 800037c:	1aeb      	subs	r3, r5, r3
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	e778      	b.n	8000276 <__udivmoddi4+0xbe>
 8000384:	f1c1 0c20 	rsb	ip, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f70c 	lsr.w	r7, r2, ip
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 f40c 	lsr.w	r4, r0, ip
 8000394:	fa05 f301 	lsl.w	r3, r5, r1
 8000398:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039c:	fa25 f50c 	lsr.w	r5, r5, ip
 80003a0:	431c      	orrs	r4, r3
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fbb5 f9fe 	udiv	r9, r5, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 5519 	mls	r5, lr, r9, r5
 80003b0:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
 80003b4:	fb09 fa08 	mul.w	sl, r9, r8
 80003b8:	45aa      	cmp	sl, r5
 80003ba:	fa02 f201 	lsl.w	r2, r2, r1
 80003be:	fa00 f301 	lsl.w	r3, r0, r1
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x21e>
 80003c4:	197d      	adds	r5, r7, r5
 80003c6:	f109 30ff 	add.w	r0, r9, #4294967295
 80003ca:	d247      	bcs.n	800045c <__udivmoddi4+0x2a4>
 80003cc:	45aa      	cmp	sl, r5
 80003ce:	d945      	bls.n	800045c <__udivmoddi4+0x2a4>
 80003d0:	f1a9 0902 	sub.w	r9, r9, #2
 80003d4:	443d      	add	r5, r7
 80003d6:	eba5 050a 	sub.w	r5, r5, sl
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb5 f0fe 	udiv	r0, r5, lr
 80003e0:	fb0e 5510 	mls	r5, lr, r0, r5
 80003e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003e8:	fb00 f808 	mul.w	r8, r0, r8
 80003ec:	45a0      	cmp	r8, r4
 80003ee:	d907      	bls.n	8000400 <__udivmoddi4+0x248>
 80003f0:	193c      	adds	r4, r7, r4
 80003f2:	f100 35ff 	add.w	r5, r0, #4294967295
 80003f6:	d22d      	bcs.n	8000454 <__udivmoddi4+0x29c>
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d92b      	bls.n	8000454 <__udivmoddi4+0x29c>
 80003fc:	3802      	subs	r0, #2
 80003fe:	443c      	add	r4, r7
 8000400:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000404:	eba4 0408 	sub.w	r4, r4, r8
 8000408:	fba0 8902 	umull	r8, r9, r0, r2
 800040c:	454c      	cmp	r4, r9
 800040e:	46c6      	mov	lr, r8
 8000410:	464d      	mov	r5, r9
 8000412:	d319      	bcc.n	8000448 <__udivmoddi4+0x290>
 8000414:	d016      	beq.n	8000444 <__udivmoddi4+0x28c>
 8000416:	b15e      	cbz	r6, 8000430 <__udivmoddi4+0x278>
 8000418:	ebb3 020e 	subs.w	r2, r3, lr
 800041c:	eb64 0405 	sbc.w	r4, r4, r5
 8000420:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000424:	40ca      	lsrs	r2, r1
 8000426:	ea4c 0202 	orr.w	r2, ip, r2
 800042a:	40cc      	lsrs	r4, r1
 800042c:	e9c6 2400 	strd	r2, r4, [r6]
 8000430:	2100      	movs	r1, #0
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	4631      	mov	r1, r6
 8000438:	4630      	mov	r0, r6
 800043a:	e70e      	b.n	800025a <__udivmoddi4+0xa2>
 800043c:	46ac      	mov	ip, r5
 800043e:	e6ed      	b.n	800021c <__udivmoddi4+0x64>
 8000440:	4618      	mov	r0, r3
 8000442:	e701      	b.n	8000248 <__udivmoddi4+0x90>
 8000444:	4543      	cmp	r3, r8
 8000446:	d2e6      	bcs.n	8000416 <__udivmoddi4+0x25e>
 8000448:	ebb8 0e02 	subs.w	lr, r8, r2
 800044c:	eb69 0507 	sbc.w	r5, r9, r7
 8000450:	3801      	subs	r0, #1
 8000452:	e7e0      	b.n	8000416 <__udivmoddi4+0x25e>
 8000454:	4628      	mov	r0, r5
 8000456:	e7d3      	b.n	8000400 <__udivmoddi4+0x248>
 8000458:	4660      	mov	r0, ip
 800045a:	e78f      	b.n	800037c <__udivmoddi4+0x1c4>
 800045c:	4681      	mov	r9, r0
 800045e:	e7ba      	b.n	80003d6 <__udivmoddi4+0x21e>
 8000460:	4661      	mov	r1, ip
 8000462:	e777      	b.n	8000354 <__udivmoddi4+0x19c>
 8000464:	4608      	mov	r0, r1
 8000466:	e74b      	b.n	8000300 <__udivmoddi4+0x148>
 8000468:	f1ac 0c02 	sub.w	ip, ip, #2
 800046c:	443d      	add	r5, r7
 800046e:	e715      	b.n	800029c <__udivmoddi4+0xe4>
 8000470:	3802      	subs	r0, #2
 8000472:	443c      	add	r4, r7
 8000474:	e726      	b.n	80002c4 <__udivmoddi4+0x10c>
 8000476:	bf00      	nop

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800048c:	f023 0218 	bic.w	r2, r3, #24
 8000490:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4313      	orrs	r3, r2
 8000498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800049c:	bf00      	nop
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr

080004a6 <LL_AHB1_GRP1_EnableClock>:
  *         @arg @ref LL_AHB1_GRP1_PERIPH_DMAMUX1
  *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80004a6:	b480      	push	{r7}
 80004a8:	b085      	sub	sp, #20
 80004aa:	af00      	add	r7, sp, #0
 80004ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80004ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80004b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4313      	orrs	r3, r2
 80004bc:	648b      	str	r3, [r1, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80004be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4013      	ands	r3, r2
 80004c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004ca:	68fb      	ldr	r3, [r7, #12]
}
 80004cc:	bf00      	nop
 80004ce:	3714      	adds	r7, #20
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr

080004d6 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004d6:	b480      	push	{r7}
 80004d8:	b085      	sub	sp, #20
 80004da:	af00      	add	r7, sp, #0
 80004dc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004e4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	4313      	orrs	r3, r2
 80004ec:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	4013      	ands	r3, r2
 80004f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004fa:	68fb      	ldr	r3, [r7, #12]
}
 80004fc:	bf00      	nop
 80004fe:	3714      	adds	r7, #20
 8000500:	46bd      	mov	sp, r7
 8000502:	bc80      	pop	{r7}
 8000504:	4770      	bx	lr

08000506 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000506:	b580      	push	{r7, lr}
 8000508:	af00      	add	r7, sp, #0

  HAL_Init();
 800050a:	f000 ffe3 	bl	80014d4 <HAL_Init>
  SystemClock_Config();
 800050e:	f000 f807 	bl	8000520 <SystemClock_Config>
  MX_GPIO_Init();
 8000512:	f000 f923 	bl	800075c <MX_GPIO_Init>
  MX_SubGHz_Phy_Init();
 8000516:	f009 fd40 	bl	8009f9a <MX_SubGHz_Phy_Init>

  while (1)
  {
    /* USER CODE END WHILE */
    MX_SubGHz_Phy_Process();
 800051a:	f009 fd46 	bl	8009faa <MX_SubGHz_Phy_Process>
 800051e:	e7fc      	b.n	800051a <main+0x14>

08000520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b09a      	sub	sp, #104	; 0x68
 8000524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000526:	f107 0320 	add.w	r3, r7, #32
 800052a:	2248      	movs	r2, #72	; 0x48
 800052c:	2100      	movs	r1, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f00b fb52 	bl	800bbd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000534:	f107 0308 	add.w	r3, r7, #8
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]
 8000544:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000546:	f001 ff7d 	bl	8002444 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800054a:	2000      	movs	r0, #0
 800054c:	f7ff ff96 	bl	800047c <LL_RCC_LSE_SetDriveCapability>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000550:	4b1f      	ldr	r3, [pc, #124]	; (80005d0 <SystemClock_Config+0xb0>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000558:	4a1d      	ldr	r2, [pc, #116]	; (80005d0 <SystemClock_Config+0xb0>)
 800055a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4b1b      	ldr	r3, [pc, #108]	; (80005d0 <SystemClock_Config+0xb0>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000568:	607b      	str	r3, [r7, #4]
 800056a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800056c:	2324      	movs	r3, #36	; 0x24
 800056e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000570:	2381      	movs	r3, #129	; 0x81
 8000572:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000574:	2301      	movs	r3, #1
 8000576:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000578:	2300      	movs	r3, #0
 800057a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800057c:	23b0      	movs	r3, #176	; 0xb0
 800057e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000580:	2300      	movs	r3, #0
 8000582:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000584:	f107 0320 	add.w	r3, r7, #32
 8000588:	4618      	mov	r0, r3
 800058a:	f002 faa7 	bl	8002adc <HAL_RCC_OscConfig>
 800058e:	4603      	mov	r3, r0
 8000590:	2b00      	cmp	r3, #0
 8000592:	d001      	beq.n	8000598 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000594:	f000 f924 	bl	80007e0 <Error_Handler>
  }
  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000598:	234f      	movs	r3, #79	; 0x4f
 800059a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005b0:	f107 0308 	add.w	r3, r7, #8
 80005b4:	2102      	movs	r1, #2
 80005b6:	4618      	mov	r0, r3
 80005b8:	f002 fe2a 	bl	8003210 <HAL_RCC_ClockConfig>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80005c2:	f000 f90d 	bl	80007e0 <Error_Handler>
  }
}
 80005c6:	bf00      	nop
 80005c8:	3768      	adds	r7, #104	; 0x68
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	58000400 	.word	0x58000400

080005d4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
void MX_RTC_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08c      	sub	sp, #48	; 0x30
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	222c      	movs	r2, #44	; 0x2c
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f00b faf9 	bl	800bbd8 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80005e6:	4b23      	ldr	r3, [pc, #140]	; (8000674 <MX_RTC_Init+0xa0>)
 80005e8:	4a23      	ldr	r2, [pc, #140]	; (8000678 <MX_RTC_Init+0xa4>)
 80005ea:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80005ec:	4b21      	ldr	r3, [pc, #132]	; (8000674 <MX_RTC_Init+0xa0>)
 80005ee:	221f      	movs	r2, #31
 80005f0:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80005f2:	4b20      	ldr	r3, [pc, #128]	; (8000674 <MX_RTC_Init+0xa0>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80005f8:	4b1e      	ldr	r3, [pc, #120]	; (8000674 <MX_RTC_Init+0xa0>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80005fe:	4b1d      	ldr	r3, [pc, #116]	; (8000674 <MX_RTC_Init+0xa0>)
 8000600:	2200      	movs	r2, #0
 8000602:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000604:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <MX_RTC_Init+0xa0>)
 8000606:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800060a:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800060c:	4b19      	ldr	r3, [pc, #100]	; (8000674 <MX_RTC_Init+0xa0>)
 800060e:	2200      	movs	r2, #0
 8000610:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8000612:	4b18      	ldr	r3, [pc, #96]	; (8000674 <MX_RTC_Init+0xa0>)
 8000614:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000618:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800061a:	4816      	ldr	r0, [pc, #88]	; (8000674 <MX_RTC_Init+0xa0>)
 800061c:	f003 fab8 	bl	8003b90 <HAL_RTC_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_RTC_Init+0x56>
  {
    Error_Handler();
 8000626:	f000 f8db 	bl	80007e0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800062a:	4812      	ldr	r0, [pc, #72]	; (8000674 <MX_RTC_Init+0xa0>)
 800062c:	f003 fda6 	bl	800417c <HAL_RTCEx_SetSSRU_IT>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8000636:	f000 f8d3 	bl	80007e0 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_YES;
 800063a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800063e:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000640:	2300      	movs	r3, #0
 8000642:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000644:	2300      	movs	r3, #0
 8000646:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8000648:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800064c:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800064e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000652:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	2200      	movs	r2, #0
 8000658:	4619      	mov	r1, r3
 800065a:	4806      	ldr	r0, [pc, #24]	; (8000674 <MX_RTC_Init+0xa0>)
 800065c:	f003 fb12 	bl	8003c84 <HAL_RTC_SetAlarm_IT>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_RTC_Init+0x96>
  {
    Error_Handler();
 8000666:	f000 f8bb 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	3730      	adds	r7, #48	; 0x30
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	200007cc 	.word	0x200007cc
 8000678:	40002800 	.word	0x40002800

0800067c <MX_SUBGHZ_Init>:
  * @brief SUBGHZ Initialization Function
  * @param None
  * @retval None
  */
void MX_SUBGHZ_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8000680:	4b06      	ldr	r3, [pc, #24]	; (800069c <MX_SUBGHZ_Init+0x20>)
 8000682:	2208      	movs	r2, #8
 8000684:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_SUBGHZ_Init+0x20>)
 8000688:	f003 fea0 	bl	80043cc <HAL_SUBGHZ_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 8000692:	f000 f8a5 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8000696:	bf00      	nop
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000760 	.word	0x20000760

080006a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a4:	4b22      	ldr	r3, [pc, #136]	; (8000730 <MX_USART2_UART_Init+0x90>)
 80006a6:	4a23      	ldr	r2, [pc, #140]	; (8000734 <MX_USART2_UART_Init+0x94>)
 80006a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006aa:	4b21      	ldr	r3, [pc, #132]	; (8000730 <MX_USART2_UART_Init+0x90>)
 80006ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <MX_USART2_UART_Init+0x90>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b1d      	ldr	r3, [pc, #116]	; (8000730 <MX_USART2_UART_Init+0x90>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006be:	4b1c      	ldr	r3, [pc, #112]	; (8000730 <MX_USART2_UART_Init+0x90>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c4:	4b1a      	ldr	r3, [pc, #104]	; (8000730 <MX_USART2_UART_Init+0x90>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	4b19      	ldr	r3, [pc, #100]	; (8000730 <MX_USART2_UART_Init+0x90>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d0:	4b17      	ldr	r3, [pc, #92]	; (8000730 <MX_USART2_UART_Init+0x90>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d6:	4b16      	ldr	r3, [pc, #88]	; (8000730 <MX_USART2_UART_Init+0x90>)
 80006d8:	2200      	movs	r2, #0
 80006da:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006dc:	4b14      	ldr	r3, [pc, #80]	; (8000730 <MX_USART2_UART_Init+0x90>)
 80006de:	2200      	movs	r2, #0
 80006e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e2:	4b13      	ldr	r3, [pc, #76]	; (8000730 <MX_USART2_UART_Init+0x90>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006e8:	4811      	ldr	r0, [pc, #68]	; (8000730 <MX_USART2_UART_Init+0x90>)
 80006ea:	f004 faaa 	bl	8004c42 <HAL_UART_Init>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d001      	beq.n	80006f8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80006f4:	f000 f874 	bl	80007e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006f8:	2100      	movs	r1, #0
 80006fa:	480d      	ldr	r0, [pc, #52]	; (8000730 <MX_USART2_UART_Init+0x90>)
 80006fc:	f006 fad7 	bl	8006cae <HAL_UARTEx_SetTxFifoThreshold>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000706:	f000 f86b 	bl	80007e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800070a:	2100      	movs	r1, #0
 800070c:	4808      	ldr	r0, [pc, #32]	; (8000730 <MX_USART2_UART_Init+0x90>)
 800070e:	f006 fb0c 	bl	8006d2a <HAL_UARTEx_SetRxFifoThreshold>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000718:	f000 f862 	bl	80007e0 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 800071c:	4804      	ldr	r0, [pc, #16]	; (8000730 <MX_USART2_UART_Init+0x90>)
 800071e:	f006 fa8b 	bl	8006c38 <HAL_UARTEx_EnableFifoMode>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000728:	f000 f85a 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800072c:	bf00      	nop
 800072e:	bd80      	pop	{r7, pc}
 8000730:	20000804 	.word	0x20000804
 8000734:	40004400 	.word	0x40004400

08000738 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800073c:	2004      	movs	r0, #4
 800073e:	f7ff feb2 	bl	80004a6 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000742:	2001      	movs	r0, #1
 8000744:	f7ff feaf 	bl	80004a6 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8000748:	2200      	movs	r2, #0
 800074a:	2102      	movs	r1, #2
 800074c:	200b      	movs	r0, #11
 800074e:	f000 fffa 	bl	8001746 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000752:	200b      	movs	r0, #11
 8000754:	f001 f811 	bl	800177a <HAL_NVIC_EnableIRQ>

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	1d3b      	adds	r3, r7, #4
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000770:	2001      	movs	r0, #1
 8000772:	f7ff feb0 	bl	80004d6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000776:	2002      	movs	r0, #2
 8000778:	f7ff fead 	bl	80004d6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077c:	2004      	movs	r0, #4
 800077e:	f7ff feaa 	bl	80004d6 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED0_Pin|LED1_Pin|RF_SW1_Pin, GPIO_PIN_RESET);
 8000782:	2200      	movs	r2, #0
 8000784:	f240 1103 	movw	r1, #259	; 0x103
 8000788:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078c:	f001 fe2a 	bl	80023e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RF_SW2_GPIO_Port, RF_SW2_Pin, GPIO_PIN_RESET);
 8000790:	2200      	movs	r2, #0
 8000792:	2101      	movs	r1, #1
 8000794:	4811      	ldr	r0, [pc, #68]	; (80007dc <MX_GPIO_Init+0x80>)
 8000796:	f001 fe25 	bl	80023e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED0_Pin LED1_Pin RF_SW1_Pin */
  GPIO_InitStruct.Pin = LED0_Pin|LED1_Pin|RF_SW1_Pin;
 800079a:	f240 1303 	movw	r3, #259	; 0x103
 800079e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a0:	2301      	movs	r3, #1
 80007a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	2300      	movs	r3, #0
 80007aa:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	4619      	mov	r1, r3
 80007b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b4:	f001 fbe8 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : RF_SW2_Pin */
  GPIO_InitStruct.Pin = RF_SW2_Pin;
 80007b8:	2301      	movs	r3, #1
 80007ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007bc:	2301      	movs	r3, #1
 80007be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c4:	2300      	movs	r3, #0
 80007c6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(RF_SW2_GPIO_Port, &GPIO_InitStruct);
 80007c8:	1d3b      	adds	r3, r7, #4
 80007ca:	4619      	mov	r1, r3
 80007cc:	4803      	ldr	r0, [pc, #12]	; (80007dc <MX_GPIO_Init+0x80>)
 80007ce:	f001 fbdb 	bl	8001f88 <HAL_GPIO_Init>

}
 80007d2:	bf00      	nop
 80007d4:	3718      	adds	r7, #24
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	48000400 	.word	0x48000400

080007e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e4:	b672      	cpsid	i
}
 80007e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <Error_Handler+0x8>
	...

080007ec <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80007f0:	4b03      	ldr	r3, [pc, #12]	; (8000800 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 80007f2:	2201      	movs	r2, #1
 80007f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr
 8000800:	58000400 	.word	0x58000400

08000804 <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr

08000810 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 8000814:	bf00      	nop
 8000816:	46bd      	mov	sp, r7
 8000818:	bc80      	pop	{r7}
 800081a:	4770      	bx	lr

0800081c <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8000820:	f000 fe78 	bl	8001514 <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 8000824:	f7ff ffe2 	bl	80007ec <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8000828:	2001      	movs	r0, #1
 800082a:	f001 fe9d 	bl	8002568 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 800082e:	bf00      	nop
 8000830:	bd80      	pop	{r7, pc}

08000832 <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 8000836:	f000 fe7b 	bl	8001530 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 800083a:	f000 fd87 	bl	800134c <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}

08000842 <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 8000846:	f000 fe65 	bl	8001514 <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800084a:	2101      	movs	r1, #1
 800084c:	2000      	movs	r0, #0
 800084e:	f001 fe07 	bl	8002460 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 8000852:	bf00      	nop
 8000854:	bd80      	pop	{r7, pc}

08000856 <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Suspend sysTick */
  HAL_ResumeTick();
 800085a:	f000 fe69 	bl	8001530 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}

08000862 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8000862:	b480      	push	{r7}
 8000864:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000866:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800086a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800086e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000872:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000876:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	bc80      	pop	{r7}
 8000880:	4770      	bx	lr

08000882 <LL_AHB2_GRP1_EnableClock>:
{
 8000882:	b480      	push	{r7}
 8000884:	b085      	sub	sp, #20
 8000886:	af00      	add	r7, sp, #0
 8000888:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800088a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800088e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000890:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4313      	orrs	r3, r2
 8000898:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800089a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800089e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4013      	ands	r3, r2
 80008a4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008a6:	68fb      	ldr	r3, [r7, #12]
}
 80008a8:	bf00      	nop
 80008aa:	3714      	adds	r7, #20
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bc80      	pop	{r7}
 80008b0:	4770      	bx	lr

080008b2 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008b2:	b480      	push	{r7}
 80008b4:	b085      	sub	sp, #20
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80008ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008be:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008c0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4313      	orrs	r3, r2
 80008c8:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80008ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	4013      	ands	r3, r2
 80008d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008d6:	68fb      	ldr	r3, [r7, #12]
}
 80008d8:	bf00      	nop
 80008da:	3714      	adds	r7, #20
 80008dc:	46bd      	mov	sp, r7
 80008de:	bc80      	pop	{r7}
 80008e0:	4770      	bx	lr

080008e2 <LL_APB1_GRP1_DisableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1

  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
 80008e2:	b480      	push	{r7}
 80008e4:	b083      	sub	sp, #12
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 80008ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80008ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	43db      	mvns	r3, r3
 80008f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80008f8:	4013      	ands	r3, r2
 80008fa:	658b      	str	r3, [r1, #88]	; 0x58
}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr

08000906 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8000906:	b480      	push	{r7}
 8000908:	b085      	sub	sp, #20
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 800090e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000912:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000914:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4313      	orrs	r3, r2
 800091c:	664b      	str	r3, [r1, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 800091e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000922:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4013      	ands	r3, r2
 8000928:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800092a:	68fb      	ldr	r3, [r7, #12]
}
 800092c:	bf00      	nop
 800092e:	3714      	adds	r7, #20
 8000930:	46bd      	mov	sp, r7
 8000932:	bc80      	pop	{r7}
 8000934:	4770      	bx	lr

08000936 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr
	...

08000944 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b090      	sub	sp, #64	; 0x40
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800094c:	f107 0308 	add.w	r3, r7, #8
 8000950:	2238      	movs	r2, #56	; 0x38
 8000952:	2100      	movs	r1, #0
 8000954:	4618      	mov	r0, r3
 8000956:	f00b f93f 	bl	800bbd8 <memset>
  if(hrtc->Instance==RTC)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	4a16      	ldr	r2, [pc, #88]	; (80009b8 <HAL_RTC_MspInit+0x74>)
 8000960:	4293      	cmp	r3, r2
 8000962:	d125      	bne.n	80009b0 <HAL_RTC_MspInit+0x6c>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000964:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000968:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800096a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800096e:	63fb      	str	r3, [r7, #60]	; 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000970:	f107 0308 	add.w	r3, r7, #8
 8000974:	4618      	mov	r0, r3
 8000976:	f002 fff1 	bl	800395c <HAL_RCCEx_PeriphCLKConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000980:	f7ff ff2e 	bl	80007e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000984:	f7ff ff6d 	bl	8000862 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000988:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800098c:	f7ff ff91 	bl	80008b2 <LL_APB1_GRP1_EnableClock>
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8000990:	2200      	movs	r2, #0
 8000992:	2100      	movs	r1, #0
 8000994:	2002      	movs	r0, #2
 8000996:	f000 fed6 	bl	8001746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 800099a:	2002      	movs	r0, #2
 800099c:	f000 feed 	bl	800177a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80009a0:	2200      	movs	r2, #0
 80009a2:	2100      	movs	r1, #0
 80009a4:	202a      	movs	r0, #42	; 0x2a
 80009a6:	f000 fece 	bl	8001746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80009aa:	202a      	movs	r0, #42	; 0x2a
 80009ac:	f000 fee5 	bl	800177a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80009b0:	bf00      	nop
 80009b2:	3740      	adds	r7, #64	; 0x40
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40002800 	.word	0x40002800

080009bc <HAL_SUBGHZ_MspInit>:
* This function configures the hardware resources used in this example
* @param hsubghz: SUBGHZ handle pointer
* @retval None
*/
void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* hsubghz)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80009c4:	2001      	movs	r0, #1
 80009c6:	f7ff ff9e 	bl	8000906 <LL_APB3_GRP1_EnableClock>
    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2100      	movs	r1, #0
 80009ce:	2032      	movs	r0, #50	; 0x32
 80009d0:	f000 feb9 	bl	8001746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80009d4:	2032      	movs	r0, #50	; 0x32
 80009d6:	f000 fed0 	bl	800177a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */

}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b096      	sub	sp, #88	; 0x58
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
 80009fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009fc:	f107 030c 	add.w	r3, r7, #12
 8000a00:	2238      	movs	r2, #56	; 0x38
 8000a02:	2100      	movs	r1, #0
 8000a04:	4618      	mov	r0, r3
 8000a06:	f00b f8e7 	bl	800bbd8 <memset>
  if(huart->Instance==USART2)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	4a2f      	ldr	r2, [pc, #188]	; (8000acc <HAL_UART_MspInit+0xe8>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d157      	bne.n	8000ac4 <HAL_UART_MspInit+0xe0>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a14:	2302      	movs	r3, #2
 8000a16:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a18:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000a1c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a1e:	f107 030c 	add.w	r3, r7, #12
 8000a22:	4618      	mov	r0, r3
 8000a24:	f002 ff9a 	bl	800395c <HAL_RCCEx_PeriphCLKConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a2e:	f7ff fed7 	bl	80007e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a32:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000a36:	f7ff ff3c 	bl	80008b2 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3a:	2001      	movs	r0, #1
 8000a3c:	f7ff ff21 	bl	8000882 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a40:	230c      	movs	r3, #12
 8000a42:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a50:	2307      	movs	r3, #7
 8000a52:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a54:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a58:	4619      	mov	r1, r3
 8000a5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5e:	f001 fa93 	bl	8001f88 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8000a62:	4b1b      	ldr	r3, [pc, #108]	; (8000ad0 <HAL_UART_MspInit+0xec>)
 8000a64:	4a1b      	ldr	r2, [pc, #108]	; (8000ad4 <HAL_UART_MspInit+0xf0>)
 8000a66:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8000a68:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <HAL_UART_MspInit+0xec>)
 8000a6a:	2214      	movs	r2, #20
 8000a6c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a6e:	4b18      	ldr	r3, [pc, #96]	; (8000ad0 <HAL_UART_MspInit+0xec>)
 8000a70:	2210      	movs	r2, #16
 8000a72:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a74:	4b16      	ldr	r3, [pc, #88]	; (8000ad0 <HAL_UART_MspInit+0xec>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a7a:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <HAL_UART_MspInit+0xec>)
 8000a7c:	2280      	movs	r2, #128	; 0x80
 8000a7e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a80:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <HAL_UART_MspInit+0xec>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a86:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <HAL_UART_MspInit+0xec>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000a8c:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <HAL_UART_MspInit+0xec>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a92:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <HAL_UART_MspInit+0xec>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000a98:	480d      	ldr	r0, [pc, #52]	; (8000ad0 <HAL_UART_MspInit+0xec>)
 8000a9a:	f000 fe8b 	bl	80017b4 <HAL_DMA_Init>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8000aa4:	f7ff fe9c 	bl	80007e0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a09      	ldr	r2, [pc, #36]	; (8000ad0 <HAL_UART_MspInit+0xec>)
 8000aac:	679a      	str	r2, [r3, #120]	; 0x78
 8000aae:	4a08      	ldr	r2, [pc, #32]	; (8000ad0 <HAL_UART_MspInit+0xec>)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2102      	movs	r1, #2
 8000ab8:	2025      	movs	r0, #37	; 0x25
 8000aba:	f000 fe44 	bl	8001746 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000abe:	2025      	movs	r0, #37	; 0x25
 8000ac0:	f000 fe5b 	bl	800177a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ac4:	bf00      	nop
 8000ac6:	3758      	adds	r7, #88	; 0x58
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	40004400 	.word	0x40004400
 8000ad0:	2000076c 	.word	0x2000076c
 8000ad4:	40020008 	.word	0x40020008

08000ad8 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	4a0b      	ldr	r2, [pc, #44]	; (8000b14 <HAL_UART_MspDeInit+0x3c>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d110      	bne.n	8000b0c <HAL_UART_MspDeInit+0x34>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8000aea:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000aee:	f7ff fef8 	bl	80008e2 <LL_APB1_GRP1_DisableClock>

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8000af2:	210c      	movs	r1, #12
 8000af4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000af8:	f001 fba6 	bl	8002248 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmatx);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8000b00:	4618      	mov	r0, r3
 8000b02:	f000 feff 	bl	8001904 <HAL_DMA_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8000b06:	2025      	movs	r0, #37	; 0x25
 8000b08:	f000 fe45 	bl	8001796 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8000b0c:	bf00      	nop
 8000b0e:	3708      	adds	r7, #8
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	40004400 	.word	0x40004400

08000b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <NMI_Handler+0x4>

08000b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b22:	e7fe      	b.n	8000b22 <HardFault_Handler+0x4>

08000b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b28:	e7fe      	b.n	8000b28 <MemManage_Handler+0x4>

08000b2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b2e:	e7fe      	b.n	8000b2e <BusFault_Handler+0x4>

08000b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <UsageFault_Handler+0x4>

08000b36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3a:	bf00      	nop
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bc80      	pop	{r7}
 8000b40:	4770      	bx	lr

08000b42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr

08000b4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr

08000b5a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b5a:	b480      	push	{r7}
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bc80      	pop	{r7}
 8000b64:	4770      	bx	lr
	...

08000b68 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8000b6c:	4802      	ldr	r0, [pc, #8]	; (8000b78 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 8000b6e:	f003 fb41 	bl	80041f4 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	200007cc 	.word	0x200007cc

08000b7c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000b80:	4802      	ldr	r0, [pc, #8]	; (8000b8c <DMA1_Channel1_IRQHandler+0x10>)
 8000b82:	f001 f891 	bl	8001ca8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	2000076c 	.word	0x2000076c

08000b90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b94:	4802      	ldr	r0, [pc, #8]	; (8000ba0 <USART2_IRQHandler+0x10>)
 8000b96:	f004 f98d 	bl	8004eb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000804 	.word	0x20000804

08000ba4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000ba8:	4802      	ldr	r0, [pc, #8]	; (8000bb4 <RTC_Alarm_IRQHandler+0x10>)
 8000baa:	f003 f9d3 	bl	8003f54 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	200007cc 	.word	0x200007cc

08000bb8 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8000bbc:	4802      	ldr	r0, [pc, #8]	; (8000bc8 <SUBGHZ_Radio_IRQHandler+0x10>)
 8000bbe:	f003 fe81 	bl	80048c4 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	20000760 	.word	0x20000760

08000bcc <LL_RCC_SetClkAfterWakeFromStop>:
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8000bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000bd8:	689b      	ldr	r3, [r3, #8]
 8000bda:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8000bde:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	4313      	orrs	r3, r2
 8000be6:	608b      	str	r3, [r1, #8]
}
 8000be8:	bf00      	nop
 8000bea:	370c      	adds	r7, #12
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bc80      	pop	{r7}
 8000bf0:	4770      	bx	lr
	...

08000bf4 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8000bf8:	2000      	movs	r0, #0
 8000bfa:	f7ff ffe7 	bl	8000bcc <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8000bfe:	f00a fa93 	bl	800b128 <UTIL_TIMER_Init>

  /* Debug config : disable serial wires and DbgMcu pins settings */
  DBG_Disable();
 8000c02:	f000 f893 	bl	8000d2c <DBG_Disable>

  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_ProbesInit();
 8000c06:	f000 f8b3 	bl	8000d70 <DBG_ProbesInit>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8000c0a:	f00a fd1d 	bl	800b648 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8000c0e:	4807      	ldr	r0, [pc, #28]	; (8000c2c <SystemApp_Init+0x38>)
 8000c10:	f00a fdb8 	bl	800b784 <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8000c14:	2002      	movs	r0, #2
 8000c16:	f00a fdc3 	bl	800b7a0 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8000c1a:	f009 fd71 	bl	800a700 <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8000c1e:	2101      	movs	r1, #1
 8000c20:	2001      	movs	r0, #1
 8000c22:	f009 fdad 	bl	800a780 <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	08000c3d 	.word	0x08000c3d

08000c30 <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8000c34:	f009 fdd4 	bl	800a7e0 <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}

08000c3c <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af02      	add	r7, sp, #8
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8000c46:	f107 0308 	add.w	r3, r7, #8
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f009 fe52 	bl	800a8f4 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000c56:	9200      	str	r2, [sp, #0]
 8000c58:	4a07      	ldr	r2, [pc, #28]	; (8000c78 <TimestampNow+0x3c>)
 8000c5a:	2110      	movs	r1, #16
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f000 f81d 	bl	8000c9c <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8000c62:	6878      	ldr	r0, [r7, #4]
 8000c64:	f7ff fa88 	bl	8000178 <strlen>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	b29a      	uxth	r2, r3
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8000c70:	bf00      	nop
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	0800bc24 	.word	0x0800bc24

08000c7c <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8000c80:	2101      	movs	r1, #1
 8000c82:	2002      	movs	r0, #2
 8000c84:	f009 fd4c 	bl	800a720 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8000c90:	2100      	movs	r1, #0
 8000c92:	2002      	movs	r0, #2
 8000c94:	f009 fd44 	bl	800a720 <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8000c9c:	b40c      	push	{r2, r3}
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b084      	sub	sp, #16
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
 8000ca6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8000ca8:	f107 031c 	add.w	r3, r7, #28
 8000cac:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8000cae:	6839      	ldr	r1, [r7, #0]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	6878      	ldr	r0, [r7, #4]
 8000cb6:	f009 ff6b 	bl	800ab90 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8000cba:	bf00      	nop
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000cc4:	b002      	add	sp, #8
 8000cc6:	4770      	bx	lr

08000cc8 <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8000cd0:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr

08000cdc <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  return TIMER_IF_GetTimerValue();
 8000ce0:	f000 f910 	bl	8000f04 <TIMER_IF_GetTimerValue>
 8000ce4:	4603      	mov	r3, r0
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f000 f985 	bl	8001004 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <LL_EXTI_EnableIT_32_63+0x24>)
 8000d0e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000d12:	4905      	ldr	r1, [pc, #20]	; (8000d28 <LL_EXTI_EnableIT_32_63+0x24>)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	4313      	orrs	r3, r2
 8000d18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000d1c:	bf00      	nop
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bc80      	pop	{r7}
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	58000800 	.word	0x58000800

08000d2c <DBG_Disable>:

/**
  * @brief Disable debugger (serial wires pins)
  */
void DBG_Disable(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  /* Disabled HAL_DBGMCU_  */
  DBG_ConfigForLpm(0);
 8000d30:	2000      	movs	r0, #0
 8000d32:	f000 f802 	bl	8000d3a <DBG_ConfigForLpm>

  /* USER CODE BEGIN DBG_Init_Last */

  /* USER CODE END DBG_Init_Last */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <DBG_ConfigForLpm>:
/**
  * @brief Config debugger when working in Low Power Mode
  * @note  When in Dual Core DbgMcu pins should be better disable only after Cm0 is started
  */
void DBG_ConfigForLpm(uint8_t enableDbg)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b084      	sub	sp, #16
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	4603      	mov	r3, r0
 8000d42:	71fb      	strb	r3, [r7, #7]
  uint8_t enable_dbg = enableDbg;
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	73fb      	strb	r3, [r7, #15]
  enable_dbg = 0;
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  if (enable_dbg == 1)
 8000d48:	7bfb      	ldrb	r3, [r7, #15]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d106      	bne.n	8000d5c <DBG_ConfigForLpm+0x22>
  {
    HAL_DBGMCU_EnableDBGSleepMode();
 8000d4e:	f000 fbfd 	bl	800154c <HAL_DBGMCU_EnableDBGSleepMode>
    HAL_DBGMCU_EnableDBGStopMode();
 8000d52:	f000 fc07 	bl	8001564 <HAL_DBGMCU_EnableDBGStopMode>
    HAL_DBGMCU_EnableDBGStandbyMode();
 8000d56:	f000 fc11 	bl	800157c <HAL_DBGMCU_EnableDBGStandbyMode>
  }

  /* USER CODE BEGIN DBG_ConfigForLpm_Last */

  /* USER CODE END DBG_ConfigForLpm_Last */
}
 8000d5a:	e005      	b.n	8000d68 <DBG_ConfigForLpm+0x2e>
    HAL_DBGMCU_DisableDBGSleepMode();
 8000d5c:	f000 fbfc 	bl	8001558 <HAL_DBGMCU_DisableDBGSleepMode>
    HAL_DBGMCU_DisableDBGStopMode();
 8000d60:	f000 fc06 	bl	8001570 <HAL_DBGMCU_DisableDBGStopMode>
    HAL_DBGMCU_DisableDBGStandbyMode();
 8000d64:	f000 fc10 	bl	8001588 <HAL_DBGMCU_DisableDBGStandbyMode>
}
 8000d68:	bf00      	nop
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <DBG_ProbesInit>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
void DBG_ProbesInit(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END DBG_ProbesInit_3 */

#if defined(CORE_CM4)
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 1 )
  /*Debug power up request wakeup CBDGPWRUPREQ*/
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_46);
 8000d74:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000d78:	f7ff ffc4 	bl	8000d04 <LL_EXTI_EnableIT_32_63>
#endif /* CORE_CM4 */

  /* USER CODE BEGIN DBG_ProbesInit_Last */

  /* USER CODE END DBG_ProbesInit_Last */
}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bc80      	pop	{r7}
 8000d8a:	4770      	bx	lr

08000d8c <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	689b      	ldr	r3, [r3, #8]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bc80      	pop	{r7}
 8000da0:	4770      	bx	lr
	...

08000da4 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000daa:	2300      	movs	r3, #0
 8000dac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8000dae:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <TIMER_IF_Init+0x5c>)
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	f083 0301 	eor.w	r3, r3, #1
 8000db6:	b2db      	uxtb	r3, r3
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d01b      	beq.n	8000df4 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000dbc:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <TIMER_IF_Init+0x60>)
 8000dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc2:	631a      	str	r2, [r3, #48]	; 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8000dc4:	f7ff fc06 	bl	80005d4 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8000dc8:	f000 f856 	bl	8000e78 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000dcc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dd0:	480c      	ldr	r0, [pc, #48]	; (8000e04 <TIMER_IF_Init+0x60>)
 8000dd2:	f003 f863 	bl	8003e9c <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <TIMER_IF_Init+0x60>)
 8000dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ddc:	631a      	str	r2, [r3, #48]	; 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8000dde:	4809      	ldr	r0, [pc, #36]	; (8000e04 <TIMER_IF_Init+0x60>)
 8000de0:	f003 f99a 	bl	8004118 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8000de4:	2000      	movs	r0, #0
 8000de6:	f000 f9cf 	bl	8001188 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8000dea:	f000 f85f 	bl	8000eac <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8000dee:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <TIMER_IF_Init+0x5c>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8000df4:	79fb      	ldrb	r3, [r7, #7]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000038 	.word	0x20000038
 8000e04:	200007cc 	.word	0x200007cc

08000e08 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08e      	sub	sp, #56	; 0x38
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000e10:	2300      	movs	r3, #0
 8000e12:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8000e16:	f107 0308 	add.w	r3, r7, #8
 8000e1a:	222c      	movs	r2, #44	; 0x2c
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f00a feda 	bl	800bbd8 <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8000e24:	f000 f828 	bl	8000e78 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8000e28:	4b11      	ldr	r3, [pc, #68]	; (8000e70 <TIMER_IF_StartTimer+0x68>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	4413      	add	r3, r2
 8000e30:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8000e32:	2300      	movs	r3, #0
 8000e34:	627b      	str	r3, [r7, #36]	; 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8000e40:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000e44:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8000e46:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e4a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000e4c:	f107 0308 	add.w	r3, r7, #8
 8000e50:	2201      	movs	r2, #1
 8000e52:	4619      	mov	r1, r3
 8000e54:	4807      	ldr	r0, [pc, #28]	; (8000e74 <TIMER_IF_StartTimer+0x6c>)
 8000e56:	f002 ff15 	bl	8003c84 <HAL_RTC_SetAlarm_IT>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8000e60:	f7ff fcbe 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8000e64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3738      	adds	r7, #56	; 0x38
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	2000003c 	.word	0x2000003c
 8000e74:	200007cc 	.word	0x200007cc

08000e78 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8000e82:	4b08      	ldr	r3, [pc, #32]	; (8000ea4 <TIMER_IF_StopTimer+0x2c>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000e88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e8c:	4806      	ldr	r0, [pc, #24]	; (8000ea8 <TIMER_IF_StopTimer+0x30>)
 8000e8e:	f003 f805 	bl	8003e9c <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8000e92:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <TIMER_IF_StopTimer+0x30>)
 8000e94:	f04f 32ff 	mov.w	r2, #4294967295
 8000e98:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40002800 	.word	0x40002800
 8000ea8:	200007cc 	.word	0x200007cc

08000eac <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8000eb0:	f000 f98a 	bl	80011c8 <GetTimerTicks>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	4a03      	ldr	r2, [pc, #12]	; (8000ec4 <TIMER_IF_SetTimerContext+0x18>)
 8000eb8:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8000eba:	4b02      	ldr	r3, [pc, #8]	; (8000ec4 <TIMER_IF_SetTimerContext+0x18>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	2000003c 	.word	0x2000003c

08000ec8 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8000ecc:	4b02      	ldr	r3, [pc, #8]	; (8000ed8 <TIMER_IF_GetTimerContext+0x10>)
 8000ece:	681b      	ldr	r3, [r3, #0]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bc80      	pop	{r7}
 8000ed6:	4770      	bx	lr
 8000ed8:	2000003c 	.word	0x2000003c

08000edc <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8000ee6:	f000 f96f 	bl	80011c8 <GetTimerTicks>
 8000eea:	4602      	mov	r2, r0
 8000eec:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8000ef4:	687b      	ldr	r3, [r7, #4]
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	2000003c 	.word	0x2000003c

08000f04 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8000f0e:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <TIMER_IF_GetTimerValue+0x24>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d002      	beq.n	8000f1c <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8000f16:	f000 f957 	bl	80011c8 <GetTimerTicks>
 8000f1a:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 8000f1c:	687b      	ldr	r3, [r7, #4]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000038 	.word	0x20000038

08000f2c <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8000f36:	2303      	movs	r3, #3
 8000f38:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 8000f3a:	687b      	ldr	r3, [r7, #4]
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr

08000f46 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8000f46:	b5b0      	push	{r4, r5, r7, lr}
 8000f48:	b084      	sub	sp, #16
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	461a      	mov	r2, r3
 8000f56:	f04f 0300 	mov.w	r3, #0
 8000f5a:	0d95      	lsrs	r5, r2, #22
 8000f5c:	0294      	lsls	r4, r2, #10
 8000f5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f62:	f04f 0300 	mov.w	r3, #0
 8000f66:	4620      	mov	r0, r4
 8000f68:	4629      	mov	r1, r5
 8000f6a:	f7ff f90d 	bl	8000188 <__aeabi_uldivmod>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	460b      	mov	r3, r1
 8000f72:	4613      	mov	r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8000f76:	68fb      	ldr	r3, [r7, #12]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bdb0      	pop	{r4, r5, r7, pc}

08000f80 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8000f80:	b4b0      	push	{r4, r5, r7}
 8000f82:	b085      	sub	sp, #20
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f04f 0100 	mov.w	r1, #0
 8000f94:	4602      	mov	r2, r0
 8000f96:	460b      	mov	r3, r1
 8000f98:	f04f 0400 	mov.w	r4, #0
 8000f9c:	f04f 0500 	mov.w	r5, #0
 8000fa0:	015d      	lsls	r5, r3, #5
 8000fa2:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8000fa6:	0154      	lsls	r4, r2, #5
 8000fa8:	4622      	mov	r2, r4
 8000faa:	462b      	mov	r3, r5
 8000fac:	1a12      	subs	r2, r2, r0
 8000fae:	eb63 0301 	sbc.w	r3, r3, r1
 8000fb2:	f04f 0400 	mov.w	r4, #0
 8000fb6:	f04f 0500 	mov.w	r5, #0
 8000fba:	009d      	lsls	r5, r3, #2
 8000fbc:	ea45 7592 	orr.w	r5, r5, r2, lsr #30
 8000fc0:	0094      	lsls	r4, r2, #2
 8000fc2:	4622      	mov	r2, r4
 8000fc4:	462b      	mov	r3, r5
 8000fc6:	1812      	adds	r2, r2, r0
 8000fc8:	eb41 0303 	adc.w	r3, r1, r3
 8000fcc:	f04f 0000 	mov.w	r0, #0
 8000fd0:	f04f 0100 	mov.w	r1, #0
 8000fd4:	00d9      	lsls	r1, r3, #3
 8000fd6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8000fda:	00d0      	lsls	r0, r2, #3
 8000fdc:	4602      	mov	r2, r0
 8000fde:	460b      	mov	r3, r1
 8000fe0:	4610      	mov	r0, r2
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f04f 0200 	mov.w	r2, #0
 8000fe8:	f04f 0300 	mov.w	r3, #0
 8000fec:	0a82      	lsrs	r2, r0, #10
 8000fee:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 8000ff2:	0a8b      	lsrs	r3, r1, #10
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 8000ff8:	68fb      	ldr	r3, [r7, #12]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3714      	adds	r7, #20
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bcb0      	pop	{r4, r5, r7}
 8001002:	4770      	bx	lr

08001004 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f7ff ff9a 	bl	8000f46 <TIMER_IF_Convert_ms2Tick>
 8001012:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8001014:	f000 f8d8 	bl	80011c8 <GetTimerTicks>
 8001018:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 800101a:	e000      	b.n	800101e <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 800101c:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 800101e:	f000 f8d3 	bl	80011c8 <GetTimerTicks>
 8001022:	4602      	mov	r2, r0
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	1ad3      	subs	r3, r2, r3
 8001028:	68fa      	ldr	r2, [r7, #12]
 800102a:	429a      	cmp	r2, r3
 800102c:	d8f6      	bhi.n	800101c <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 800102e:	bf00      	nop
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8001040:	f00a f9c0 	bl	800b3c4 <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8001044:	bf00      	nop
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8001054:	f000 f8a8 	bl	80011a8 <TIMER_IF_BkUp_Read_MSBticks>
 8001058:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	3301      	adds	r3, #1
 800105e:	4618      	mov	r0, r3
 8001060:	f000 f892 	bl	8001188 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 800106c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001070:	b088      	sub	sp, #32
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  uint32_t seconds = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	61fb      	str	r3, [r7, #28]
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 800107a:	f000 f8a5 	bl	80011c8 <GetTimerTicks>
 800107e:	61b8      	str	r0, [r7, #24]
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8001080:	f000 f892 	bl	80011a8 <TIMER_IF_BkUp_Read_MSBticks>
 8001084:	6178      	str	r0, [r7, #20]

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	4618      	mov	r0, r3
 800108a:	f04f 0100 	mov.w	r1, #0
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	f04f 0300 	mov.w	r3, #0
 8001096:	0003      	movs	r3, r0
 8001098:	2200      	movs	r2, #0
 800109a:	69b9      	ldr	r1, [r7, #24]
 800109c:	4608      	mov	r0, r1
 800109e:	f04f 0100 	mov.w	r1, #0
 80010a2:	eb12 0800 	adds.w	r8, r2, r0
 80010a6:	eb43 0901 	adc.w	r9, r3, r1
 80010aa:	e9c7 8902 	strd	r8, r9, [r7, #8]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 80010ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80010b2:	f04f 0200 	mov.w	r2, #0
 80010b6:	f04f 0300 	mov.w	r3, #0
 80010ba:	0a82      	lsrs	r2, r0, #10
 80010bc:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80010c0:	0a8b      	lsrs	r3, r1, #10
 80010c2:	4613      	mov	r3, r2
 80010c4:	61fb      	str	r3, [r7, #28]

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	461a      	mov	r2, r3
 80010ca:	f04f 0300 	mov.w	r3, #0
 80010ce:	f240 30ff 	movw	r0, #1023	; 0x3ff
 80010d2:	f04f 0100 	mov.w	r1, #0
 80010d6:	ea02 0400 	and.w	r4, r2, r0
 80010da:	ea03 0501 	and.w	r5, r3, r1
 80010de:	e9c7 4502 	strd	r4, r5, [r7, #8]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80010e2:	68bb      	ldr	r3, [r7, #8]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff4b 	bl	8000f80 <TIMER_IF_Convert_Tick2ms>
 80010ea:	4603      	mov	r3, r0
 80010ec:	b29a      	uxth	r2, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 80010f2:	69fb      	ldr	r3, [r7, #28]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3720      	adds	r7, #32
 80010f8:	46bd      	mov	sp, r7
 80010fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08001100 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	2100      	movs	r1, #0
 800110c:	4803      	ldr	r0, [pc, #12]	; (800111c <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 800110e:	f003 f895 	bl	800423c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	200007cc 	.word	0x200007cc

08001120 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	2101      	movs	r1, #1
 800112c:	4803      	ldr	r0, [pc, #12]	; (800113c <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 800112e:	f003 f885 	bl	800423c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200007cc 	.word	0x200007cc

08001140 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 800114a:	2100      	movs	r1, #0
 800114c:	4804      	ldr	r0, [pc, #16]	; (8001160 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 800114e:	f003 f88d 	bl	800426c <HAL_RTCEx_BKUPRead>
 8001152:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 8001154:	687b      	ldr	r3, [r7, #4]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200007cc 	.word	0x200007cc

08001164 <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 800116e:	2101      	movs	r1, #1
 8001170:	4804      	ldr	r0, [pc, #16]	; (8001184 <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 8001172:	f003 f87b 	bl	800426c <HAL_RTCEx_BKUPRead>
 8001176:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8001178:	687b      	ldr	r3, [r7, #4]
}
 800117a:	4618      	mov	r0, r3
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	200007cc 	.word	0x200007cc

08001188 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001190:	687a      	ldr	r2, [r7, #4]
 8001192:	2102      	movs	r1, #2
 8001194:	4803      	ldr	r0, [pc, #12]	; (80011a4 <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 8001196:	f003 f851 	bl	800423c <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200007cc 	.word	0x200007cc

080011a8 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80011ae:	2102      	movs	r1, #2
 80011b0:	4804      	ldr	r0, [pc, #16]	; (80011c4 <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 80011b2:	f003 f85b 	bl	800426c <HAL_RTCEx_BKUPRead>
 80011b6:	6078      	str	r0, [r7, #4]
  return MSBticks;
 80011b8:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200007cc 	.word	0x200007cc

080011c8 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  return (UINT32_MAX - LL_RTC_TIME_GetSubSecond(RTC));
 80011cc:	4803      	ldr	r0, [pc, #12]	; (80011dc <GetTimerTicks+0x14>)
 80011ce:	f7ff fddd 	bl	8000d8c <LL_RTC_TIME_GetSubSecond>
 80011d2:	4603      	mov	r3, r0
 80011d4:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40002800 	.word	0x40002800

080011e0 <LL_APB1_GRP1_ForceReset>:
{
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1RSTR1, Periphs);
 80011e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	638b      	str	r3, [r1, #56]	; 0x38
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bc80      	pop	{r7}
 8001200:	4770      	bx	lr

08001202 <LL_APB1_GRP1_ReleaseReset>:
{
 8001202:	b480      	push	{r7}
 8001204:	b083      	sub	sp, #12
 8001206:	af00      	add	r7, sp, #0
 8001208:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 800120a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800120e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	43db      	mvns	r3, r3
 8001214:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001218:	4013      	ands	r3, r2
 800121a:	638b      	str	r3, [r1, #56]	; 0x38
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr
	...

08001228 <LL_EXTI_EnableIT_0_31>:
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001230:	4b06      	ldr	r3, [pc, #24]	; (800124c <LL_EXTI_EnableIT_0_31+0x24>)
 8001232:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001236:	4905      	ldr	r1, [pc, #20]	; (800124c <LL_EXTI_EnableIT_0_31+0x24>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4313      	orrs	r3, r2
 800123c:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	bc80      	pop	{r7}
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	58000800 	.word	0x58000800

08001250 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8001258:	4a07      	ldr	r2, [pc, #28]	; (8001278 <vcom_Init+0x28>)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 800125e:	f7ff fa6b 	bl	8000738 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001262:	f7ff fa1d 	bl	80006a0 <MX_USART2_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
 8001266:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 800126a:	f7ff ffdd 	bl	8001228 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 800126e:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000040 	.word	0x20000040

0800127c <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
 8001280:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001284:	f7ff ffac 	bl	80011e0 <LL_APB1_GRP1_ForceReset>
  __HAL_RCC_USART2_RELEASE_RESET();
 8001288:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800128c:	f7ff ffb9 	bl	8001202 <LL_APB1_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8001290:	4804      	ldr	r0, [pc, #16]	; (80012a4 <vcom_DeInit+0x28>)
 8001292:	f7ff fc21 	bl	8000ad8 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8001296:	200f      	movs	r0, #15
 8001298:	f000 fa7d 	bl	8001796 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 800129c:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800129e:	4618      	mov	r0, r3
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000804 	.word	0x20000804

080012a8 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	460b      	mov	r3, r1
 80012b2:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 80012b4:	887b      	ldrh	r3, [r7, #2]
 80012b6:	461a      	mov	r2, r3
 80012b8:	6879      	ldr	r1, [r7, #4]
 80012ba:	4804      	ldr	r0, [pc, #16]	; (80012cc <vcom_Trace_DMA+0x24>)
 80012bc:	f003 fd68 	bl	8004d90 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 80012c0:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	20000804 	.word	0x20000804

080012d0 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80012d8:	4a19      	ldr	r2, [pc, #100]	; (8001340 <vcom_ReceiveInit+0x70>)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80012de:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80012e2:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 80012e4:	f107 0308 	add.w	r3, r7, #8
 80012e8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80012ec:	4815      	ldr	r0, [pc, #84]	; (8001344 <vcom_ReceiveInit+0x74>)
 80012ee:	f005 fc16 	bl	8006b1e <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 80012f2:	bf00      	nop
 80012f4:	4b13      	ldr	r3, [pc, #76]	; (8001344 <vcom_ReceiveInit+0x74>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	69db      	ldr	r3, [r3, #28]
 80012fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001302:	d0f7      	beq.n	80012f4 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8001304:	bf00      	nop
 8001306:	4b0f      	ldr	r3, [pc, #60]	; (8001344 <vcom_ReceiveInit+0x74>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	69db      	ldr	r3, [r3, #28]
 800130c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001310:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001314:	d1f7      	bne.n	8001306 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8001316:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <vcom_ReceiveInit+0x74>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	689a      	ldr	r2, [r3, #8]
 800131c:	4b09      	ldr	r3, [pc, #36]	; (8001344 <vcom_ReceiveInit+0x74>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001324:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8001326:	4807      	ldr	r0, [pc, #28]	; (8001344 <vcom_ReceiveInit+0x74>)
 8001328:	f005 fc54 	bl	8006bd4 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 800132c:	2201      	movs	r2, #1
 800132e:	4906      	ldr	r1, [pc, #24]	; (8001348 <vcom_ReceiveInit+0x78>)
 8001330:	4804      	ldr	r0, [pc, #16]	; (8001344 <vcom_ReceiveInit+0x74>)
 8001332:	f003 fcd7 	bl	8004ce4 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 8001336:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8001338:	4618      	mov	r0, r3
 800133a:	3710      	adds	r7, #16
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000044 	.word	0x20000044
 8001344:	20000804 	.word	0x20000804
 8001348:	20000894 	.word	0x20000894

0800134c <vcom_Resume>:

void vcom_Resume(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001350:	4808      	ldr	r0, [pc, #32]	; (8001374 <vcom_Resume+0x28>)
 8001352:	f003 fc76 	bl	8004c42 <HAL_UART_Init>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <vcom_Resume+0x14>
  {
    Error_Handler();
 800135c:	f7ff fa40 	bl	80007e0 <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001360:	4805      	ldr	r0, [pc, #20]	; (8001378 <vcom_Resume+0x2c>)
 8001362:	f000 fa27 	bl	80017b4 <HAL_DMA_Init>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <vcom_Resume+0x24>
  {
    Error_Handler();
 800136c:	f7ff fa38 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}
 8001374:	20000804 	.word	0x20000804
 8001378:	2000076c 	.word	0x2000076c

0800137c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart2)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  TxCpltCallback(NULL);
 8001384:	4b03      	ldr	r3, [pc, #12]	; (8001394 <HAL_UART_TxCpltCallback+0x18>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	2000      	movs	r0, #0
 800138a:	4798      	blx	r3
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 800138c:	bf00      	nop
 800138e:	3708      	adds	r7, #8
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	20000040 	.word	0x20000040

08001398 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart2)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart2->ErrorCode))
 80013a0:	4b0b      	ldr	r3, [pc, #44]	; (80013d0 <HAL_UART_RxCpltCallback+0x38>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d00a      	beq.n	80013be <HAL_UART_RxCpltCallback+0x26>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d105      	bne.n	80013be <HAL_UART_RxCpltCallback+0x26>
  {
    RxCpltCallback(&charRx, 1, 0);
 80013b2:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <HAL_UART_RxCpltCallback+0x38>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2200      	movs	r2, #0
 80013b8:	2101      	movs	r1, #1
 80013ba:	4806      	ldr	r0, [pc, #24]	; (80013d4 <HAL_UART_RxCpltCallback+0x3c>)
 80013bc:	4798      	blx	r3
  }
  HAL_UART_Receive_IT(huart2, &charRx, 1);
 80013be:	2201      	movs	r2, #1
 80013c0:	4904      	ldr	r1, [pc, #16]	; (80013d4 <HAL_UART_RxCpltCallback+0x3c>)
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f003 fc8e 	bl	8004ce4 <HAL_UART_Receive_IT>
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000044 	.word	0x20000044
 80013d4:	20000894 	.word	0x20000894

080013d8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013d8:	480d      	ldr	r0, [pc, #52]	; (8001410 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013da:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80013dc:	f7ff fcd0 	bl	8000d80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013e0:	480c      	ldr	r0, [pc, #48]	; (8001414 <LoopForever+0x6>)
  ldr r1, =_edata
 80013e2:	490d      	ldr	r1, [pc, #52]	; (8001418 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013e4:	4a0d      	ldr	r2, [pc, #52]	; (800141c <LoopForever+0xe>)
  movs r3, #0
 80013e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013e8:	e002      	b.n	80013f0 <LoopCopyDataInit>

080013ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ee:	3304      	adds	r3, #4

080013f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013f4:	d3f9      	bcc.n	80013ea <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013f6:	4a0a      	ldr	r2, [pc, #40]	; (8001420 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013f8:	4c0a      	ldr	r4, [pc, #40]	; (8001424 <LoopForever+0x16>)
  movs r3, #0
 80013fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013fc:	e001      	b.n	8001402 <LoopFillZerobss>

080013fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001400:	3204      	adds	r2, #4

08001402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001404:	d3fb      	bcc.n	80013fe <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001406:	f00a fbb5 	bl	800bb74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800140a:	f7ff f87c 	bl	8000506 <main>

0800140e <LoopForever>:

LoopForever:
    b LoopForever
 800140e:	e7fe      	b.n	800140e <LoopForever>
  ldr   r0, =_estack
 8001410:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001418:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800141c:	0800c14c 	.word	0x0800c14c
  ldr r2, =_sbss
 8001420:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001424:	20000920 	.word	0x20000920

08001428 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001428:	e7fe      	b.n	8001428 <ADC_IRQHandler>
	...

0800142c <LL_DBGMCU_EnableDBGSleepMode>:
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_EnableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGSleepMode(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8001430:	4b04      	ldr	r3, [pc, #16]	; (8001444 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	4a03      	ldr	r2, [pc, #12]	; (8001444 <LL_DBGMCU_EnableDBGSleepMode+0x18>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	6053      	str	r3, [r2, #4]
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr
 8001444:	e0042000 	.word	0xe0042000

08001448 <LL_DBGMCU_DisableDBGSleepMode>:
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_DisableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGSleepMode(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800144c:	4b04      	ldr	r3, [pc, #16]	; (8001460 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	4a03      	ldr	r2, [pc, #12]	; (8001460 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8001452:	f023 0301 	bic.w	r3, r3, #1
 8001456:	6053      	str	r3, [r2, #4]
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	e0042000 	.word	0xe0042000

08001464 <LL_DBGMCU_EnableDBGStopMode>:
  *        in Stop mode even when this bit is enabled
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_EnableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStopMode(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8001468:	4b04      	ldr	r3, [pc, #16]	; (800147c <LL_DBGMCU_EnableDBGStopMode+0x18>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	4a03      	ldr	r2, [pc, #12]	; (800147c <LL_DBGMCU_EnableDBGStopMode+0x18>)
 800146e:	f043 0302 	orr.w	r3, r3, #2
 8001472:	6053      	str	r3, [r2, #4]
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	bc80      	pop	{r7}
 800147a:	4770      	bx	lr
 800147c:	e0042000 	.word	0xe0042000

08001480 <LL_DBGMCU_DisableDBGStopMode>:
  * @brief  Disable the Debug Module during STOP mode
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_DisableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStopMode(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8001484:	4b04      	ldr	r3, [pc, #16]	; (8001498 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	4a03      	ldr	r2, [pc, #12]	; (8001498 <LL_DBGMCU_DisableDBGStopMode+0x18>)
 800148a:	f023 0302 	bic.w	r3, r3, #2
 800148e:	6053      	str	r3, [r2, #4]
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	e0042000 	.word	0xe0042000

0800149c <LL_DBGMCU_EnableDBGStandbyMode>:
  *        in Standby mode even when this bit is enabled
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_EnableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_EnableDBGStandbyMode(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80014a0:	4b04      	ldr	r3, [pc, #16]	; (80014b4 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	4a03      	ldr	r2, [pc, #12]	; (80014b4 <LL_DBGMCU_EnableDBGStandbyMode+0x18>)
 80014a6:	f043 0304 	orr.w	r3, r3, #4
 80014aa:	6053      	str	r3, [r2, #4]
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bc80      	pop	{r7}
 80014b2:	4770      	bx	lr
 80014b4:	e0042000 	.word	0xe0042000

080014b8 <LL_DBGMCU_DisableDBGStandbyMode>:
  * @brief  Disable the Debug Module during STANDBY mode
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_DisableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStandbyMode(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 80014bc:	4b04      	ldr	r3, [pc, #16]	; (80014d0 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	4a03      	ldr	r2, [pc, #12]	; (80014d0 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 80014c2:	f023 0304 	bic.w	r3, r3, #4
 80014c6:	6053      	str	r3, [r2, #4]
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr
 80014d0:	e0042000 	.word	0xe0042000

080014d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014da:	2300      	movs	r3, #0
 80014dc:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014de:	2003      	movs	r0, #3
 80014e0:	f000 f926 	bl	8001730 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80014e4:	f002 f858 	bl	8003598 <HAL_RCC_GetHCLKFreq>
 80014e8:	4603      	mov	r3, r0
 80014ea:	4a09      	ldr	r2, [pc, #36]	; (8001510 <HAL_Init+0x3c>)
 80014ec:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014ee:	200f      	movs	r0, #15
 80014f0:	f7ff fbea 	bl	8000cc8 <HAL_InitTick>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d002      	beq.n	8001500 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	71fb      	strb	r3, [r7, #7]
 80014fe:	e001      	b.n	8001504 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001500:	f7ff fa19 	bl	8000936 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001504:	79fb      	ldrb	r3, [r7, #7]
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20000000 	.word	0x20000000

08001514 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001518:	4b04      	ldr	r3, [pc, #16]	; (800152c <HAL_SuspendTick+0x18>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a03      	ldr	r2, [pc, #12]	; (800152c <HAL_SuspendTick+0x18>)
 800151e:	f023 0302 	bic.w	r3, r3, #2
 8001522:	6013      	str	r3, [r2, #0]
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr
 800152c:	e000e010 	.word	0xe000e010

08001530 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001534:	4b04      	ldr	r3, [pc, #16]	; (8001548 <HAL_ResumeTick+0x18>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a03      	ldr	r2, [pc, #12]	; (8001548 <HAL_ResumeTick+0x18>)
 800153a:	f043 0302 	orr.w	r3, r3, #2
 800153e:	6013      	str	r3, [r2, #0]
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	e000e010 	.word	0xe000e010

0800154c <HAL_DBGMCU_EnableDBGSleepMode>:
/**
  * @brief  Enable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_EnableDBGSleepMode(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGSleepMode();
 8001550:	f7ff ff6c 	bl	800142c <LL_DBGMCU_EnableDBGSleepMode>
}
 8001554:	bf00      	nop
 8001556:	bd80      	pop	{r7, pc}

08001558 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 800155c:	f7ff ff74 	bl	8001448 <LL_DBGMCU_DisableDBGSleepMode>
}
 8001560:	bf00      	nop
 8001562:	bd80      	pop	{r7, pc}

08001564 <HAL_DBGMCU_EnableDBGStopMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Stop mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStopMode();
 8001568:	f7ff ff7c 	bl	8001464 <LL_DBGMCU_EnableDBGStopMode>
}
 800156c:	bf00      	nop
 800156e:	bd80      	pop	{r7, pc}

08001570 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8001574:	f7ff ff84 	bl	8001480 <LL_DBGMCU_DisableDBGStopMode>
}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}

0800157c <HAL_DBGMCU_EnableDBGStandbyMode>:
  * @note  This functionality does not influence CPU2 operation, CPU2 cannot be debugged
  *        in Standby mode even when this bit is enabled
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  LL_DBGMCU_EnableDBGStandbyMode();
 8001580:	f7ff ff8c 	bl	800149c <LL_DBGMCU_EnableDBGStandbyMode>
}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}

08001588 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 800158c:	f7ff ff94 	bl	80014b8 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8001590:	bf00      	nop
 8001592:	bd80      	pop	{r7, pc}

08001594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <__NVIC_SetPriorityGrouping+0x44>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015b0:	4013      	ands	r3, r2
 80015b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015c6:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <__NVIC_SetPriorityGrouping+0x44>)
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	60d3      	str	r3, [r2, #12]
}
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e0:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <__NVIC_GetPriorityGrouping+0x18>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	0a1b      	lsrs	r3, r3, #8
 80015e6:	f003 0307 	and.w	r3, r3, #7
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001606:	2b00      	cmp	r3, #0
 8001608:	db0b      	blt.n	8001622 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	f003 021f 	and.w	r2, r3, #31
 8001610:	4906      	ldr	r1, [pc, #24]	; (800162c <__NVIC_EnableIRQ+0x34>)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	095b      	lsrs	r3, r3, #5
 8001618:	2001      	movs	r0, #1
 800161a:	fa00 f202 	lsl.w	r2, r0, r2
 800161e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr
 800162c:	e000e100 	.word	0xe000e100

08001630 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	2b00      	cmp	r3, #0
 8001640:	db12      	blt.n	8001668 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001642:	79fb      	ldrb	r3, [r7, #7]
 8001644:	f003 021f 	and.w	r2, r3, #31
 8001648:	490a      	ldr	r1, [pc, #40]	; (8001674 <__NVIC_DisableIRQ+0x44>)
 800164a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164e:	095b      	lsrs	r3, r3, #5
 8001650:	2001      	movs	r0, #1
 8001652:	fa00 f202 	lsl.w	r2, r0, r2
 8001656:	3320      	adds	r3, #32
 8001658:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800165c:	f3bf 8f4f 	dsb	sy
}
 8001660:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001662:	f3bf 8f6f 	isb	sy
}
 8001666:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	e000e100 	.word	0xe000e100

08001678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	6039      	str	r1, [r7, #0]
 8001682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001688:	2b00      	cmp	r3, #0
 800168a:	db0a      	blt.n	80016a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	b2da      	uxtb	r2, r3
 8001690:	490c      	ldr	r1, [pc, #48]	; (80016c4 <__NVIC_SetPriority+0x4c>)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	0112      	lsls	r2, r2, #4
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	440b      	add	r3, r1
 800169c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a0:	e00a      	b.n	80016b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4908      	ldr	r1, [pc, #32]	; (80016c8 <__NVIC_SetPriority+0x50>)
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	3b04      	subs	r3, #4
 80016b0:	0112      	lsls	r2, r2, #4
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	440b      	add	r3, r1
 80016b6:	761a      	strb	r2, [r3, #24]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000e100 	.word	0xe000e100
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b089      	sub	sp, #36	; 0x24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f1c3 0307 	rsb	r3, r3, #7
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	bf28      	it	cs
 80016ea:	2304      	movcs	r3, #4
 80016ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3304      	adds	r3, #4
 80016f2:	2b06      	cmp	r3, #6
 80016f4:	d902      	bls.n	80016fc <NVIC_EncodePriority+0x30>
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3b03      	subs	r3, #3
 80016fa:	e000      	b.n	80016fe <NVIC_EncodePriority+0x32>
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001700:	f04f 32ff 	mov.w	r2, #4294967295
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43da      	mvns	r2, r3
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	401a      	ands	r2, r3
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001714:	f04f 31ff 	mov.w	r1, #4294967295
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	fa01 f303 	lsl.w	r3, r1, r3
 800171e:	43d9      	mvns	r1, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001724:	4313      	orrs	r3, r2
         );
}
 8001726:	4618      	mov	r0, r3
 8001728:	3724      	adds	r7, #36	; 0x24
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ff2b 	bl	8001594 <__NVIC_SetPriorityGrouping>
}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b086      	sub	sp, #24
 800174a:	af00      	add	r7, sp, #0
 800174c:	4603      	mov	r3, r0
 800174e:	60b9      	str	r1, [r7, #8]
 8001750:	607a      	str	r2, [r7, #4]
 8001752:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001754:	f7ff ff42 	bl	80015dc <__NVIC_GetPriorityGrouping>
 8001758:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	68b9      	ldr	r1, [r7, #8]
 800175e:	6978      	ldr	r0, [r7, #20]
 8001760:	f7ff ffb4 	bl	80016cc <NVIC_EncodePriority>
 8001764:	4602      	mov	r2, r0
 8001766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800176a:	4611      	mov	r1, r2
 800176c:	4618      	mov	r0, r3
 800176e:	f7ff ff83 	bl	8001678 <__NVIC_SetPriority>
}
 8001772:	bf00      	nop
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	4603      	mov	r3, r0
 8001782:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001788:	4618      	mov	r0, r3
 800178a:	f7ff ff35 	bl	80015f8 <__NVIC_EnableIRQ>
}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}

08001796 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	b082      	sub	sp, #8
 800179a:	af00      	add	r7, sp, #0
 800179c:	4603      	mov	r3, r0
 800179e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80017a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff ff43 	bl	8001630 <__NVIC_DisableIRQ>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
	...

080017b4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e08e      	b.n	80018e4 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	461a      	mov	r2, r3
 80017cc:	4b47      	ldr	r3, [pc, #284]	; (80018ec <HAL_DMA_Init+0x138>)
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d80f      	bhi.n	80017f2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	461a      	mov	r2, r3
 80017d8:	4b45      	ldr	r3, [pc, #276]	; (80018f0 <HAL_DMA_Init+0x13c>)
 80017da:	4413      	add	r3, r2
 80017dc:	4a45      	ldr	r2, [pc, #276]	; (80018f4 <HAL_DMA_Init+0x140>)
 80017de:	fba2 2303 	umull	r2, r3, r2, r3
 80017e2:	091b      	lsrs	r3, r3, #4
 80017e4:	009a      	lsls	r2, r3, #2
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a42      	ldr	r2, [pc, #264]	; (80018f8 <HAL_DMA_Init+0x144>)
 80017ee:	641a      	str	r2, [r3, #64]	; 0x40
 80017f0:	e00e      	b.n	8001810 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	461a      	mov	r2, r3
 80017f8:	4b40      	ldr	r3, [pc, #256]	; (80018fc <HAL_DMA_Init+0x148>)
 80017fa:	4413      	add	r3, r2
 80017fc:	4a3d      	ldr	r2, [pc, #244]	; (80018f4 <HAL_DMA_Init+0x140>)
 80017fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001802:	091b      	lsrs	r3, r3, #4
 8001804:	009a      	lsls	r2, r3, #2
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a3c      	ldr	r2, [pc, #240]	; (8001900 <HAL_DMA_Init+0x14c>)
 800180e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2202      	movs	r2, #2
 8001814:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	6812      	ldr	r2, [r2, #0]
 8001822:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001826:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800182a:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6819      	ldr	r1, [r3, #0]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689a      	ldr	r2, [r3, #8]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68db      	ldr	r3, [r3, #12]
 800183a:	431a      	orrs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	431a      	orrs	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	431a      	orrs	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	431a      	orrs	r2, r3
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	431a      	orrs	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a1b      	ldr	r3, [r3, #32]
 8001858:	431a      	orrs	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	430a      	orrs	r2, r1
 8001860:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 fb24 	bl	8001eb0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001870:	d102      	bne.n	8001878 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685a      	ldr	r2, [r3, #4]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001880:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001884:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800188e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d010      	beq.n	80018ba <HAL_DMA_Init+0x106>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b04      	cmp	r3, #4
 800189e:	d80c      	bhi.n	80018ba <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 fb4d 	bl	8001f40 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018aa:	2200      	movs	r2, #0
 80018ac:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80018b6:	605a      	str	r2, [r3, #4]
 80018b8:	e008      	b.n	80018cc <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2200      	movs	r2, #0
 80018c4:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2201      	movs	r2, #1
 80018d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80018e2:	2300      	movs	r3, #0
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3708      	adds	r7, #8
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40020407 	.word	0x40020407
 80018f0:	bffdfff8 	.word	0xbffdfff8
 80018f4:	cccccccd 	.word	0xcccccccd
 80018f8:	40020000 	.word	0x40020000
 80018fc:	bffdfbf8 	.word	0xbffdfbf8
 8001900:	40020400 	.word	0x40020400

08001904 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e07b      	b.n	8001a0e <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 0201 	bic.w	r2, r2, #1
 8001924:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	461a      	mov	r2, r3
 800192c:	4b3a      	ldr	r3, [pc, #232]	; (8001a18 <HAL_DMA_DeInit+0x114>)
 800192e:	429a      	cmp	r2, r3
 8001930:	d80f      	bhi.n	8001952 <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	461a      	mov	r2, r3
 8001938:	4b38      	ldr	r3, [pc, #224]	; (8001a1c <HAL_DMA_DeInit+0x118>)
 800193a:	4413      	add	r3, r2
 800193c:	4a38      	ldr	r2, [pc, #224]	; (8001a20 <HAL_DMA_DeInit+0x11c>)
 800193e:	fba2 2303 	umull	r2, r3, r2, r3
 8001942:	091b      	lsrs	r3, r3, #4
 8001944:	009a      	lsls	r2, r3, #2
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a35      	ldr	r2, [pc, #212]	; (8001a24 <HAL_DMA_DeInit+0x120>)
 800194e:	641a      	str	r2, [r3, #64]	; 0x40
 8001950:	e00e      	b.n	8001970 <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	461a      	mov	r2, r3
 8001958:	4b33      	ldr	r3, [pc, #204]	; (8001a28 <HAL_DMA_DeInit+0x124>)
 800195a:	4413      	add	r3, r2
 800195c:	4a30      	ldr	r2, [pc, #192]	; (8001a20 <HAL_DMA_DeInit+0x11c>)
 800195e:	fba2 2303 	umull	r2, r3, r2, r3
 8001962:	091b      	lsrs	r3, r3, #4
 8001964:	009a      	lsls	r2, r3, #2
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a2f      	ldr	r2, [pc, #188]	; (8001a2c <HAL_DMA_DeInit+0x128>)
 800196e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197c:	f003 021c 	and.w	r2, r3, #28
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001984:	2101      	movs	r1, #1
 8001986:	fa01 f202 	lsl.w	r2, r1, r2
 800198a:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f000 fa8f 	bl	8001eb0 <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800199e:	687a      	ldr	r2, [r7, #4]
 80019a0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80019a2:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d00f      	beq.n	80019cc <HAL_DMA_DeInit+0xc8>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	d80b      	bhi.n	80019cc <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80019b4:	6878      	ldr	r0, [r7, #4]
 80019b6:	f000 fac3 	bl	8001f40 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80019ca:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2200      	movs	r2, #0
 80019d0:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2200      	movs	r2, #0
 80019d6:	659a      	str	r2, [r3, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	635a      	str	r2, [r3, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2200      	movs	r2, #0
 8001a00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40020407 	.word	0x40020407
 8001a1c:	bffdfff8 	.word	0xbffdfff8
 8001a20:	cccccccd 	.word	0xcccccccd
 8001a24:	40020000 	.word	0x40020000
 8001a28:	bffdfbf8 	.word	0xbffdfbf8
 8001a2c:	40020400 	.word	0x40020400

08001a30 <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	60f8      	str	r0, [r7, #12]
 8001a38:	60b9      	str	r1, [r7, #8]
 8001a3a:	607a      	str	r2, [r7, #4]
 8001a3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d101      	bne.n	8001a50 <HAL_DMA_Start_IT+0x20>
 8001a4c:	2302      	movs	r3, #2
 8001a4e:	e069      	b.n	8001b24 <HAL_DMA_Start_IT+0xf4>
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2201      	movs	r2, #1
 8001a54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d155      	bne.n	8001b10 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2202      	movs	r2, #2
 8001a68:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 0201 	bic.w	r2, r2, #1
 8001a80:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	68b9      	ldr	r1, [r7, #8]
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f000 f9d3 	bl	8001e34 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d008      	beq.n	8001aa8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f042 020e 	orr.w	r2, r2, #14
 8001aa4:	601a      	str	r2, [r3, #0]
 8001aa6:	e00f      	b.n	8001ac8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 0204 	bic.w	r2, r2, #4
 8001ab6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f042 020a 	orr.w	r2, r2, #10
 8001ac6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d007      	beq.n	8001ae6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ae0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ae4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d007      	beq.n	8001afe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001afc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f042 0201 	orr.w	r2, r2, #1
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	e008      	b.n	8001b22 <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2280      	movs	r2, #128	; 0x80
 8001b14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Return error status */
    status = HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}

08001b2c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d101      	bne.n	8001b3e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e04f      	b.n	8001bde <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d008      	beq.n	8001b5c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2204      	movs	r2, #4
 8001b4e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e040      	b.n	8001bde <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 020e 	bic.w	r2, r2, #14
 8001b6a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b7a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	681a      	ldr	r2, [r3, #0]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f022 0201 	bic.w	r2, r2, #1
 8001b8a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b90:	f003 021c 	and.w	r2, r3, #28
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b98:	2101      	movs	r1, #1
 8001b9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b9e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ba8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d00c      	beq.n	8001bcc <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bc0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001bca:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bc80      	pop	{r7}
 8001be6:	4770      	bx	lr

08001be8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	2b02      	cmp	r3, #2
 8001bfe:	d005      	beq.n	8001c0c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2204      	movs	r2, #4
 8001c04:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	73fb      	strb	r3, [r7, #15]
 8001c0a:	e047      	b.n	8001c9c <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f022 020e 	bic.w	r2, r2, #14
 8001c1a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 0201 	bic.w	r2, r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c36:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c40:	f003 021c 	and.w	r2, r3, #28
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	2101      	movs	r1, #1
 8001c4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001c4e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c58:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d00c      	beq.n	8001c7c <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c70:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001c7a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2200      	movs	r2, #0
 8001c88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d003      	beq.n	8001c9c <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	4798      	blx	r3
    }
  }
  return status;
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
	...

08001ca8 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cc4:	f003 031c 	and.w	r3, r3, #28
 8001cc8:	2204      	movs	r2, #4
 8001cca:	409a      	lsls	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d027      	beq.n	8001d24 <HAL_DMA_IRQHandler+0x7c>
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	f003 0304 	and.w	r3, r3, #4
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d022      	beq.n	8001d24 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0320 	and.w	r3, r3, #32
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d107      	bne.n	8001cfc <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f022 0204 	bic.w	r2, r2, #4
 8001cfa:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d00:	f003 021c 	and.w	r2, r3, #28
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d08:	2104      	movs	r1, #4
 8001d0a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d0e:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f000 8081 	beq.w	8001e1c <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8001d22:	e07b      	b.n	8001e1c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d28:	f003 031c 	and.w	r3, r3, #28
 8001d2c:	2202      	movs	r2, #2
 8001d2e:	409a      	lsls	r2, r3
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	4013      	ands	r3, r2
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d03d      	beq.n	8001db4 <HAL_DMA_IRQHandler+0x10c>
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d038      	beq.n	8001db4 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0320 	and.w	r3, r3, #32
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d10b      	bne.n	8001d68 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f022 020a 	bic.w	r2, r2, #10
 8001d5e:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	4b2e      	ldr	r3, [pc, #184]	; (8001e28 <HAL_DMA_IRQHandler+0x180>)
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d909      	bls.n	8001d88 <HAL_DMA_IRQHandler+0xe0>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d78:	f003 031c 	and.w	r3, r3, #28
 8001d7c:	4a2b      	ldr	r2, [pc, #172]	; (8001e2c <HAL_DMA_IRQHandler+0x184>)
 8001d7e:	2102      	movs	r1, #2
 8001d80:	fa01 f303 	lsl.w	r3, r1, r3
 8001d84:	6053      	str	r3, [r2, #4]
 8001d86:	e008      	b.n	8001d9a <HAL_DMA_IRQHandler+0xf2>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8c:	f003 031c 	and.w	r3, r3, #28
 8001d90:	4a27      	ldr	r2, [pc, #156]	; (8001e30 <HAL_DMA_IRQHandler+0x188>)
 8001d92:	2102      	movs	r1, #2
 8001d94:	fa01 f303 	lsl.w	r3, r1, r3
 8001d98:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if (hdma->XferCpltCallback != NULL)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d038      	beq.n	8001e1c <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8001db2:	e033      	b.n	8001e1c <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db8:	f003 031c 	and.w	r3, r3, #28
 8001dbc:	2208      	movs	r2, #8
 8001dbe:	409a      	lsls	r2, r3
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d02a      	beq.n	8001e1e <HAL_DMA_IRQHandler+0x176>
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	f003 0308 	and.w	r3, r3, #8
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d025      	beq.n	8001e1e <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 020e 	bic.w	r2, r2, #14
 8001de0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	f003 021c 	and.w	r2, r3, #28
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	2101      	movs	r1, #1
 8001df0:	fa01 f202 	lsl.w	r2, r1, r2
 8001df4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d004      	beq.n	8001e1e <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001e1c:	bf00      	nop
 8001e1e:	bf00      	nop
}
 8001e20:	3710      	adds	r7, #16
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40020080 	.word	0x40020080
 8001e2c:	40020400 	.word	0x40020400
 8001e30:	40020000 	.word	0x40020000

08001e34 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
 8001e40:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e46:	68fa      	ldr	r2, [r7, #12]
 8001e48:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001e4a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d004      	beq.n	8001e5e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001e5c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	f003 021c 	and.w	r2, r3, #28
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001e70:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	2b10      	cmp	r3, #16
 8001e80:	d108      	bne.n	8001e94 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001e92:	e007      	b.n	8001ea4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68ba      	ldr	r2, [r7, #8]
 8001e9a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	60da      	str	r2, [r3, #12]
}
 8001ea4:	bf00      	nop
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr
	...

08001eb0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	4b1c      	ldr	r3, [pc, #112]	; (8001f30 <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d813      	bhi.n	8001eec <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec8:	089b      	lsrs	r3, r3, #2
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001ed0:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	3b08      	subs	r3, #8
 8001ee0:	4a14      	ldr	r2, [pc, #80]	; (8001f34 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8001ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee6:	091b      	lsrs	r3, r3, #4
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	e011      	b.n	8001f10 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef0:	089b      	lsrs	r3, r3, #2
 8001ef2:	009a      	lsls	r2, r3, #2
 8001ef4:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8001ef6:	4413      	add	r3, r2
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	6493      	str	r3, [r2, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	3b08      	subs	r3, #8
 8001f04:	4a0b      	ldr	r2, [pc, #44]	; (8001f34 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 8001f06:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0a:	091b      	lsrs	r3, r3, #4
 8001f0c:	3307      	adds	r3, #7
 8001f0e:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a0a      	ldr	r2, [pc, #40]	; (8001f3c <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 8001f14:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f003 031f 	and.w	r3, r3, #31
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	409a      	lsls	r2, r3
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001f24:	bf00      	nop
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	40020407 	.word	0x40020407
 8001f34:	cccccccd 	.word	0xcccccccd
 8001f38:	4002081c 	.word	0x4002081c
 8001f3c:	40020880 	.word	0x40020880

08001f40 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f50:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	4b0a      	ldr	r3, [pc, #40]	; (8001f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001f56:	4413      	add	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	4a08      	ldr	r2, [pc, #32]	; (8001f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001f64:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	3b01      	subs	r3, #1
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	2201      	movs	r2, #1
 8001f70:	409a      	lsls	r2, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001f76:	bf00      	nop
 8001f78:	3714      	adds	r7, #20
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr
 8001f80:	1000823f 	.word	0x1000823f
 8001f84:	40020940 	.word	0x40020940

08001f88 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b087      	sub	sp, #28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f92:	2300      	movs	r3, #0
 8001f94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f96:	e140      	b.n	800221a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 8132 	beq.w	8002214 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f003 0303 	and.w	r3, r3, #3
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d005      	beq.n	8001fc8 <HAL_GPIO_Init+0x40>
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 0303 	and.w	r3, r3, #3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d130      	bne.n	800202a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	005b      	lsls	r3, r3, #1
 8001fd2:	2203      	movs	r2, #3
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	68da      	ldr	r2, [r3, #12]
 8001fe4:	697b      	ldr	r3, [r7, #20]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	693a      	ldr	r2, [r7, #16]
 8001ff6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ffe:	2201      	movs	r2, #1
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	43db      	mvns	r3, r3
 8002008:	693a      	ldr	r2, [r7, #16]
 800200a:	4013      	ands	r3, r2
 800200c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	091b      	lsrs	r3, r3, #4
 8002014:	f003 0201 	and.w	r2, r3, #1
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	693a      	ldr	r2, [r7, #16]
 8002020:	4313      	orrs	r3, r2
 8002022:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	2b03      	cmp	r3, #3
 8002034:	d017      	beq.n	8002066 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	005b      	lsls	r3, r3, #1
 8002040:	2203      	movs	r2, #3
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	4013      	ands	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	689a      	ldr	r2, [r3, #8]
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	4313      	orrs	r3, r2
 800205e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d123      	bne.n	80020ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	08da      	lsrs	r2, r3, #3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	3208      	adds	r2, #8
 800207a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800207e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	220f      	movs	r2, #15
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43db      	mvns	r3, r3
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	4013      	ands	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	691a      	ldr	r2, [r3, #16]
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	f003 0307 	and.w	r3, r3, #7
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	693a      	ldr	r2, [r7, #16]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	08da      	lsrs	r2, r3, #3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3208      	adds	r2, #8
 80020b4:	6939      	ldr	r1, [r7, #16]
 80020b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	2203      	movs	r2, #3
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43db      	mvns	r3, r3
 80020cc:	693a      	ldr	r2, [r7, #16]
 80020ce:	4013      	ands	r3, r2
 80020d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 0203 	and.w	r2, r3, #3
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	693a      	ldr	r2, [r7, #16]
 80020e4:	4313      	orrs	r3, r2
 80020e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 808c 	beq.w	8002214 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 80020fc:	4a4e      	ldr	r2, [pc, #312]	; (8002238 <HAL_GPIO_Init+0x2b0>)
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	089b      	lsrs	r3, r3, #2
 8002102:	3302      	adds	r3, #2
 8002104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002108:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	2207      	movs	r2, #7
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	43db      	mvns	r3, r3
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002126:	d00d      	beq.n	8002144 <HAL_GPIO_Init+0x1bc>
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a44      	ldr	r2, [pc, #272]	; (800223c <HAL_GPIO_Init+0x2b4>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d007      	beq.n	8002140 <HAL_GPIO_Init+0x1b8>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a43      	ldr	r2, [pc, #268]	; (8002240 <HAL_GPIO_Init+0x2b8>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d101      	bne.n	800213c <HAL_GPIO_Init+0x1b4>
 8002138:	2302      	movs	r3, #2
 800213a:	e004      	b.n	8002146 <HAL_GPIO_Init+0x1be>
 800213c:	2307      	movs	r3, #7
 800213e:	e002      	b.n	8002146 <HAL_GPIO_Init+0x1be>
 8002140:	2301      	movs	r3, #1
 8002142:	e000      	b.n	8002146 <HAL_GPIO_Init+0x1be>
 8002144:	2300      	movs	r3, #0
 8002146:	697a      	ldr	r2, [r7, #20]
 8002148:	f002 0203 	and.w	r2, r2, #3
 800214c:	0092      	lsls	r2, r2, #2
 800214e:	4093      	lsls	r3, r2
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	4313      	orrs	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002156:	4938      	ldr	r1, [pc, #224]	; (8002238 <HAL_GPIO_Init+0x2b0>)
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	089b      	lsrs	r3, r3, #2
 800215c:	3302      	adds	r3, #2
 800215e:	693a      	ldr	r2, [r7, #16]
 8002160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002164:	4b37      	ldr	r3, [pc, #220]	; (8002244 <HAL_GPIO_Init+0x2bc>)
 8002166:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800216a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	43db      	mvns	r3, r3
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	4013      	ands	r3, r2
 8002174:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d003      	beq.n	800218a <HAL_GPIO_Init+0x202>
        {
          temp |= iocurrent;
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4313      	orrs	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800218a:	4a2e      	ldr	r2, [pc, #184]	; (8002244 <HAL_GPIO_Init+0x2bc>)
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002192:	4b2c      	ldr	r3, [pc, #176]	; (8002244 <HAL_GPIO_Init+0x2bc>)
 8002194:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002198:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	43db      	mvns	r3, r3
 800219e:	693a      	ldr	r2, [r7, #16]
 80021a0:	4013      	ands	r3, r2
 80021a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80021b0:	693a      	ldr	r2, [r7, #16]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 80021b8:	4a22      	ldr	r2, [pc, #136]	; (8002244 <HAL_GPIO_Init+0x2bc>)
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021c0:	4b20      	ldr	r3, [pc, #128]	; (8002244 <HAL_GPIO_Init+0x2bc>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	43db      	mvns	r3, r3
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4013      	ands	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 80021dc:	693a      	ldr	r2, [r7, #16]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80021e4:	4a17      	ldr	r2, [pc, #92]	; (8002244 <HAL_GPIO_Init+0x2bc>)
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80021ea:	4b16      	ldr	r3, [pc, #88]	; (8002244 <HAL_GPIO_Init+0x2bc>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	43db      	mvns	r3, r3
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4013      	ands	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d003      	beq.n	800220e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002206:	693a      	ldr	r2, [r7, #16]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	4313      	orrs	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800220e:	4a0d      	ldr	r2, [pc, #52]	; (8002244 <HAL_GPIO_Init+0x2bc>)
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	3301      	adds	r3, #1
 8002218:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	fa22 f303 	lsr.w	r3, r2, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	f47f aeb7 	bne.w	8001f98 <HAL_GPIO_Init+0x10>
  }
}
 800222a:	bf00      	nop
 800222c:	bf00      	nop
 800222e:	371c      	adds	r7, #28
 8002230:	46bd      	mov	sp, r7
 8002232:	bc80      	pop	{r7}
 8002234:	4770      	bx	lr
 8002236:	bf00      	nop
 8002238:	40010000 	.word	0x40010000
 800223c:	48000400 	.word	0x48000400
 8002240:	48000800 	.word	0x48000800
 8002244:	58000800 	.word	0x58000800

08002248 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002248:	b480      	push	{r7}
 800224a:	b087      	sub	sp, #28
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002256:	e0af      	b.n	80023b8 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002258:	2201      	movs	r2, #1
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	4013      	ands	r3, r2
 8002264:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 80a2 	beq.w	80023b2 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800226e:	4a59      	ldr	r2, [pc, #356]	; (80023d4 <HAL_GPIO_DeInit+0x18c>)
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	089b      	lsrs	r3, r3, #2
 8002274:	3302      	adds	r3, #2
 8002276:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227a:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	f003 0303 	and.w	r3, r3, #3
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	2207      	movs	r2, #7
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	4013      	ands	r3, r2
 800228e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002296:	d00d      	beq.n	80022b4 <HAL_GPIO_DeInit+0x6c>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	4a4f      	ldr	r2, [pc, #316]	; (80023d8 <HAL_GPIO_DeInit+0x190>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d007      	beq.n	80022b0 <HAL_GPIO_DeInit+0x68>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	4a4e      	ldr	r2, [pc, #312]	; (80023dc <HAL_GPIO_DeInit+0x194>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d101      	bne.n	80022ac <HAL_GPIO_DeInit+0x64>
 80022a8:	2302      	movs	r3, #2
 80022aa:	e004      	b.n	80022b6 <HAL_GPIO_DeInit+0x6e>
 80022ac:	2307      	movs	r3, #7
 80022ae:	e002      	b.n	80022b6 <HAL_GPIO_DeInit+0x6e>
 80022b0:	2301      	movs	r3, #1
 80022b2:	e000      	b.n	80022b6 <HAL_GPIO_DeInit+0x6e>
 80022b4:	2300      	movs	r3, #0
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	f002 0203 	and.w	r2, r2, #3
 80022bc:	0092      	lsls	r2, r2, #2
 80022be:	4093      	lsls	r3, r2
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d136      	bne.n	8002334 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 80022c6:	4b46      	ldr	r3, [pc, #280]	; (80023e0 <HAL_GPIO_DeInit+0x198>)
 80022c8:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	43db      	mvns	r3, r3
 80022d0:	4943      	ldr	r1, [pc, #268]	; (80023e0 <HAL_GPIO_DeInit+0x198>)
 80022d2:	4013      	ands	r3, r2
 80022d4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 80022d8:	4b41      	ldr	r3, [pc, #260]	; (80023e0 <HAL_GPIO_DeInit+0x198>)
 80022da:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	43db      	mvns	r3, r3
 80022e2:	493f      	ldr	r1, [pc, #252]	; (80023e0 <HAL_GPIO_DeInit+0x198>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 80022ea:	4b3d      	ldr	r3, [pc, #244]	; (80023e0 <HAL_GPIO_DeInit+0x198>)
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	43db      	mvns	r3, r3
 80022f2:	493b      	ldr	r1, [pc, #236]	; (80023e0 <HAL_GPIO_DeInit+0x198>)
 80022f4:	4013      	ands	r3, r2
 80022f6:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 80022f8:	4b39      	ldr	r3, [pc, #228]	; (80023e0 <HAL_GPIO_DeInit+0x198>)
 80022fa:	685a      	ldr	r2, [r3, #4]
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	43db      	mvns	r3, r3
 8002300:	4937      	ldr	r1, [pc, #220]	; (80023e0 <HAL_GPIO_DeInit+0x198>)
 8002302:	4013      	ands	r3, r2
 8002304:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	f003 0303 	and.w	r3, r3, #3
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	2207      	movs	r2, #7
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002316:	4a2f      	ldr	r2, [pc, #188]	; (80023d4 <HAL_GPIO_DeInit+0x18c>)
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	089b      	lsrs	r3, r3, #2
 800231c:	3302      	adds	r3, #2
 800231e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	43da      	mvns	r2, r3
 8002326:	482b      	ldr	r0, [pc, #172]	; (80023d4 <HAL_GPIO_DeInit+0x18c>)
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	089b      	lsrs	r3, r3, #2
 800232c:	400a      	ands	r2, r1
 800232e:	3302      	adds	r3, #2
 8002330:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	2103      	movs	r1, #3
 800233e:	fa01 f303 	lsl.w	r3, r1, r3
 8002342:	431a      	orrs	r2, r3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	08da      	lsrs	r2, r3, #3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3208      	adds	r2, #8
 8002350:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	220f      	movs	r2, #15
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43db      	mvns	r3, r3
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	08d2      	lsrs	r2, r2, #3
 8002368:	4019      	ands	r1, r3
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3208      	adds	r2, #8
 800236e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689a      	ldr	r2, [r3, #8]
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	2103      	movs	r1, #3
 800237c:	fa01 f303 	lsl.w	r3, r1, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	401a      	ands	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	2101      	movs	r1, #1
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	fa01 f303 	lsl.w	r3, r1, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	401a      	ands	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	68da      	ldr	r2, [r3, #12]
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	2103      	movs	r1, #3
 80023a6:	fa01 f303 	lsl.w	r3, r1, r3
 80023aa:	43db      	mvns	r3, r3
 80023ac:	401a      	ands	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	60da      	str	r2, [r3, #12]
    }

    position++;
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	3301      	adds	r3, #1
 80023b6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80023b8:	683a      	ldr	r2, [r7, #0]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	fa22 f303 	lsr.w	r3, r2, r3
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f47f af49 	bne.w	8002258 <HAL_GPIO_DeInit+0x10>
  }
}
 80023c6:	bf00      	nop
 80023c8:	bf00      	nop
 80023ca:	371c      	adds	r7, #28
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40010000 	.word	0x40010000
 80023d8:	48000400 	.word	0x48000400
 80023dc:	48000800 	.word	0x48000800
 80023e0:	58000800 	.word	0x58000800

080023e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	807b      	strh	r3, [r7, #2]
 80023f0:	4613      	mov	r3, r2
 80023f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023f4:	787b      	ldrb	r3, [r7, #1]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023fa:	887a      	ldrh	r2, [r7, #2]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002400:	e002      	b.n	8002408 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002402:	887a      	ldrh	r2, [r7, #2]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	bc80      	pop	{r7}
 8002410:	4770      	bx	lr

08002412 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002412:	b480      	push	{r7}
 8002414:	b085      	sub	sp, #20
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
 800241a:	460b      	mov	r3, r1
 800241c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
 8002422:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002424:	887a      	ldrh	r2, [r7, #2]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4013      	ands	r3, r2
 800242a:	041a      	lsls	r2, r3, #16
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	43d9      	mvns	r1, r3
 8002430:	887b      	ldrh	r3, [r7, #2]
 8002432:	400b      	ands	r3, r1
 8002434:	431a      	orrs	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	619a      	str	r2, [r3, #24]
}
 800243a:	bf00      	nop
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	bc80      	pop	{r7}
 8002442:	4770      	bx	lr

08002444 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002448:	4b04      	ldr	r3, [pc, #16]	; (800245c <HAL_PWR_EnableBkUpAccess+0x18>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a03      	ldr	r2, [pc, #12]	; (800245c <HAL_PWR_EnableBkUpAccess+0x18>)
 800244e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002452:	6013      	str	r3, [r2, #0]
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr
 800245c:	58000400 	.word	0x58000400

08002460 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d10c      	bne.n	800248c <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8002472:	4b13      	ldr	r3, [pc, #76]	; (80024c0 <HAL_PWR_EnterSLEEPMode+0x60>)
 8002474:	695b      	ldr	r3, [r3, #20]
 8002476:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800247a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800247e:	d10d      	bne.n	800249c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8002480:	f000 f83c 	bl	80024fc <HAL_PWREx_DisableLowPowerRunMode>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d008      	beq.n	800249c <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 800248a:	e015      	b.n	80024b8 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 800248c:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <HAL_PWR_EnterSLEEPMode+0x60>)
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8002498:	f000 f822 	bl	80024e0 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800249c:	4b09      	ldr	r3, [pc, #36]	; (80024c4 <HAL_PWR_EnterSLEEPMode+0x64>)
 800249e:	691b      	ldr	r3, [r3, #16]
 80024a0:	4a08      	ldr	r2, [pc, #32]	; (80024c4 <HAL_PWR_EnterSLEEPMode+0x64>)
 80024a2:	f023 0304 	bic.w	r3, r3, #4
 80024a6:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80024a8:	78fb      	ldrb	r3, [r7, #3]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d101      	bne.n	80024b2 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80024ae:	bf30      	wfi
 80024b0:	e002      	b.n	80024b8 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80024b2:	bf40      	sev
    __WFE();
 80024b4:	bf20      	wfe
    __WFE();
 80024b6:	bf20      	wfe
  }
}
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	58000400 	.word	0x58000400
 80024c4:	e000ed00 	.word	0xe000ed00

080024c8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80024cc:	4b03      	ldr	r3, [pc, #12]	; (80024dc <HAL_PWREx_GetVoltageRange+0x14>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr
 80024dc:	58000400 	.word	0x58000400

080024e0 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 80024e4:	4b04      	ldr	r3, [pc, #16]	; (80024f8 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a03      	ldr	r2, [pc, #12]	; (80024f8 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 80024ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024ee:	6013      	str	r3, [r2, #0]
}
 80024f0:	bf00      	nop
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr
 80024f8:	58000400 	.word	0x58000400

080024fc <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8002502:	4b16      	ldr	r3, [pc, #88]	; (800255c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a15      	ldr	r2, [pc, #84]	; (800255c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8002508:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800250c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 800250e:	4b14      	ldr	r3, [pc, #80]	; (8002560 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	2232      	movs	r2, #50	; 0x32
 8002514:	fb02 f303 	mul.w	r3, r2, r3
 8002518:	4a12      	ldr	r2, [pc, #72]	; (8002564 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 800251a:	fba2 2303 	umull	r2, r3, r2, r3
 800251e:	0c9b      	lsrs	r3, r3, #18
 8002520:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8002522:	e002      	b.n	800252a <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	3b01      	subs	r3, #1
 8002528:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 800252a:	4b0c      	ldr	r3, [pc, #48]	; (800255c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 800252c:	695b      	ldr	r3, [r3, #20]
 800252e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002532:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002536:	d102      	bne.n	800253e <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1f2      	bne.n	8002524 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 800253e:	4b07      	ldr	r3, [pc, #28]	; (800255c <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8002540:	695b      	ldr	r3, [r3, #20]
 8002542:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002546:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800254a:	d101      	bne.n	8002550 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 800254c:	2303      	movs	r3, #3
 800254e:	e000      	b.n	8002552 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr
 800255c:	58000400 	.word	0x58000400
 8002560:	20000000 	.word	0x20000000
 8002564:	431bde83 	.word	0x431bde83

08002568 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8002572:	4b10      	ldr	r3, [pc, #64]	; (80025b4 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f023 0307 	bic.w	r3, r3, #7
 800257a:	4a0e      	ldr	r2, [pc, #56]	; (80025b4 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 800257c:	f043 0302 	orr.w	r3, r3, #2
 8002580:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002582:	4b0d      	ldr	r3, [pc, #52]	; (80025b8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	4a0c      	ldr	r2, [pc, #48]	; (80025b8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8002588:	f043 0304 	orr.w	r3, r3, #4
 800258c:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	2b01      	cmp	r3, #1
 8002592:	d101      	bne.n	8002598 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002594:	bf30      	wfi
 8002596:	e002      	b.n	800259e <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002598:	bf40      	sev
    __WFE();
 800259a:	bf20      	wfe
    __WFE();
 800259c:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800259e:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	4a05      	ldr	r2, [pc, #20]	; (80025b8 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 80025a4:	f023 0304 	bic.w	r3, r3, #4
 80025a8:	6113      	str	r3, [r2, #16]
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bc80      	pop	{r7}
 80025b2:	4770      	bx	lr
 80025b4:	58000400 	.word	0x58000400
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <LL_PWR_IsEnabledBkUpAccess>:
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80025c0:	4b06      	ldr	r3, [pc, #24]	; (80025dc <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025cc:	d101      	bne.n	80025d2 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80025ce:	2301      	movs	r3, #1
 80025d0:	e000      	b.n	80025d4 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80025d2:	2300      	movs	r3, #0
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr
 80025dc:	58000400 	.word	0x58000400

080025e0 <LL_RCC_HSE_EnableTcxo>:
{
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80025e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025f2:	6013      	str	r3, [r2, #0]
}
 80025f4:	bf00      	nop
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr

080025fc <LL_RCC_HSE_DisableTcxo>:
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8002600:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800260a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800260e:	6013      	str	r3, [r2, #0]
}
 8002610:	bf00      	nop
 8002612:	46bd      	mov	sp, r7
 8002614:	bc80      	pop	{r7}
 8002616:	4770      	bx	lr

08002618 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800261c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002626:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800262a:	d101      	bne.n	8002630 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800262c:	2301      	movs	r3, #1
 800262e:	e000      	b.n	8002632 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8002630:	2300      	movs	r3, #0
}
 8002632:	4618      	mov	r0, r3
 8002634:	46bd      	mov	sp, r7
 8002636:	bc80      	pop	{r7}
 8002638:	4770      	bx	lr

0800263a <LL_RCC_HSE_Enable>:
{
 800263a:	b480      	push	{r7}
 800263c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800263e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800264c:	6013      	str	r3, [r2, #0]
}
 800264e:	bf00      	nop
 8002650:	46bd      	mov	sp, r7
 8002652:	bc80      	pop	{r7}
 8002654:	4770      	bx	lr

08002656 <LL_RCC_HSE_Disable>:
{
 8002656:	b480      	push	{r7}
 8002658:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800265a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002664:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002668:	6013      	str	r3, [r2, #0]
}
 800266a:	bf00      	nop
 800266c:	46bd      	mov	sp, r7
 800266e:	bc80      	pop	{r7}
 8002670:	4770      	bx	lr

08002672 <LL_RCC_HSE_IsReady>:
{
 8002672:	b480      	push	{r7}
 8002674:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8002676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002680:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002684:	d101      	bne.n	800268a <LL_RCC_HSE_IsReady+0x18>
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <LL_RCC_HSE_IsReady+0x1a>
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr

08002694 <LL_RCC_HSI_Enable>:
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002698:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a6:	6013      	str	r3, [r2, #0]
}
 80026a8:	bf00      	nop
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bc80      	pop	{r7}
 80026ae:	4770      	bx	lr

080026b0 <LL_RCC_HSI_Disable>:
{
 80026b0:	b480      	push	{r7}
 80026b2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80026b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80026be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026c2:	6013      	str	r3, [r2, #0]
}
 80026c4:	bf00      	nop
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bc80      	pop	{r7}
 80026ca:	4770      	bx	lr

080026cc <LL_RCC_HSI_IsReady>:
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80026d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026de:	d101      	bne.n	80026e4 <LL_RCC_HSI_IsReady+0x18>
 80026e0:	2301      	movs	r3, #1
 80026e2:	e000      	b.n	80026e6 <LL_RCC_HSI_IsReady+0x1a>
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bc80      	pop	{r7}
 80026ec:	4770      	bx	lr

080026ee <LL_RCC_HSI_SetCalibTrimming>:
{
 80026ee:	b480      	push	{r7}
 80026f0:	b083      	sub	sp, #12
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80026f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	061b      	lsls	r3, r3, #24
 8002704:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002708:	4313      	orrs	r3, r2
 800270a:	604b      	str	r3, [r1, #4]
}
 800270c:	bf00      	nop
 800270e:	370c      	adds	r7, #12
 8002710:	46bd      	mov	sp, r7
 8002712:	bc80      	pop	{r7}
 8002714:	4770      	bx	lr

08002716 <LL_RCC_LSE_IsReady>:
{
 8002716:	b480      	push	{r7}
 8002718:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800271a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800271e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b02      	cmp	r3, #2
 8002728:	d101      	bne.n	800272e <LL_RCC_LSE_IsReady+0x18>
 800272a:	2301      	movs	r3, #1
 800272c:	e000      	b.n	8002730 <LL_RCC_LSE_IsReady+0x1a>
 800272e:	2300      	movs	r3, #0
}
 8002730:	4618      	mov	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	bc80      	pop	{r7}
 8002736:	4770      	bx	lr

08002738 <LL_RCC_LSI_Enable>:
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800273c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002740:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002744:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002750:	bf00      	nop
 8002752:	46bd      	mov	sp, r7
 8002754:	bc80      	pop	{r7}
 8002756:	4770      	bx	lr

08002758 <LL_RCC_LSI_Disable>:
{
 8002758:	b480      	push	{r7}
 800275a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 800275c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002760:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002764:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002768:	f023 0301 	bic.w	r3, r3, #1
 800276c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8002770:	bf00      	nop
 8002772:	46bd      	mov	sp, r7
 8002774:	bc80      	pop	{r7}
 8002776:	4770      	bx	lr

08002778 <LL_RCC_LSI_IsReady>:
{
 8002778:	b480      	push	{r7}
 800277a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800277c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002780:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b02      	cmp	r3, #2
 800278a:	d101      	bne.n	8002790 <LL_RCC_LSI_IsReady+0x18>
 800278c:	2301      	movs	r3, #1
 800278e:	e000      	b.n	8002792 <LL_RCC_LSI_IsReady+0x1a>
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr

0800279a <LL_RCC_MSI_Enable>:
{
 800279a:	b480      	push	{r7}
 800279c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800279e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027a8:	f043 0301 	orr.w	r3, r3, #1
 80027ac:	6013      	str	r3, [r2, #0]
}
 80027ae:	bf00      	nop
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bc80      	pop	{r7}
 80027b4:	4770      	bx	lr

080027b6 <LL_RCC_MSI_Disable>:
{
 80027b6:	b480      	push	{r7}
 80027b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80027ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80027c4:	f023 0301 	bic.w	r3, r3, #1
 80027c8:	6013      	str	r3, [r2, #0]
}
 80027ca:	bf00      	nop
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bc80      	pop	{r7}
 80027d0:	4770      	bx	lr

080027d2 <LL_RCC_MSI_IsReady>:
{
 80027d2:	b480      	push	{r7}
 80027d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80027d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d101      	bne.n	80027e8 <LL_RCC_MSI_IsReady+0x16>
 80027e4:	2301      	movs	r3, #1
 80027e6:	e000      	b.n	80027ea <LL_RCC_MSI_IsReady+0x18>
 80027e8:	2300      	movs	r3, #0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr

080027f2 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80027f2:	b480      	push	{r7}
 80027f4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80027f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f003 0308 	and.w	r3, r3, #8
 8002800:	2b08      	cmp	r3, #8
 8002802:	d101      	bne.n	8002808 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002804:	2301      	movs	r3, #1
 8002806:	e000      	b.n	800280a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr

08002812 <LL_RCC_MSI_GetRange>:
{
 8002812:	b480      	push	{r7}
 8002814:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002820:	4618      	mov	r0, r3
 8002822:	46bd      	mov	sp, r7
 8002824:	bc80      	pop	{r7}
 8002826:	4770      	bx	lr

08002828 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8002828:	b480      	push	{r7}
 800282a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800282c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002830:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002834:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002838:	4618      	mov	r0, r3
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr

08002840 <LL_RCC_MSI_SetCalibTrimming>:
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8002848:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	021b      	lsls	r3, r3, #8
 8002856:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800285a:	4313      	orrs	r3, r2
 800285c:	604b      	str	r3, [r1, #4]
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	bc80      	pop	{r7}
 8002866:	4770      	bx	lr

08002868 <LL_RCC_SetSysClkSource>:
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002870:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f023 0203 	bic.w	r2, r3, #3
 800287a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4313      	orrs	r3, r2
 8002882:	608b      	str	r3, [r1, #8]
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	bc80      	pop	{r7}
 800288c:	4770      	bx	lr

0800288e <LL_RCC_GetSysClkSource>:
{
 800288e:	b480      	push	{r7}
 8002890:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002892:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 030c 	and.w	r3, r3, #12
}
 800289c:	4618      	mov	r0, r3
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr

080028a4 <LL_RCC_SetAHBPrescaler>:
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80028ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028b6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	4313      	orrs	r3, r2
 80028be:	608b      	str	r3, [r1, #8]
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr

080028ca <LL_RCC_SetAHB3Prescaler>:
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80028d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80028da:	f023 020f 	bic.w	r2, r3, #15
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	091b      	lsrs	r3, r3, #4
 80028e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr

080028f6 <LL_RCC_SetAPB1Prescaler>:
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80028fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002908:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	4313      	orrs	r3, r2
 8002910:	608b      	str	r3, [r1, #8]
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <LL_RCC_SetAPB2Prescaler>:
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8002924:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800292e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4313      	orrs	r3, r2
 8002936:	608b      	str	r3, [r1, #8]
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	bc80      	pop	{r7}
 8002940:	4770      	bx	lr

08002942 <LL_RCC_GetAHBPrescaler>:
{
 8002942:	b480      	push	{r7}
 8002944:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002946:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002950:	4618      	mov	r0, r3
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr

08002958 <LL_RCC_GetAHB3Prescaler>:
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800295c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002960:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800296a:	4618      	mov	r0, r3
 800296c:	46bd      	mov	sp, r7
 800296e:	bc80      	pop	{r7}
 8002970:	4770      	bx	lr

08002972 <LL_RCC_GetAPB1Prescaler>:
{
 8002972:	b480      	push	{r7}
 8002974:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002976:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002980:	4618      	mov	r0, r3
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr

08002988 <LL_RCC_GetAPB2Prescaler>:
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800298c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002996:	4618      	mov	r0, r3
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr

0800299e <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800299e:	b480      	push	{r7}
 80029a0:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80029a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029b0:	6013      	str	r3, [r2, #0]
}
 80029b2:	bf00      	nop
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bc80      	pop	{r7}
 80029b8:	4770      	bx	lr

080029ba <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80029ba:	b480      	push	{r7}
 80029bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80029be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029cc:	6013      	str	r3, [r2, #0]
}
 80029ce:	bf00      	nop
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bc80      	pop	{r7}
 80029d4:	4770      	bx	lr

080029d6 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80029d6:	b480      	push	{r7}
 80029d8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80029da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80029e8:	d101      	bne.n	80029ee <LL_RCC_PLL_IsReady+0x18>
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <LL_RCC_PLL_IsReady+0x1a>
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr

080029f8 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80029fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	0a1b      	lsrs	r3, r3, #8
 8002a04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bc80      	pop	{r7}
 8002a0e:	4770      	bx	lr

08002a10 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002a14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr

08002a26 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8002a26:	b480      	push	{r7}
 8002a28:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002a2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bc80      	pop	{r7}
 8002a3a:	4770      	bx	lr

08002a3c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002a40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	f003 0303 	and.w	r3, r3, #3
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bc80      	pop	{r7}
 8002a50:	4770      	bx	lr

08002a52 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8002a52:	b480      	push	{r7}
 8002a54:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8002a56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a64:	d101      	bne.n	8002a6a <LL_RCC_IsActiveFlag_HPRE+0x18>
 8002a66:	2301      	movs	r3, #1
 8002a68:	e000      	b.n	8002a6c <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr

08002a74 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8002a78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a7c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002a80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a88:	d101      	bne.n	8002a8e <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr

08002a98 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8002a9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002aaa:	d101      	bne.n	8002ab0 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8002aac:	2301      	movs	r3, #1
 8002aae:	e000      	b.n	8002ab2 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc80      	pop	{r7}
 8002ab8:	4770      	bx	lr

08002aba <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8002aba:	b480      	push	{r7}
 8002abc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8002abe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ac8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002acc:	d101      	bne.n	8002ad2 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e000      	b.n	8002ad4 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr

08002adc <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b088      	sub	sp, #32
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e38a      	b.n	8003204 <HAL_RCC_OscConfig+0x728>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002aee:	f7ff fece 	bl	800288e <LL_RCC_GetSysClkSource>
 8002af2:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002af4:	f7ff ffa2 	bl	8002a3c <LL_RCC_PLL_GetMainSource>
 8002af8:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0320 	and.w	r3, r3, #32
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	f000 80c9 	beq.w	8002c9a <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d005      	beq.n	8002b1a <HAL_RCC_OscConfig+0x3e>
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	2b0c      	cmp	r3, #12
 8002b12:	d17b      	bne.n	8002c0c <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d178      	bne.n	8002c0c <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b1a:	f7ff fe5a 	bl	80027d2 <LL_RCC_MSI_IsReady>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d005      	beq.n	8002b30 <HAL_RCC_OscConfig+0x54>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e369      	b.n	8003204 <HAL_RCC_OscConfig+0x728>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d005      	beq.n	8002b4e <HAL_RCC_OscConfig+0x72>
 8002b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b4c:	e006      	b.n	8002b5c <HAL_RCC_OscConfig+0x80>
 8002b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b56:	091b      	lsrs	r3, r3, #4
 8002b58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d222      	bcs.n	8002ba6 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b64:	4618      	mov	r0, r3
 8002b66:	f000 fd4f 	bl	8003608 <RCC_SetFlashLatencyFromMSIRange>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d001      	beq.n	8002b74 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e347      	b.n	8003204 <HAL_RCC_OscConfig+0x728>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b7e:	f043 0308 	orr.w	r3, r3, #8
 8002b82:	6013      	str	r3, [r2, #0]
 8002b84:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b92:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002b96:	4313      	orrs	r3, r2
 8002b98:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff fe4e 	bl	8002840 <LL_RCC_MSI_SetCalibTrimming>
 8002ba4:	e021      	b.n	8002bea <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ba6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bb0:	f043 0308 	orr.w	r3, r3, #8
 8002bb4:	6013      	str	r3, [r2, #0]
 8002bb6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7ff fe35 	bl	8002840 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f000 fd14 	bl	8003608 <RCC_SetFlashLatencyFromMSIRange>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e30c      	b.n	8003204 <HAL_RCC_OscConfig+0x728>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002bea:	f000 fcd5 	bl	8003598 <HAL_RCC_GetHCLKFreq>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	4ab4      	ldr	r2, [pc, #720]	; (8002ec4 <HAL_RCC_OscConfig+0x3e8>)
 8002bf2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002bf4:	4bb4      	ldr	r3, [pc, #720]	; (8002ec8 <HAL_RCC_OscConfig+0x3ec>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fe f865 	bl	8000cc8 <HAL_InitTick>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8002c02:	7cfb      	ldrb	r3, [r7, #19]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d047      	beq.n	8002c98 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8002c08:	7cfb      	ldrb	r3, [r7, #19]
 8002c0a:	e2fb      	b.n	8003204 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d02c      	beq.n	8002c6e <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002c14:	f7ff fdc1 	bl	800279a <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c18:	f7fe f860 	bl	8000cdc <HAL_GetTick>
 8002c1c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c20:	f7fe f85c 	bl	8000cdc <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e2e8      	b.n	8003204 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() == 0U)
 8002c32:	f7ff fdce 	bl	80027d2 <LL_RCC_MSI_IsReady>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0f1      	beq.n	8002c20 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c46:	f043 0308 	orr.w	r3, r3, #8
 8002c4a:	6013      	str	r3, [r2, #0]
 8002c4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7ff fdea 	bl	8002840 <LL_RCC_MSI_SetCalibTrimming>
 8002c6c:	e015      	b.n	8002c9a <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002c6e:	f7ff fda2 	bl	80027b6 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002c72:	f7fe f833 	bl	8000cdc <HAL_GetTick>
 8002c76:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8002c78:	e008      	b.n	8002c8c <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002c7a:	f7fe f82f 	bl	8000cdc <HAL_GetTick>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	1ad3      	subs	r3, r2, r3
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d901      	bls.n	8002c8c <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e2bb      	b.n	8003204 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_MSI_IsReady() != 0U)
 8002c8c:	f7ff fda1 	bl	80027d2 <LL_RCC_MSI_IsReady>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f1      	bne.n	8002c7a <HAL_RCC_OscConfig+0x19e>
 8002c96:	e000      	b.n	8002c9a <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c98:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d05f      	beq.n	8002d66 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	d005      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x1dc>
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	2b0c      	cmp	r3, #12
 8002cb0:	d10d      	bne.n	8002cce <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002cb2:	69bb      	ldr	r3, [r7, #24]
 8002cb4:	2b03      	cmp	r3, #3
 8002cb6:	d10a      	bne.n	8002cce <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cb8:	f7ff fcdb 	bl	8002672 <LL_RCC_HSE_IsReady>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d050      	beq.n	8002d64 <HAL_RCC_OscConfig+0x288>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d14c      	bne.n	8002d64 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e29a      	b.n	8003204 <HAL_RCC_OscConfig+0x728>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8002cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cec:	d102      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x218>
 8002cee:	f7ff fca4 	bl	800263a <LL_RCC_HSE_Enable>
 8002cf2:	e00d      	b.n	8002d10 <HAL_RCC_OscConfig+0x234>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8002cfc:	d104      	bne.n	8002d08 <HAL_RCC_OscConfig+0x22c>
 8002cfe:	f7ff fc6f 	bl	80025e0 <LL_RCC_HSE_EnableTcxo>
 8002d02:	f7ff fc9a 	bl	800263a <LL_RCC_HSE_Enable>
 8002d06:	e003      	b.n	8002d10 <HAL_RCC_OscConfig+0x234>
 8002d08:	f7ff fca5 	bl	8002656 <LL_RCC_HSE_Disable>
 8002d0c:	f7ff fc76 	bl	80025fc <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d012      	beq.n	8002d3e <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d18:	f7fd ffe0 	bl	8000cdc <HAL_GetTick>
 8002d1c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d20:	f7fd ffdc 	bl	8000cdc <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b64      	cmp	r3, #100	; 0x64
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e268      	b.n	8003204 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() == 0U)
 8002d32:	f7ff fc9e 	bl	8002672 <LL_RCC_HSE_IsReady>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0f1      	beq.n	8002d20 <HAL_RCC_OscConfig+0x244>
 8002d3c:	e013      	b.n	8002d66 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3e:	f7fd ffcd 	bl	8000cdc <HAL_GetTick>
 8002d42:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d46:	f7fd ffc9 	bl	8000cdc <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b64      	cmp	r3, #100	; 0x64
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e255      	b.n	8003204 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSE_IsReady() != 0U)
 8002d58:	f7ff fc8b 	bl	8002672 <LL_RCC_HSE_IsReady>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1f1      	bne.n	8002d46 <HAL_RCC_OscConfig+0x26a>
 8002d62:	e000      	b.n	8002d66 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d64:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0302 	and.w	r3, r3, #2
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d04b      	beq.n	8002e0a <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	2b04      	cmp	r3, #4
 8002d76:	d005      	beq.n	8002d84 <HAL_RCC_OscConfig+0x2a8>
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	2b0c      	cmp	r3, #12
 8002d7c:	d113      	bne.n	8002da6 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d110      	bne.n	8002da6 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002d84:	f7ff fca2 	bl	80026cc <LL_RCC_HSI_IsReady>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d005      	beq.n	8002d9a <HAL_RCC_OscConfig+0x2be>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e234      	b.n	8003204 <HAL_RCC_OscConfig+0x728>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695b      	ldr	r3, [r3, #20]
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff fca5 	bl	80026ee <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002da4:	e031      	b.n	8002e0a <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d019      	beq.n	8002de2 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dae:	f7ff fc71 	bl	8002694 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002db2:	f7fd ff93 	bl	8000cdc <HAL_GetTick>
 8002db6:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8002db8:	e008      	b.n	8002dcc <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dba:	f7fd ff8f 	bl	8000cdc <HAL_GetTick>
 8002dbe:	4602      	mov	r2, r0
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	1ad3      	subs	r3, r2, r3
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d901      	bls.n	8002dcc <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8002dc8:	2303      	movs	r3, #3
 8002dca:	e21b      	b.n	8003204 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() == 0U)
 8002dcc:	f7ff fc7e 	bl	80026cc <LL_RCC_HSI_IsReady>
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d0f1      	beq.n	8002dba <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff fc87 	bl	80026ee <LL_RCC_HSI_SetCalibTrimming>
 8002de0:	e013      	b.n	8002e0a <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002de2:	f7ff fc65 	bl	80026b0 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de6:	f7fd ff79 	bl	8000cdc <HAL_GetTick>
 8002dea:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8002dec:	e008      	b.n	8002e00 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002dee:	f7fd ff75 	bl	8000cdc <HAL_GetTick>
 8002df2:	4602      	mov	r2, r0
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	1ad3      	subs	r3, r2, r3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d901      	bls.n	8002e00 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	e201      	b.n	8003204 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_HSI_IsReady() != 0U)
 8002e00:	f7ff fc64 	bl	80026cc <LL_RCC_HSI_IsReady>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f1      	bne.n	8002dee <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0308 	and.w	r3, r3, #8
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d06e      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x418>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699b      	ldr	r3, [r3, #24]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d056      	beq.n	8002ecc <HAL_RCC_OscConfig+0x3f0>
    {
      uint32_t csr_temp = RCC->CSR;
 8002e1e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e26:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	69da      	ldr	r2, [r3, #28]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f003 0310 	and.w	r3, r3, #16
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d031      	beq.n	8002e9a <HAL_RCC_OscConfig+0x3be>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d006      	beq.n	8002e4e <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d101      	bne.n	8002e4e <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e1da      	b.n	8003204 <HAL_RCC_OscConfig+0x728>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d013      	beq.n	8002e80 <HAL_RCC_OscConfig+0x3a4>
        {
          __HAL_RCC_LSI_DISABLE();
 8002e58:	f7ff fc7e 	bl	8002758 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e5c:	f7fd ff3e 	bl	8000cdc <HAL_GetTick>
 8002e60:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x39a>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e64:	f7fd ff3a 	bl	8000cdc <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b11      	cmp	r3, #17
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x39a>
            {
              return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e1c6      	b.n	8003204 <HAL_RCC_OscConfig+0x728>
          while (LL_RCC_LSI_IsReady() != 0U)
 8002e76:	f7ff fc7f 	bl	8002778 <LL_RCC_LSI_IsReady>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d1f1      	bne.n	8002e64 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8002e80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e88:	f023 0210 	bic.w	r2, r3, #16
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002e94:	4313      	orrs	r3, r2
 8002e96:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e9a:	f7ff fc4d 	bl	8002738 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9e:	f7fd ff1d 	bl	8000cdc <HAL_GetTick>
 8002ea2:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8002ea4:	e008      	b.n	8002eb8 <HAL_RCC_OscConfig+0x3dc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ea6:	f7fd ff19 	bl	8000cdc <HAL_GetTick>
 8002eaa:	4602      	mov	r2, r0
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	1ad3      	subs	r3, r2, r3
 8002eb0:	2b11      	cmp	r3, #17
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x3dc>
        {
          return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e1a5      	b.n	8003204 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() == 0U)
 8002eb8:	f7ff fc5e 	bl	8002778 <LL_RCC_LSI_IsReady>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d0f1      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x3ca>
 8002ec2:	e017      	b.n	8002ef4 <HAL_RCC_OscConfig+0x418>
 8002ec4:	20000000 	.word	0x20000000
 8002ec8:	20000004 	.word	0x20000004
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ecc:	f7ff fc44 	bl	8002758 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed0:	f7fd ff04 	bl	8000cdc <HAL_GetTick>
 8002ed4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x40e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed8:	f7fd ff00 	bl	8000cdc <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b11      	cmp	r3, #17
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x40e>
        {
          return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e18c      	b.n	8003204 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSI_IsReady() != 0U)
 8002eea:	f7ff fc45 	bl	8002778 <LL_RCC_LSI_IsReady>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1f1      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x3fc>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 80d8 	beq.w	80030b2 <HAL_RCC_OscConfig+0x5d6>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002f02:	f7ff fb5b 	bl	80025bc <LL_PWR_IsEnabledBkUpAccess>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d113      	bne.n	8002f34 <HAL_RCC_OscConfig+0x458>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8002f0c:	f7ff fa9a 	bl	8002444 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f10:	f7fd fee4 	bl	8000cdc <HAL_GetTick>
 8002f14:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x44e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f18:	f7fd fee0 	bl	8000cdc <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e16c      	b.n	8003204 <HAL_RCC_OscConfig+0x728>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8002f2a:	f7ff fb47 	bl	80025bc <LL_PWR_IsEnabledBkUpAccess>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0f1      	beq.n	8002f18 <HAL_RCC_OscConfig+0x43c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d07b      	beq.n	8003034 <HAL_RCC_OscConfig+0x558>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	2b85      	cmp	r3, #133	; 0x85
 8002f42:	d003      	beq.n	8002f4c <HAL_RCC_OscConfig+0x470>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	2b05      	cmp	r3, #5
 8002f4a:	d109      	bne.n	8002f60 <HAL_RCC_OscConfig+0x484>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002f4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f58:	f043 0304 	orr.w	r3, r3, #4
 8002f5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f60:	f7fd febc 	bl	8000cdc <HAL_GetTick>
 8002f64:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002f66:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f72:	f043 0301 	orr.w	r3, r3, #1
 8002f76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8002f7a:	e00a      	b.n	8002f92 <HAL_RCC_OscConfig+0x4b6>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f7c:	f7fd feae 	bl	8000cdc <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x4b6>
        {
          return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e138      	b.n	8003204 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() == 0U)
 8002f92:	f7ff fbc0 	bl	8002716 <LL_RCC_LSE_IsReady>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d0ef      	beq.n	8002f7c <HAL_RCC_OscConfig+0x4a0>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	2b81      	cmp	r3, #129	; 0x81
 8002fa2:	d003      	beq.n	8002fac <HAL_RCC_OscConfig+0x4d0>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	2b85      	cmp	r3, #133	; 0x85
 8002faa:	d121      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x514>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fac:	f7fd fe96 	bl	8000cdc <HAL_GetTick>
 8002fb0:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002fb2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002fc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002fc6:	e00a      	b.n	8002fde <HAL_RCC_OscConfig+0x502>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc8:	f7fd fe88 	bl	8000cdc <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0x502>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e112      	b.n	8003204 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002fde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0ec      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x4ec>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002fee:	e060      	b.n	80030b2 <HAL_RCC_OscConfig+0x5d6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff0:	f7fd fe74 	bl	8000cdc <HAL_GetTick>
 8002ff4:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003002:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003006:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800300a:	e00a      	b.n	8003022 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800300c:	f7fd fe66 	bl	8000cdc <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	f241 3288 	movw	r2, #5000	; 0x1388
 800301a:	4293      	cmp	r3, r2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e0f0      	b.n	8003204 <HAL_RCC_OscConfig+0x728>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800302a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1ec      	bne.n	800300c <HAL_RCC_OscConfig+0x530>
 8003032:	e03e      	b.n	80030b2 <HAL_RCC_OscConfig+0x5d6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003034:	f7fd fe52 	bl	8000cdc <HAL_GetTick>
 8003038:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800303a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800303e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003042:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003046:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800304a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800304e:	e00a      	b.n	8003066 <HAL_RCC_OscConfig+0x58a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003050:	f7fd fe44 	bl	8000cdc <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	f241 3288 	movw	r2, #5000	; 0x1388
 800305e:	4293      	cmp	r3, r2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x58a>
        {
          return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e0ce      	b.n	8003204 <HAL_RCC_OscConfig+0x728>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003066:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800306a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1ec      	bne.n	8003050 <HAL_RCC_OscConfig+0x574>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003076:	f7fd fe31 	bl	8000cdc <HAL_GetTick>
 800307a:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800307c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003084:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003088:	f023 0301 	bic.w	r3, r3, #1
 800308c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8003090:	e00a      	b.n	80030a8 <HAL_RCC_OscConfig+0x5cc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003092:	f7fd fe23 	bl	8000cdc <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	f241 3288 	movw	r2, #5000	; 0x1388
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e0ad      	b.n	8003204 <HAL_RCC_OscConfig+0x728>
      while (LL_RCC_LSE_IsReady() != 0U)
 80030a8:	f7ff fb35 	bl	8002716 <LL_RCC_LSE_IsReady>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1ef      	bne.n	8003092 <HAL_RCC_OscConfig+0x5b6>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 80a3 	beq.w	8003202 <HAL_RCC_OscConfig+0x726>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	2b0c      	cmp	r3, #12
 80030c0:	d076      	beq.n	80031b0 <HAL_RCC_OscConfig+0x6d4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c6:	2b02      	cmp	r3, #2
 80030c8:	d14b      	bne.n	8003162 <HAL_RCC_OscConfig+0x686>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ca:	f7ff fc76 	bl	80029ba <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ce:	f7fd fe05 	bl	8000cdc <HAL_GetTick>
 80030d2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x60c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d6:	f7fd fe01 	bl	8000cdc <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b0a      	cmp	r3, #10
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x60c>
          {
            return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e08d      	b.n	8003204 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 80030e8:	f7ff fc75 	bl	80029d6 <LL_RCC_PLL_IsReady>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f1      	bne.n	80030d6 <HAL_RCC_OscConfig+0x5fa>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030f6:	68da      	ldr	r2, [r3, #12]
 80030f8:	4b44      	ldr	r3, [pc, #272]	; (800320c <HAL_RCC_OscConfig+0x730>)
 80030fa:	4013      	ands	r3, r2
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003104:	4311      	orrs	r1, r2
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800310a:	0212      	lsls	r2, r2, #8
 800310c:	4311      	orrs	r1, r2
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003112:	4311      	orrs	r1, r2
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003118:	4311      	orrs	r1, r2
 800311a:	687a      	ldr	r2, [r7, #4]
 800311c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800311e:	430a      	orrs	r2, r1
 8003120:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003124:	4313      	orrs	r3, r2
 8003126:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003128:	f7ff fc39 	bl	800299e <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800312c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003136:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800313a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313c:	f7fd fdce 	bl	8000cdc <HAL_GetTick>
 8003140:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x67a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003144:	f7fd fdca 	bl	8000cdc <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b0a      	cmp	r3, #10
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x67a>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e056      	b.n	8003204 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() == 0U)
 8003156:	f7ff fc3e 	bl	80029d6 <LL_RCC_PLL_IsReady>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d0f1      	beq.n	8003144 <HAL_RCC_OscConfig+0x668>
 8003160:	e04f      	b.n	8003202 <HAL_RCC_OscConfig+0x726>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003162:	f7ff fc2a 	bl	80029ba <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8003166:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003170:	f023 0303 	bic.w	r3, r3, #3
 8003174:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8003176:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003180:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8003184:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003188:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318a:	f7fd fda7 	bl	8000cdc <HAL_GetTick>
 800318e:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x6c8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003192:	f7fd fda3 	bl	8000cdc <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b0a      	cmp	r3, #10
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x6c8>
          {
            return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e02f      	b.n	8003204 <HAL_RCC_OscConfig+0x728>
        while (LL_RCC_PLL_IsReady() != 0U)
 80031a4:	f7ff fc17 	bl	80029d6 <LL_RCC_PLL_IsReady>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f1      	bne.n	8003192 <HAL_RCC_OscConfig+0x6b6>
 80031ae:	e028      	b.n	8003202 <HAL_RCC_OscConfig+0x726>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d101      	bne.n	80031bc <HAL_RCC_OscConfig+0x6e0>
      {
        return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e023      	b.n	8003204 <HAL_RCC_OscConfig+0x728>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	f003 0203 	and.w	r2, r3, #3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d115      	bne.n	80031fe <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031dc:	429a      	cmp	r2, r3
 80031de:	d10e      	bne.n	80031fe <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ea:	021b      	lsls	r3, r3, #8
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d106      	bne.n	80031fe <HAL_RCC_OscConfig+0x722>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d001      	beq.n	8003202 <HAL_RCC_OscConfig+0x726>
        {
          return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <HAL_RCC_OscConfig+0x728>
        }
      }
    }
  }
  return HAL_OK;
 8003202:	2300      	movs	r3, #0
}
 8003204:	4618      	mov	r0, r3
 8003206:	3720      	adds	r7, #32
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	11c1808c 	.word	0x11c1808c

08003210 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
 8003218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e10f      	b.n	8003444 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003224:	4b89      	ldr	r3, [pc, #548]	; (800344c <HAL_RCC_ClockConfig+0x23c>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	683a      	ldr	r2, [r7, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d91b      	bls.n	800326a <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003232:	4b86      	ldr	r3, [pc, #536]	; (800344c <HAL_RCC_ClockConfig+0x23c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f023 0207 	bic.w	r2, r3, #7
 800323a:	4984      	ldr	r1, [pc, #528]	; (800344c <HAL_RCC_ClockConfig+0x23c>)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	4313      	orrs	r3, r2
 8003240:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003242:	f7fd fd4b 	bl	8000cdc <HAL_GetTick>
 8003246:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003248:	e008      	b.n	800325c <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800324a:	f7fd fd47 	bl	8000cdc <HAL_GetTick>
 800324e:	4602      	mov	r2, r0
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d901      	bls.n	800325c <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e0f3      	b.n	8003444 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800325c:	4b7b      	ldr	r3, [pc, #492]	; (800344c <HAL_RCC_ClockConfig+0x23c>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	d1ef      	bne.n	800324a <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d016      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	4618      	mov	r0, r3
 800327c:	f7ff fb12 	bl	80028a4 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003280:	f7fd fd2c 	bl	8000cdc <HAL_GetTick>
 8003284:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8003286:	e008      	b.n	800329a <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003288:	f7fd fd28 	bl	8000cdc <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e0d4      	b.n	8003444 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800329a:	f7ff fbda 	bl	8002a52 <LL_RCC_IsActiveFlag_HPRE>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0f1      	beq.n	8003288 <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d016      	beq.n	80032de <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff fb08 	bl	80028ca <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80032ba:	f7fd fd0f 	bl	8000cdc <HAL_GetTick>
 80032be:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80032c2:	f7fd fd0b 	bl	8000cdc <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e0b7      	b.n	8003444 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 80032d4:	f7ff fbce 	bl	8002a74 <LL_RCC_IsActiveFlag_SHDHPRE>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d0f1      	beq.n	80032c2 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0304 	and.w	r3, r3, #4
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d016      	beq.n	8003318 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff fb01 	bl	80028f6 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80032f4:	f7fd fcf2 	bl	8000cdc <HAL_GetTick>
 80032f8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80032fa:	e008      	b.n	800330e <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80032fc:	f7fd fcee 	bl	8000cdc <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e09a      	b.n	8003444 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800330e:	f7ff fbc3 	bl	8002a98 <LL_RCC_IsActiveFlag_PPRE1>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0f1      	beq.n	80032fc <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0308 	and.w	r3, r3, #8
 8003320:	2b00      	cmp	r3, #0
 8003322:	d017      	beq.n	8003354 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	691b      	ldr	r3, [r3, #16]
 8003328:	00db      	lsls	r3, r3, #3
 800332a:	4618      	mov	r0, r3
 800332c:	f7ff faf6 	bl	800291c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8003330:	f7fd fcd4 	bl	8000cdc <HAL_GetTick>
 8003334:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8003336:	e008      	b.n	800334a <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003338:	f7fd fcd0 	bl	8000cdc <HAL_GetTick>
 800333c:	4602      	mov	r2, r0
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	1ad3      	subs	r3, r2, r3
 8003342:	2b02      	cmp	r3, #2
 8003344:	d901      	bls.n	800334a <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e07c      	b.n	8003444 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 800334a:	f7ff fbb6 	bl	8002aba <LL_RCC_IsActiveFlag_PPRE2>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0f1      	beq.n	8003338 <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	2b00      	cmp	r3, #0
 800335e:	d043      	beq.n	80033e8 <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	2b02      	cmp	r3, #2
 8003366:	d106      	bne.n	8003376 <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8003368:	f7ff f983 	bl	8002672 <LL_RCC_HSE_IsReady>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d11e      	bne.n	80033b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e066      	b.n	8003444 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	2b03      	cmp	r3, #3
 800337c:	d106      	bne.n	800338c <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 800337e:	f7ff fb2a 	bl	80029d6 <LL_RCC_PLL_IsReady>
 8003382:	4603      	mov	r3, r0
 8003384:	2b00      	cmp	r3, #0
 8003386:	d113      	bne.n	80033b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e05b      	b.n	8003444 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d106      	bne.n	80033a2 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8003394:	f7ff fa1d 	bl	80027d2 <LL_RCC_MSI_IsReady>
 8003398:	4603      	mov	r3, r0
 800339a:	2b00      	cmp	r3, #0
 800339c:	d108      	bne.n	80033b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e050      	b.n	8003444 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80033a2:	f7ff f993 	bl	80026cc <LL_RCC_HSI_IsReady>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e049      	b.n	8003444 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f7ff fa57 	bl	8002868 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033ba:	f7fd fc8f 	bl	8000cdc <HAL_GetTick>
 80033be:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c0:	e00a      	b.n	80033d8 <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c2:	f7fd fc8b 	bl	8000cdc <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e035      	b.n	8003444 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033d8:	f7ff fa59 	bl	800288e <LL_RCC_GetSysClkSource>
 80033dc:	4602      	mov	r2, r0
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d1ec      	bne.n	80033c2 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033e8:	4b18      	ldr	r3, [pc, #96]	; (800344c <HAL_RCC_ClockConfig+0x23c>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d21b      	bcs.n	800342e <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033f6:	4b15      	ldr	r3, [pc, #84]	; (800344c <HAL_RCC_ClockConfig+0x23c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f023 0207 	bic.w	r2, r3, #7
 80033fe:	4913      	ldr	r1, [pc, #76]	; (800344c <HAL_RCC_ClockConfig+0x23c>)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	4313      	orrs	r3, r2
 8003404:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003406:	f7fd fc69 	bl	8000cdc <HAL_GetTick>
 800340a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800340c:	e008      	b.n	8003420 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800340e:	f7fd fc65 	bl	8000cdc <HAL_GetTick>
 8003412:	4602      	mov	r2, r0
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	1ad3      	subs	r3, r2, r3
 8003418:	2b02      	cmp	r3, #2
 800341a:	d901      	bls.n	8003420 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 800341c:	2303      	movs	r3, #3
 800341e:	e011      	b.n	8003444 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003420:	4b0a      	ldr	r3, [pc, #40]	; (800344c <HAL_RCC_ClockConfig+0x23c>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0307 	and.w	r3, r3, #7
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	429a      	cmp	r2, r3
 800342c:	d1ef      	bne.n	800340e <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800342e:	f000 f8b3 	bl	8003598 <HAL_RCC_GetHCLKFreq>
 8003432:	4603      	mov	r3, r0
 8003434:	4a06      	ldr	r2, [pc, #24]	; (8003450 <HAL_RCC_ClockConfig+0x240>)
 8003436:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003438:	4b06      	ldr	r3, [pc, #24]	; (8003454 <HAL_RCC_ClockConfig+0x244>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f7fd fc43 	bl	8000cc8 <HAL_InitTick>
 8003442:	4603      	mov	r3, r0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	58004000 	.word	0x58004000
 8003450:	20000000 	.word	0x20000000
 8003454:	20000004 	.word	0x20000004

08003458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003458:	b590      	push	{r4, r7, lr}
 800345a:	b087      	sub	sp, #28
 800345c:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 800345e:	2300      	movs	r3, #0
 8003460:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8003462:	2300      	movs	r3, #0
 8003464:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003466:	f7ff fa12 	bl	800288e <LL_RCC_GetSysClkSource>
 800346a:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800346c:	f7ff fae6 	bl	8002a3c <LL_RCC_PLL_GetMainSource>
 8003470:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d005      	beq.n	8003484 <HAL_RCC_GetSysClockFreq+0x2c>
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2b0c      	cmp	r3, #12
 800347c:	d139      	bne.n	80034f2 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d136      	bne.n	80034f2 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003484:	f7ff f9b5 	bl	80027f2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d115      	bne.n	80034ba <HAL_RCC_GetSysClockFreq+0x62>
 800348e:	f7ff f9b0 	bl	80027f2 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003492:	4603      	mov	r3, r0
 8003494:	2b01      	cmp	r3, #1
 8003496:	d106      	bne.n	80034a6 <HAL_RCC_GetSysClockFreq+0x4e>
 8003498:	f7ff f9bb 	bl	8002812 <LL_RCC_MSI_GetRange>
 800349c:	4603      	mov	r3, r0
 800349e:	0a1b      	lsrs	r3, r3, #8
 80034a0:	f003 030f 	and.w	r3, r3, #15
 80034a4:	e005      	b.n	80034b2 <HAL_RCC_GetSysClockFreq+0x5a>
 80034a6:	f7ff f9bf 	bl	8002828 <LL_RCC_MSI_GetRangeAfterStandby>
 80034aa:	4603      	mov	r3, r0
 80034ac:	0a1b      	lsrs	r3, r3, #8
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	4a36      	ldr	r2, [pc, #216]	; (800358c <HAL_RCC_GetSysClockFreq+0x134>)
 80034b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b8:	e014      	b.n	80034e4 <HAL_RCC_GetSysClockFreq+0x8c>
 80034ba:	f7ff f99a 	bl	80027f2 <LL_RCC_MSI_IsEnabledRangeSelect>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d106      	bne.n	80034d2 <HAL_RCC_GetSysClockFreq+0x7a>
 80034c4:	f7ff f9a5 	bl	8002812 <LL_RCC_MSI_GetRange>
 80034c8:	4603      	mov	r3, r0
 80034ca:	091b      	lsrs	r3, r3, #4
 80034cc:	f003 030f 	and.w	r3, r3, #15
 80034d0:	e005      	b.n	80034de <HAL_RCC_GetSysClockFreq+0x86>
 80034d2:	f7ff f9a9 	bl	8002828 <LL_RCC_MSI_GetRangeAfterStandby>
 80034d6:	4603      	mov	r3, r0
 80034d8:	091b      	lsrs	r3, r3, #4
 80034da:	f003 030f 	and.w	r3, r3, #15
 80034de:	4a2b      	ldr	r2, [pc, #172]	; (800358c <HAL_RCC_GetSysClockFreq+0x134>)
 80034e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034e4:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d115      	bne.n	8003518 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80034f0:	e012      	b.n	8003518 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	2b04      	cmp	r3, #4
 80034f6:	d102      	bne.n	80034fe <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80034f8:	4b25      	ldr	r3, [pc, #148]	; (8003590 <HAL_RCC_GetSysClockFreq+0x138>)
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	e00c      	b.n	8003518 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	2b08      	cmp	r3, #8
 8003502:	d109      	bne.n	8003518 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8003504:	f7ff f888 	bl	8002618 <LL_RCC_HSE_IsEnabledDiv2>
 8003508:	4603      	mov	r3, r0
 800350a:	2b01      	cmp	r3, #1
 800350c:	d102      	bne.n	8003514 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800350e:	4b20      	ldr	r3, [pc, #128]	; (8003590 <HAL_RCC_GetSysClockFreq+0x138>)
 8003510:	617b      	str	r3, [r7, #20]
 8003512:	e001      	b.n	8003518 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8003514:	4b1f      	ldr	r3, [pc, #124]	; (8003594 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003516:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003518:	f7ff f9b9 	bl	800288e <LL_RCC_GetSysClkSource>
 800351c:	4603      	mov	r3, r0
 800351e:	2b0c      	cmp	r3, #12
 8003520:	d12f      	bne.n	8003582 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8003522:	f7ff fa8b 	bl	8002a3c <LL_RCC_PLL_GetMainSource>
 8003526:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b02      	cmp	r3, #2
 800352c:	d003      	beq.n	8003536 <HAL_RCC_GetSysClockFreq+0xde>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b03      	cmp	r3, #3
 8003532:	d003      	beq.n	800353c <HAL_RCC_GetSysClockFreq+0xe4>
 8003534:	e00d      	b.n	8003552 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8003536:	4b16      	ldr	r3, [pc, #88]	; (8003590 <HAL_RCC_GetSysClockFreq+0x138>)
 8003538:	60fb      	str	r3, [r7, #12]
        break;
 800353a:	e00d      	b.n	8003558 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800353c:	f7ff f86c 	bl	8002618 <LL_RCC_HSE_IsEnabledDiv2>
 8003540:	4603      	mov	r3, r0
 8003542:	2b01      	cmp	r3, #1
 8003544:	d102      	bne.n	800354c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8003546:	4b12      	ldr	r3, [pc, #72]	; (8003590 <HAL_RCC_GetSysClockFreq+0x138>)
 8003548:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800354a:	e005      	b.n	8003558 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800354c:	4b11      	ldr	r3, [pc, #68]	; (8003594 <HAL_RCC_GetSysClockFreq+0x13c>)
 800354e:	60fb      	str	r3, [r7, #12]
        break;
 8003550:	e002      	b.n	8003558 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	60fb      	str	r3, [r7, #12]
        break;
 8003556:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003558:	f7ff fa4e 	bl	80029f8 <LL_RCC_PLL_GetN>
 800355c:	4602      	mov	r2, r0
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	fb03 f402 	mul.w	r4, r3, r2
 8003564:	f7ff fa5f 	bl	8002a26 <LL_RCC_PLL_GetDivider>
 8003568:	4603      	mov	r3, r0
 800356a:	091b      	lsrs	r3, r3, #4
 800356c:	3301      	adds	r3, #1
 800356e:	fbb4 f4f3 	udiv	r4, r4, r3
 8003572:	f7ff fa4d 	bl	8002a10 <LL_RCC_PLL_GetR>
 8003576:	4603      	mov	r3, r0
 8003578:	0f5b      	lsrs	r3, r3, #29
 800357a:	3301      	adds	r3, #1
 800357c:	fbb4 f3f3 	udiv	r3, r4, r3
 8003580:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8003582:	697b      	ldr	r3, [r7, #20]
}
 8003584:	4618      	mov	r0, r3
 8003586:	371c      	adds	r7, #28
 8003588:	46bd      	mov	sp, r7
 800358a:	bd90      	pop	{r4, r7, pc}
 800358c:	0800bf3c 	.word	0x0800bf3c
 8003590:	00f42400 	.word	0x00f42400
 8003594:	01e84800 	.word	0x01e84800

08003598 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003598:	b598      	push	{r3, r4, r7, lr}
 800359a:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 800359c:	f7ff ff5c 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 80035a0:	4604      	mov	r4, r0
 80035a2:	f7ff f9ce 	bl	8002942 <LL_RCC_GetAHBPrescaler>
 80035a6:	4603      	mov	r3, r0
 80035a8:	091b      	lsrs	r3, r3, #4
 80035aa:	f003 030f 	and.w	r3, r3, #15
 80035ae:	4a03      	ldr	r2, [pc, #12]	; (80035bc <HAL_RCC_GetHCLKFreq+0x24>)
 80035b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b4:	fbb4 f3f3 	udiv	r3, r4, r3
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	bd98      	pop	{r3, r4, r7, pc}
 80035bc:	0800bedc 	.word	0x0800bedc

080035c0 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035c0:	b598      	push	{r3, r4, r7, lr}
 80035c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80035c4:	f7ff ffe8 	bl	8003598 <HAL_RCC_GetHCLKFreq>
 80035c8:	4604      	mov	r4, r0
 80035ca:	f7ff f9d2 	bl	8002972 <LL_RCC_GetAPB1Prescaler>
 80035ce:	4603      	mov	r3, r0
 80035d0:	0a1b      	lsrs	r3, r3, #8
 80035d2:	4a03      	ldr	r2, [pc, #12]	; (80035e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035d8:	fa24 f303 	lsr.w	r3, r4, r3
}
 80035dc:	4618      	mov	r0, r3
 80035de:	bd98      	pop	{r3, r4, r7, pc}
 80035e0:	0800bf1c 	.word	0x0800bf1c

080035e4 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035e4:	b598      	push	{r3, r4, r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 80035e8:	f7ff ffd6 	bl	8003598 <HAL_RCC_GetHCLKFreq>
 80035ec:	4604      	mov	r4, r0
 80035ee:	f7ff f9cb 	bl	8002988 <LL_RCC_GetAPB2Prescaler>
 80035f2:	4603      	mov	r3, r0
 80035f4:	0adb      	lsrs	r3, r3, #11
 80035f6:	4a03      	ldr	r2, [pc, #12]	; (8003604 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035fc:	fa24 f303 	lsr.w	r3, r4, r3
}
 8003600:	4618      	mov	r0, r3
 8003602:	bd98      	pop	{r3, r4, r7, pc}
 8003604:	0800bf1c 	.word	0x0800bf1c

08003608 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8003608:	b590      	push	{r4, r7, lr}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	091b      	lsrs	r3, r3, #4
 8003614:	f003 030f 	and.w	r3, r3, #15
 8003618:	4a10      	ldr	r2, [pc, #64]	; (800365c <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800361a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800361e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8003620:	f7ff f99a 	bl	8002958 <LL_RCC_GetAHB3Prescaler>
 8003624:	4603      	mov	r3, r0
 8003626:	091b      	lsrs	r3, r3, #4
 8003628:	f003 030f 	and.w	r3, r3, #15
 800362c:	4a0c      	ldr	r2, [pc, #48]	; (8003660 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800362e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	fbb2 f3f3 	udiv	r3, r2, r3
 8003638:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	4a09      	ldr	r2, [pc, #36]	; (8003664 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800363e:	fba2 2303 	umull	r2, r3, r2, r3
 8003642:	0c9c      	lsrs	r4, r3, #18
 8003644:	f7fe ff40 	bl	80024c8 <HAL_PWREx_GetVoltageRange>
 8003648:	4603      	mov	r3, r0
 800364a:	4619      	mov	r1, r3
 800364c:	4620      	mov	r0, r4
 800364e:	f000 f80b 	bl	8003668 <RCC_SetFlashLatency>
 8003652:	4603      	mov	r3, r0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3714      	adds	r7, #20
 8003658:	46bd      	mov	sp, r7
 800365a:	bd90      	pop	{r4, r7, pc}
 800365c:	0800bf3c 	.word	0x0800bf3c
 8003660:	0800bedc 	.word	0x0800bedc
 8003664:	431bde83 	.word	0x431bde83

08003668 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b08e      	sub	sp, #56	; 0x38
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003672:	4a3c      	ldr	r2, [pc, #240]	; (8003764 <RCC_SetFlashLatency+0xfc>)
 8003674:	f107 0320 	add.w	r3, r7, #32
 8003678:	e892 0003 	ldmia.w	r2, {r0, r1}
 800367c:	6018      	str	r0, [r3, #0]
 800367e:	3304      	adds	r3, #4
 8003680:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003682:	4a39      	ldr	r2, [pc, #228]	; (8003768 <RCC_SetFlashLatency+0x100>)
 8003684:	f107 0318 	add.w	r3, r7, #24
 8003688:	e892 0003 	ldmia.w	r2, {r0, r1}
 800368c:	6018      	str	r0, [r3, #0]
 800368e:	3304      	adds	r3, #4
 8003690:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003692:	4a36      	ldr	r2, [pc, #216]	; (800376c <RCC_SetFlashLatency+0x104>)
 8003694:	f107 030c 	add.w	r3, r7, #12
 8003698:	ca07      	ldmia	r2, {r0, r1, r2}
 800369a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800369e:	2300      	movs	r3, #0
 80036a0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036a8:	d11d      	bne.n	80036e6 <RCC_SetFlashLatency+0x7e>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80036aa:	2300      	movs	r3, #0
 80036ac:	633b      	str	r3, [r7, #48]	; 0x30
 80036ae:	e016      	b.n	80036de <RCC_SetFlashLatency+0x76>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80036b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80036b8:	4413      	add	r3, r2
 80036ba:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80036be:	461a      	mov	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d808      	bhi.n	80036d8 <RCC_SetFlashLatency+0x70>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80036c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80036ce:	4413      	add	r3, r2
 80036d0:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80036d4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80036d6:	e023      	b.n	8003720 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80036d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036da:	3301      	adds	r3, #1
 80036dc:	633b      	str	r3, [r7, #48]	; 0x30
 80036de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d9e5      	bls.n	80036b0 <RCC_SetFlashLatency+0x48>
 80036e4:	e01c      	b.n	8003720 <RCC_SetFlashLatency+0xb8>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80036e6:	2300      	movs	r3, #0
 80036e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036ea:	e016      	b.n	800371a <RCC_SetFlashLatency+0xb2>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80036ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ee:	005b      	lsls	r3, r3, #1
 80036f0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80036f4:	4413      	add	r3, r2
 80036f6:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80036fa:	461a      	mov	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4293      	cmp	r3, r2
 8003700:	d808      	bhi.n	8003714 <RCC_SetFlashLatency+0xac>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800370a:	4413      	add	r3, r2
 800370c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8003710:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003712:	e005      	b.n	8003720 <RCC_SetFlashLatency+0xb8>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003716:	3301      	adds	r3, #1
 8003718:	62fb      	str	r3, [r7, #44]	; 0x2c
 800371a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800371c:	2b02      	cmp	r3, #2
 800371e:	d9e5      	bls.n	80036ec <RCC_SetFlashLatency+0x84>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003720:	4b13      	ldr	r3, [pc, #76]	; (8003770 <RCC_SetFlashLatency+0x108>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f023 0207 	bic.w	r2, r3, #7
 8003728:	4911      	ldr	r1, [pc, #68]	; (8003770 <RCC_SetFlashLatency+0x108>)
 800372a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800372c:	4313      	orrs	r3, r2
 800372e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003730:	f7fd fad4 	bl	8000cdc <HAL_GetTick>
 8003734:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8003736:	e008      	b.n	800374a <RCC_SetFlashLatency+0xe2>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003738:	f7fd fad0 	bl	8000cdc <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b02      	cmp	r3, #2
 8003744:	d901      	bls.n	800374a <RCC_SetFlashLatency+0xe2>
    {
      return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e007      	b.n	800375a <RCC_SetFlashLatency+0xf2>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800374a:	4b09      	ldr	r3, [pc, #36]	; (8003770 <RCC_SetFlashLatency+0x108>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0307 	and.w	r3, r3, #7
 8003752:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003754:	429a      	cmp	r2, r3
 8003756:	d1ef      	bne.n	8003738 <RCC_SetFlashLatency+0xd0>
    }
  }
  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3738      	adds	r7, #56	; 0x38
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	0800bc30 	.word	0x0800bc30
 8003768:	0800bc38 	.word	0x0800bc38
 800376c:	0800bc40 	.word	0x0800bc40
 8003770:	58004000 	.word	0x58004000

08003774 <LL_RCC_LSE_IsReady>:
{
 8003774:	b480      	push	{r7}
 8003776:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800377c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003780:	f003 0302 	and.w	r3, r3, #2
 8003784:	2b02      	cmp	r3, #2
 8003786:	d101      	bne.n	800378c <LL_RCC_LSE_IsReady+0x18>
 8003788:	2301      	movs	r3, #1
 800378a:	e000      	b.n	800378e <LL_RCC_LSE_IsReady+0x1a>
 800378c:	2300      	movs	r3, #0
}
 800378e:	4618      	mov	r0, r3
 8003790:	46bd      	mov	sp, r7
 8003792:	bc80      	pop	{r7}
 8003794:	4770      	bx	lr

08003796 <LL_RCC_SetUSARTClockSource>:
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800379e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	0c1b      	lsrs	r3, r3, #16
 80037aa:	43db      	mvns	r3, r3
 80037ac:	401a      	ands	r2, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037b6:	4313      	orrs	r3, r2
 80037b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bc80      	pop	{r7}
 80037c4:	4770      	bx	lr

080037c6 <LL_RCC_SetI2SClockSource>:
{
 80037c6:	b480      	push	{r7}
 80037c8:	b083      	sub	sp, #12
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80037ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037da:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80037e6:	bf00      	nop
 80037e8:	370c      	adds	r7, #12
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bc80      	pop	{r7}
 80037ee:	4770      	bx	lr

080037f0 <LL_RCC_SetLPUARTClockSource>:
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80037f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003800:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003804:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4313      	orrs	r3, r2
 800380c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	bc80      	pop	{r7}
 8003818:	4770      	bx	lr

0800381a <LL_RCC_SetI2CClockSource>:
{
 800381a:	b480      	push	{r7}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003826:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	091b      	lsrs	r3, r3, #4
 800382e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003832:	43db      	mvns	r3, r3
 8003834:	401a      	ands	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	011b      	lsls	r3, r3, #4
 800383a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800383e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003842:	4313      	orrs	r3, r2
 8003844:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	bc80      	pop	{r7}
 8003850:	4770      	bx	lr

08003852 <LL_RCC_SetLPTIMClockSource>:
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800385a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800385e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	0c1b      	lsrs	r3, r3, #16
 8003866:	041b      	lsls	r3, r3, #16
 8003868:	43db      	mvns	r3, r3
 800386a:	401a      	ands	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	041b      	lsls	r3, r3, #16
 8003870:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003874:	4313      	orrs	r3, r2
 8003876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	bc80      	pop	{r7}
 8003882:	4770      	bx	lr

08003884 <LL_RCC_SetRNGClockSource>:
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800388c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003890:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003894:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003898:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	4313      	orrs	r3, r2
 80038a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80038a4:	bf00      	nop
 80038a6:	370c      	adds	r7, #12
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bc80      	pop	{r7}
 80038ac:	4770      	bx	lr

080038ae <LL_RCC_SetADCClockSource>:
{
 80038ae:	b480      	push	{r7}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80038b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80038c2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80038ce:	bf00      	nop
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bc80      	pop	{r7}
 80038d6:	4770      	bx	lr

080038d8 <LL_RCC_SetRTCClockSource>:
{
 80038d8:	b480      	push	{r7}
 80038da:	b083      	sub	sp, #12
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80038e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80038e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038ec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bc80      	pop	{r7}
 8003900:	4770      	bx	lr

08003902 <LL_RCC_GetRTCClockSource>:
{
 8003902:	b480      	push	{r7}
 8003904:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003906:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800390a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800390e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8003912:	4618      	mov	r0, r3
 8003914:	46bd      	mov	sp, r7
 8003916:	bc80      	pop	{r7}
 8003918:	4770      	bx	lr

0800391a <LL_RCC_ForceBackupDomainReset>:
{
 800391a:	b480      	push	{r7}
 800391c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800391e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003926:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800392a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800392e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003932:	bf00      	nop
 8003934:	46bd      	mov	sp, r7
 8003936:	bc80      	pop	{r7}
 8003938:	4770      	bx	lr

0800393a <LL_RCC_ReleaseBackupDomainReset>:
{
 800393a:	b480      	push	{r7}
 800393c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800393e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003946:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800394a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800394e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8003952:	bf00      	nop
 8003954:	46bd      	mov	sp, r7
 8003956:	bc80      	pop	{r7}
 8003958:	4770      	bx	lr
	...

0800395c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8003964:	2300      	movs	r3, #0
 8003966:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003968:	2300      	movs	r3, #0
 800396a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800396c:	2300      	movs	r3, #0
 800396e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d058      	beq.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 800397c:	f7fe fd62 	bl	8002444 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003980:	f7fd f9ac 	bl	8000cdc <HAL_GetTick>
 8003984:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003986:	e009      	b.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003988:	f7fd f9a8 	bl	8000cdc <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d902      	bls.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	74fb      	strb	r3, [r7, #19]
        break;
 800399a:	e006      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800399c:	4b7b      	ldr	r3, [pc, #492]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039a8:	d1ee      	bne.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80039aa:	7cfb      	ldrb	r3, [r7, #19]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d13c      	bne.n	8003a2a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80039b0:	f7ff ffa7 	bl	8003902 <LL_RCC_GetRTCClockSource>
 80039b4:	4602      	mov	r2, r0
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d00f      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039ca:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039cc:	f7ff ffa5 	bl	800391a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039d0:	f7ff ffb3 	bl	800393a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d014      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e8:	f7fd f978 	bl	8000cdc <HAL_GetTick>
 80039ec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80039ee:	e00b      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039f0:	f7fd f974 	bl	8000cdc <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d902      	bls.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	74fb      	strb	r3, [r7, #19]
            break;
 8003a06:	e004      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8003a08:	f7ff feb4 	bl	8003774 <LL_RCC_LSE_IsReady>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d1ee      	bne.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8003a12:	7cfb      	ldrb	r3, [r7, #19]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d105      	bne.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff ff5b 	bl	80038d8 <LL_RCC_SetRTCClockSource>
 8003a22:	e004      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a24:	7cfb      	ldrb	r3, [r7, #19]
 8003a26:	74bb      	strb	r3, [r7, #18]
 8003a28:	e001      	b.n	8003a2e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a2a:	7cfb      	ldrb	r3, [r7, #19]
 8003a2c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0301 	and.w	r3, r3, #1
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d004      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f7ff fea9 	bl	8003796 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d004      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	4618      	mov	r0, r3
 8003a56:	f7ff fe9e 	bl	8003796 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0320 	and.w	r3, r3, #32
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d004      	beq.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7ff fec0 	bl	80037f0 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d004      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff fee6 	bl	8003852 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d004      	beq.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff fedb 	bl	8003852 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d004      	beq.n	8003ab2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aac:	4618      	mov	r0, r3
 8003aae:	f7ff fed0 	bl	8003852 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d004      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	695b      	ldr	r3, [r3, #20]
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7ff fea9 	bl	800381a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d004      	beq.n	8003ade <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7ff fe9e 	bl	800381a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d004      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69db      	ldr	r3, [r3, #28]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff fe93 	bl	800381a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0310 	and.w	r3, r3, #16
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d011      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff fe5e 	bl	80037c6 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b12:	d107      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b18:	68db      	ldr	r3, [r3, #12]
 8003b1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b22:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d010      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff fea5 	bl	8003884 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d107      	bne.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b50:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d011      	beq.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7ff fea3 	bl	80038ae <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b70:	d107      	bne.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b80:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8003b82:	7cbb      	ldrb	r3, [r7, #18]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3718      	adds	r7, #24
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	58000400 	.word	0x58000400

08003b90 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d068      	beq.n	8003c74 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d106      	bne.n	8003bbc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7fc fec4 	bl	8000944 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003bc4:	4b2e      	ldr	r3, [pc, #184]	; (8003c80 <HAL_RTC_Init+0xf0>)
 8003bc6:	22ca      	movs	r2, #202	; 0xca
 8003bc8:	625a      	str	r2, [r3, #36]	; 0x24
 8003bca:	4b2d      	ldr	r3, [pc, #180]	; (8003c80 <HAL_RTC_Init+0xf0>)
 8003bcc:	2253      	movs	r2, #83	; 0x53
 8003bce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 fa0f 	bl	8003ff4 <RTC_EnterInitMode>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8003bda:	7bfb      	ldrb	r3, [r7, #15]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d13f      	bne.n	8003c60 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003be0:	4b27      	ldr	r3, [pc, #156]	; (8003c80 <HAL_RTC_Init+0xf0>)
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	4a26      	ldr	r2, [pc, #152]	; (8003c80 <HAL_RTC_Init+0xf0>)
 8003be6:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 8003bea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bee:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8003bf0:	4b23      	ldr	r3, [pc, #140]	; (8003c80 <HAL_RTC_Init+0xf0>)
 8003bf2:	699a      	ldr	r2, [r3, #24]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6859      	ldr	r1, [r3, #4]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	691b      	ldr	r3, [r3, #16]
 8003bfc:	4319      	orrs	r1, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	430b      	orrs	r3, r1
 8003c04:	491e      	ldr	r1, [pc, #120]	; (8003c80 <HAL_RTC_Init+0xf0>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68da      	ldr	r2, [r3, #12]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	041b      	lsls	r3, r3, #16
 8003c14:	491a      	ldr	r1, [pc, #104]	; (8003c80 <HAL_RTC_Init+0xf0>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8003c1a:	4b19      	ldr	r3, [pc, #100]	; (8003c80 <HAL_RTC_Init+0xf0>)
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2a:	430b      	orrs	r3, r1
 8003c2c:	4914      	ldr	r1, [pc, #80]	; (8003c80 <HAL_RTC_Init+0xf0>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f000 fa12 	bl	800405c <RTC_ExitInitMode>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8003c3c:	7bfb      	ldrb	r3, [r7, #15]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10e      	bne.n	8003c60 <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 8003c42:	4b0f      	ldr	r3, [pc, #60]	; (8003c80 <HAL_RTC_Init+0xf0>)
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a19      	ldr	r1, [r3, #32]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	4319      	orrs	r1, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	430b      	orrs	r3, r1
 8003c5a:	4909      	ldr	r1, [pc, #36]	; (8003c80 <HAL_RTC_Init+0xf0>)
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c60:	4b07      	ldr	r3, [pc, #28]	; (8003c80 <HAL_RTC_Init+0xf0>)
 8003c62:	22ff      	movs	r2, #255	; 0xff
 8003c64:	625a      	str	r2, [r3, #36]	; 0x24

    if (status == HAL_OK)
 8003c66:	7bfb      	ldrb	r3, [r7, #15]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d103      	bne.n	8003c74 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 8003c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40002800 	.word	0x40002800

08003c84 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8003c84:	b590      	push	{r4, r7, lr}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8003c90:	2300      	movs	r3, #0
 8003c92:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d101      	bne.n	8003ca2 <HAL_RTC_SetAlarm_IT+0x1e>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	e0f3      	b.n	8003e8a <HAL_RTC_SetAlarm_IT+0x206>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2202      	movs	r2, #2
 8003cae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8003cb2:	4b78      	ldr	r3, [pc, #480]	; (8003e94 <HAL_RTC_SetAlarm_IT+0x210>)
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cba:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cc2:	d06a      	beq.n	8003d9a <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d13a      	bne.n	8003d40 <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003cca:	4b72      	ldr	r3, [pc, #456]	; (8003e94 <HAL_RTC_SetAlarm_IT+0x210>)
 8003ccc:	699b      	ldr	r3, [r3, #24]
 8003cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d102      	bne.n	8003cdc <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f000 f9f5 	bl	80040d8 <RTC_ByteToBcd2>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	785b      	ldrb	r3, [r3, #1]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f000 f9ee 	bl	80040d8 <RTC_ByteToBcd2>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003d00:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	789b      	ldrb	r3, [r3, #2]
 8003d06:	4618      	mov	r0, r3
 8003d08:	f000 f9e6 	bl	80040d8 <RTC_ByteToBcd2>
 8003d0c:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003d0e:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	78db      	ldrb	r3, [r3, #3]
 8003d16:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003d18:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 f9d8 	bl	80040d8 <RTC_ByteToBcd2>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003d2c:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003d34:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	617b      	str	r3, [r7, #20]
 8003d3e:	e02c      	b.n	8003d9a <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	f1b3 3f80 	cmp.w	r3, #2155905152	; 0x80808080
 8003d48:	d00d      	beq.n	8003d66 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	695b      	ldr	r3, [r3, #20]
 8003d4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003d52:	d008      	beq.n	8003d66 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8003d54:	4b4f      	ldr	r3, [pc, #316]	; (8003e94 <HAL_RTC_SetAlarm_IT+0x210>)
 8003d56:	699b      	ldr	r3, [r3, #24]
 8003d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d102      	bne.n	8003d66 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003d60:	68bb      	ldr	r3, [r7, #8]
 8003d62:	2200      	movs	r2, #0
 8003d64:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	785b      	ldrb	r3, [r3, #1]
 8003d70:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003d72:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003d74:	68ba      	ldr	r2, [r7, #8]
 8003d76:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8003d78:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	78db      	ldrb	r3, [r3, #3]
 8003d7e:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8003d80:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d88:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8003d8a:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8003d90:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8003d96:	4313      	orrs	r3, r2
 8003d98:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d9a:	4b3e      	ldr	r3, [pc, #248]	; (8003e94 <HAL_RTC_SetAlarm_IT+0x210>)
 8003d9c:	22ca      	movs	r2, #202	; 0xca
 8003d9e:	625a      	str	r2, [r3, #36]	; 0x24
 8003da0:	4b3c      	ldr	r3, [pc, #240]	; (8003e94 <HAL_RTC_SetAlarm_IT+0x210>)
 8003da2:	2253      	movs	r2, #83	; 0x53
 8003da4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003daa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dae:	d12c      	bne.n	8003e0a <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003db0:	4b38      	ldr	r3, [pc, #224]	; (8003e94 <HAL_RTC_SetAlarm_IT+0x210>)
 8003db2:	699b      	ldr	r3, [r3, #24]
 8003db4:	4a37      	ldr	r2, [pc, #220]	; (8003e94 <HAL_RTC_SetAlarm_IT+0x210>)
 8003db6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003dba:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003dbc:	4b35      	ldr	r3, [pc, #212]	; (8003e94 <HAL_RTC_SetAlarm_IT+0x210>)
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dc8:	d107      	bne.n	8003dda <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	699a      	ldr	r2, [r3, #24]
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	69db      	ldr	r3, [r3, #28]
 8003dd2:	4930      	ldr	r1, [pc, #192]	; (8003e94 <HAL_RTC_SetAlarm_IT+0x210>)
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	644b      	str	r3, [r1, #68]	; 0x44
 8003dd8:	e006      	b.n	8003de8 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8003dda:	4a2e      	ldr	r2, [pc, #184]	; (8003e94 <HAL_RTC_SetAlarm_IT+0x210>)
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	6413      	str	r3, [r2, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8003de0:	4a2c      	ldr	r2, [pc, #176]	; (8003e94 <HAL_RTC_SetAlarm_IT+0x210>)
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	699b      	ldr	r3, [r3, #24]
 8003de6:	6453      	str	r3, [r2, #68]	; 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8003de8:	4a2a      	ldr	r2, [pc, #168]	; (8003e94 <HAL_RTC_SetAlarm_IT+0x210>)
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	6713      	str	r3, [r2, #112]	; 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df4:	f043 0201 	orr.w	r2, r3, #1
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003dfc:	4b25      	ldr	r3, [pc, #148]	; (8003e94 <HAL_RTC_SetAlarm_IT+0x210>)
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	4a24      	ldr	r2, [pc, #144]	; (8003e94 <HAL_RTC_SetAlarm_IT+0x210>)
 8003e02:	f443 5388 	orr.w	r3, r3, #4352	; 0x1100
 8003e06:	6193      	str	r3, [r2, #24]
 8003e08:	e02b      	b.n	8003e62 <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003e0a:	4b22      	ldr	r3, [pc, #136]	; (8003e94 <HAL_RTC_SetAlarm_IT+0x210>)
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	4a21      	ldr	r2, [pc, #132]	; (8003e94 <HAL_RTC_SetAlarm_IT+0x210>)
 8003e10:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8003e14:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8003e16:	4b1f      	ldr	r3, [pc, #124]	; (8003e94 <HAL_RTC_SetAlarm_IT+0x210>)
 8003e18:	2202      	movs	r2, #2
 8003e1a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e22:	d107      	bne.n	8003e34 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	699a      	ldr	r2, [r3, #24]
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	69db      	ldr	r3, [r3, #28]
 8003e2c:	4919      	ldr	r1, [pc, #100]	; (8003e94 <HAL_RTC_SetAlarm_IT+0x210>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003e32:	e006      	b.n	8003e42 <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8003e34:	4a17      	ldr	r2, [pc, #92]	; (8003e94 <HAL_RTC_SetAlarm_IT+0x210>)
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	6493      	str	r3, [r2, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8003e3a:	4a16      	ldr	r2, [pc, #88]	; (8003e94 <HAL_RTC_SetAlarm_IT+0x210>)
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	699b      	ldr	r3, [r3, #24]
 8003e40:	64d3      	str	r3, [r2, #76]	; 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 8003e42:	4a14      	ldr	r2, [pc, #80]	; (8003e94 <HAL_RTC_SetAlarm_IT+0x210>)
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	6753      	str	r3, [r2, #116]	; 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4e:	f043 0202 	orr.w	r2, r3, #2
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	631a      	str	r2, [r3, #48]	; 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003e56:	4b0f      	ldr	r3, [pc, #60]	; (8003e94 <HAL_RTC_SetAlarm_IT+0x210>)
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	4a0e      	ldr	r2, [pc, #56]	; (8003e94 <HAL_RTC_SetAlarm_IT+0x210>)
 8003e5c:	f443 5308 	orr.w	r3, r3, #8704	; 0x2200
 8003e60:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003e62:	4b0d      	ldr	r3, [pc, #52]	; (8003e98 <HAL_RTC_SetAlarm_IT+0x214>)
 8003e64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e68:	4a0b      	ldr	r2, [pc, #44]	; (8003e98 <HAL_RTC_SetAlarm_IT+0x214>)
 8003e6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e6e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e72:	4b08      	ldr	r3, [pc, #32]	; (8003e94 <HAL_RTC_SetAlarm_IT+0x210>)
 8003e74:	22ff      	movs	r2, #255	; 0xff
 8003e76:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	371c      	adds	r7, #28
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd90      	pop	{r4, r7, pc}
 8003e92:	bf00      	nop
 8003e94:	40002800 	.word	0x40002800
 8003e98:	58000800 	.word	0x58000800

08003e9c <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d101      	bne.n	8003eb4 <HAL_RTC_DeactivateAlarm+0x18>
 8003eb0:	2302      	movs	r3, #2
 8003eb2:	e048      	b.n	8003f46 <HAL_RTC_DeactivateAlarm+0xaa>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2202      	movs	r2, #2
 8003ec0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ec4:	4b22      	ldr	r3, [pc, #136]	; (8003f50 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003ec6:	22ca      	movs	r2, #202	; 0xca
 8003ec8:	625a      	str	r2, [r3, #36]	; 0x24
 8003eca:	4b21      	ldr	r3, [pc, #132]	; (8003f50 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003ecc:	2253      	movs	r2, #83	; 0x53
 8003ece:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ed6:	d115      	bne.n	8003f04 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003ed8:	4b1d      	ldr	r3, [pc, #116]	; (8003f50 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	4a1c      	ldr	r2, [pc, #112]	; (8003f50 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003ede:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003ee2:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8003ee4:	4b1a      	ldr	r3, [pc, #104]	; (8003f50 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee8:	4a19      	ldr	r2, [pc, #100]	; (8003f50 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003eea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003eee:	6453      	str	r3, [r2, #68]	; 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef4:	f023 0201 	bic.w	r2, r3, #1
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003efc:	4b14      	ldr	r3, [pc, #80]	; (8003f50 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003efe:	2201      	movs	r2, #1
 8003f00:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f02:	e014      	b.n	8003f2e <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003f04:	4b12      	ldr	r3, [pc, #72]	; (8003f50 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003f06:	699b      	ldr	r3, [r3, #24]
 8003f08:	4a11      	ldr	r2, [pc, #68]	; (8003f50 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003f0a:	f423 5308 	bic.w	r3, r3, #8704	; 0x2200
 8003f0e:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8003f10:	4b0f      	ldr	r3, [pc, #60]	; (8003f50 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f14:	4a0e      	ldr	r2, [pc, #56]	; (8003f50 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003f16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f1a:	64d3      	str	r3, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f20:	f023 0202 	bic.w	r2, r3, #2
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	631a      	str	r2, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8003f28:	4b09      	ldr	r3, [pc, #36]	; (8003f50 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f2e:	4b08      	ldr	r3, [pc, #32]	; (8003f50 <HAL_RTC_DeactivateAlarm+0xb4>)
 8003f30:	22ff      	movs	r2, #255	; 0xff
 8003f32:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2201      	movs	r2, #1
 8003f38:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bc80      	pop	{r7}
 8003f4e:	4770      	bx	lr
 8003f50:	40002800 	.word	0x40002800

08003f54 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8003f5c:	4b11      	ldr	r3, [pc, #68]	; (8003fa4 <HAL_RTC_AlarmIRQHandler+0x50>)
 8003f5e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f64:	4013      	ands	r3, r2
 8003f66:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d005      	beq.n	8003f7e <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003f72:	4b0c      	ldr	r3, [pc, #48]	; (8003fa4 <HAL_RTC_AlarmIRQHandler+0x50>)
 8003f74:	2201      	movs	r2, #1
 8003f76:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7fd f85d 	bl	8001038 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	f003 0302 	and.w	r3, r3, #2
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d005      	beq.n	8003f94 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8003f88:	4b06      	ldr	r3, [pc, #24]	; (8003fa4 <HAL_RTC_AlarmIRQHandler+0x50>)
 8003f8a:	2202      	movs	r2, #2
 8003f8c:	65da      	str	r2, [r3, #92]	; 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f94a 	bl	8004228 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 8003f9c:	bf00      	nop
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	40002800 	.word	0x40002800

08003fa8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8003fb0:	4b0f      	ldr	r3, [pc, #60]	; (8003ff0 <HAL_RTC_WaitForSynchro+0x48>)
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	4a0e      	ldr	r2, [pc, #56]	; (8003ff0 <HAL_RTC_WaitForSynchro+0x48>)
 8003fb6:	f023 0320 	bic.w	r3, r3, #32
 8003fba:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8003fbc:	f7fc fe8e 	bl	8000cdc <HAL_GetTick>
 8003fc0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003fc2:	e009      	b.n	8003fd8 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003fc4:	f7fc fe8a 	bl	8000cdc <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003fd2:	d901      	bls.n	8003fd8 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e006      	b.n	8003fe6 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003fd8:	4b05      	ldr	r3, [pc, #20]	; (8003ff0 <HAL_RTC_WaitForSynchro+0x48>)
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	f003 0320 	and.w	r3, r3, #32
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d0ef      	beq.n	8003fc4 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003fe4:	2300      	movs	r3, #0
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	40002800 	.word	0x40002800

08003ff4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8004000:	4b15      	ldr	r3, [pc, #84]	; (8004058 <RTC_EnterInitMode+0x64>)
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004008:	2b00      	cmp	r3, #0
 800400a:	d120      	bne.n	800404e <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800400c:	4b12      	ldr	r3, [pc, #72]	; (8004058 <RTC_EnterInitMode+0x64>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	4a11      	ldr	r2, [pc, #68]	; (8004058 <RTC_EnterInitMode+0x64>)
 8004012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004016:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8004018:	f7fc fe60 	bl	8000cdc <HAL_GetTick>
 800401c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800401e:	e00d      	b.n	800403c <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8004020:	f7fc fe5c 	bl	8000cdc <HAL_GetTick>
 8004024:	4602      	mov	r2, r0
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	1ad3      	subs	r3, r2, r3
 800402a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800402e:	d905      	bls.n	800403c <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2203      	movs	r2, #3
 8004038:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800403c:	4b06      	ldr	r3, [pc, #24]	; (8004058 <RTC_EnterInitMode+0x64>)
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004044:	2b00      	cmp	r3, #0
 8004046:	d102      	bne.n	800404e <RTC_EnterInitMode+0x5a>
 8004048:	7bfb      	ldrb	r3, [r7, #15]
 800404a:	2b03      	cmp	r3, #3
 800404c:	d1e8      	bne.n	8004020 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800404e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004050:	4618      	mov	r0, r3
 8004052:	3710      	adds	r7, #16
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	40002800 	.word	0x40002800

0800405c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b084      	sub	sp, #16
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004064:	2300      	movs	r3, #0
 8004066:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8004068:	4b1a      	ldr	r3, [pc, #104]	; (80040d4 <RTC_ExitInitMode+0x78>)
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	4a19      	ldr	r2, [pc, #100]	; (80040d4 <RTC_ExitInitMode+0x78>)
 800406e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004072:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004074:	4b17      	ldr	r3, [pc, #92]	; (80040d4 <RTC_ExitInitMode+0x78>)
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	f003 0320 	and.w	r3, r3, #32
 800407c:	2b00      	cmp	r3, #0
 800407e:	d10c      	bne.n	800409a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f7ff ff91 	bl	8003fa8 <HAL_RTC_WaitForSynchro>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d01e      	beq.n	80040ca <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2203      	movs	r2, #3
 8004090:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	73fb      	strb	r3, [r7, #15]
 8004098:	e017      	b.n	80040ca <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800409a:	4b0e      	ldr	r3, [pc, #56]	; (80040d4 <RTC_ExitInitMode+0x78>)
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	4a0d      	ldr	r2, [pc, #52]	; (80040d4 <RTC_ExitInitMode+0x78>)
 80040a0:	f023 0320 	bic.w	r3, r3, #32
 80040a4:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7ff ff7e 	bl	8003fa8 <HAL_RTC_WaitForSynchro>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d005      	beq.n	80040be <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2203      	movs	r2, #3
 80040b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80040be:	4b05      	ldr	r3, [pc, #20]	; (80040d4 <RTC_ExitInitMode+0x78>)
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	4a04      	ldr	r2, [pc, #16]	; (80040d4 <RTC_ExitInitMode+0x78>)
 80040c4:	f043 0320 	orr.w	r3, r3, #32
 80040c8:	6193      	str	r3, [r2, #24]
  }

  return status;
 80040ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	40002800 	.word	0x40002800

080040d8 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	4603      	mov	r3, r0
 80040e0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80040e2:	2300      	movs	r3, #0
 80040e4:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 80040e6:	79fb      	ldrb	r3, [r7, #7]
 80040e8:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 80040ea:	e005      	b.n	80040f8 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	3301      	adds	r3, #1
 80040f0:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 80040f2:	7afb      	ldrb	r3, [r7, #11]
 80040f4:	3b0a      	subs	r3, #10
 80040f6:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 80040f8:	7afb      	ldrb	r3, [r7, #11]
 80040fa:	2b09      	cmp	r3, #9
 80040fc:	d8f6      	bhi.n	80040ec <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	b2db      	uxtb	r3, r3
 8004102:	011b      	lsls	r3, r3, #4
 8004104:	b2da      	uxtb	r2, r3
 8004106:	7afb      	ldrb	r3, [r7, #11]
 8004108:	4313      	orrs	r3, r2
 800410a:	b2db      	uxtb	r3, r3
}
 800410c:	4618      	mov	r0, r3
 800410e:	3714      	adds	r7, #20
 8004110:	46bd      	mov	sp, r7
 8004112:	bc80      	pop	{r7}
 8004114:	4770      	bx	lr
	...

08004118 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8004118:	b480      	push	{r7}
 800411a:	b083      	sub	sp, #12
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004126:	2b01      	cmp	r3, #1
 8004128:	d101      	bne.n	800412e <HAL_RTCEx_EnableBypassShadow+0x16>
 800412a:	2302      	movs	r3, #2
 800412c:	e01f      	b.n	800416e <HAL_RTCEx_EnableBypassShadow+0x56>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2201      	movs	r2, #1
 8004132:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2202      	movs	r2, #2
 800413a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800413e:	4b0e      	ldr	r3, [pc, #56]	; (8004178 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004140:	22ca      	movs	r2, #202	; 0xca
 8004142:	625a      	str	r2, [r3, #36]	; 0x24
 8004144:	4b0c      	ldr	r3, [pc, #48]	; (8004178 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004146:	2253      	movs	r2, #83	; 0x53
 8004148:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800414a:	4b0b      	ldr	r3, [pc, #44]	; (8004178 <HAL_RTCEx_EnableBypassShadow+0x60>)
 800414c:	699b      	ldr	r3, [r3, #24]
 800414e:	4a0a      	ldr	r2, [pc, #40]	; (8004178 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004150:	f043 0320 	orr.w	r3, r3, #32
 8004154:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004156:	4b08      	ldr	r3, [pc, #32]	; (8004178 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8004158:	22ff      	movs	r2, #255	; 0xff
 800415a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	bc80      	pop	{r7}
 8004176:	4770      	bx	lr
 8004178:	40002800 	.word	0x40002800

0800417c <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800418a:	2b01      	cmp	r3, #1
 800418c:	d101      	bne.n	8004192 <HAL_RTCEx_SetSSRU_IT+0x16>
 800418e:	2302      	movs	r3, #2
 8004190:	e027      	b.n	80041e2 <HAL_RTCEx_SetSSRU_IT+0x66>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2201      	movs	r2, #1
 8004196:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2202      	movs	r2, #2
 800419e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041a2:	4b12      	ldr	r3, [pc, #72]	; (80041ec <HAL_RTCEx_SetSSRU_IT+0x70>)
 80041a4:	22ca      	movs	r2, #202	; 0xca
 80041a6:	625a      	str	r2, [r3, #36]	; 0x24
 80041a8:	4b10      	ldr	r3, [pc, #64]	; (80041ec <HAL_RTCEx_SetSSRU_IT+0x70>)
 80041aa:	2253      	movs	r2, #83	; 0x53
 80041ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80041ae:	4b0f      	ldr	r3, [pc, #60]	; (80041ec <HAL_RTCEx_SetSSRU_IT+0x70>)
 80041b0:	699b      	ldr	r3, [r3, #24]
 80041b2:	4a0e      	ldr	r2, [pc, #56]	; (80041ec <HAL_RTCEx_SetSSRU_IT+0x70>)
 80041b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041b8:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80041ba:	4b0d      	ldr	r3, [pc, #52]	; (80041f0 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80041bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041c0:	4a0b      	ldr	r2, [pc, #44]	; (80041f0 <HAL_RTCEx_SetSSRU_IT+0x74>)
 80041c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041c6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041ca:	4b08      	ldr	r3, [pc, #32]	; (80041ec <HAL_RTCEx_SetSSRU_IT+0x70>)
 80041cc:	22ff      	movs	r2, #255	; 0xff
 80041ce:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	370c      	adds	r7, #12
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bc80      	pop	{r7}
 80041ea:	4770      	bx	lr
 80041ec:	40002800 	.word	0x40002800
 80041f0:	58000800 	.word	0x58000800

080041f4 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 80041fc:	4b09      	ldr	r3, [pc, #36]	; (8004224 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 80041fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004204:	2b00      	cmp	r3, #0
 8004206:	d005      	beq.n	8004214 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8004208:	4b06      	ldr	r3, [pc, #24]	; (8004224 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 800420a:	2240      	movs	r2, #64	; 0x40
 800420c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 800420e:	6878      	ldr	r0, [r7, #4]
 8004210:	f7fc ff1c 	bl	800104c <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
}
 800421c:	bf00      	nop
 800421e:	3708      	adds	r7, #8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	40002800 	.word	0x40002800

08004228 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004230:	bf00      	nop
 8004232:	370c      	adds	r7, #12
 8004234:	46bd      	mov	sp, r7
 8004236:	bc80      	pop	{r7}
 8004238:	4770      	bx	lr
	...

0800423c <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8004248:	4b07      	ldr	r3, [pc, #28]	; (8004268 <HAL_RTCEx_BKUPWrite+0x2c>)
 800424a:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	697a      	ldr	r2, [r7, #20]
 8004252:	4413      	add	r3, r2
 8004254:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	601a      	str	r2, [r3, #0]
}
 800425c:	bf00      	nop
 800425e:	371c      	adds	r7, #28
 8004260:	46bd      	mov	sp, r7
 8004262:	bc80      	pop	{r7}
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	4000b100 	.word	0x4000b100

0800426c <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8004276:	4b07      	ldr	r3, [pc, #28]	; (8004294 <HAL_RTCEx_BKUPRead+0x28>)
 8004278:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	68fa      	ldr	r2, [r7, #12]
 8004280:	4413      	add	r3, r2
 8004282:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
}
 8004288:	4618      	mov	r0, r3
 800428a:	3714      	adds	r7, #20
 800428c:	46bd      	mov	sp, r7
 800428e:	bc80      	pop	{r7}
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	4000b100 	.word	0x4000b100

08004298 <LL_PWR_SetRadioBusyTrigger>:
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 80042a0:	4b06      	ldr	r3, [pc, #24]	; (80042bc <LL_PWR_SetRadioBusyTrigger+0x24>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80042a8:	4904      	ldr	r1, [pc, #16]	; (80042bc <LL_PWR_SetRadioBusyTrigger+0x24>)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	4313      	orrs	r3, r2
 80042ae:	608b      	str	r3, [r1, #8]
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bc80      	pop	{r7}
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	58000400 	.word	0x58000400

080042c0 <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80042c4:	4b05      	ldr	r3, [pc, #20]	; (80042dc <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80042c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ca:	4a04      	ldr	r2, [pc, #16]	; (80042dc <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 80042cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80042d4:	bf00      	nop
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bc80      	pop	{r7}
 80042da:	4770      	bx	lr
 80042dc:	58000400 	.word	0x58000400

080042e0 <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 80042e0:	b480      	push	{r7}
 80042e2:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80042e4:	4b05      	ldr	r3, [pc, #20]	; (80042fc <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80042e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ea:	4a04      	ldr	r2, [pc, #16]	; (80042fc <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 80042ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80042f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80042f4:	bf00      	nop
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bc80      	pop	{r7}
 80042fa:	4770      	bx	lr
 80042fc:	58000400 	.word	0x58000400

08004300 <LL_PWR_ClearFlag_RFBUSY>:
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8004304:	4b03      	ldr	r3, [pc, #12]	; (8004314 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8004306:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800430a:	619a      	str	r2, [r3, #24]
}
 800430c:	bf00      	nop
 800430e:	46bd      	mov	sp, r7
 8004310:	bc80      	pop	{r7}
 8004312:	4770      	bx	lr
 8004314:	58000400 	.word	0x58000400

08004318 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800431c:	4b06      	ldr	r3, [pc, #24]	; (8004338 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b02      	cmp	r3, #2
 8004326:	d101      	bne.n	800432c <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8004328:	2301      	movs	r3, #1
 800432a:	e000      	b.n	800432e <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	46bd      	mov	sp, r7
 8004332:	bc80      	pop	{r7}
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	58000400 	.word	0x58000400

0800433c <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 800433c:	b480      	push	{r7}
 800433e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8004340:	4b06      	ldr	r3, [pc, #24]	; (800435c <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	f003 0304 	and.w	r3, r3, #4
 8004348:	2b04      	cmp	r3, #4
 800434a:	d101      	bne.n	8004350 <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 800434c:	2301      	movs	r3, #1
 800434e:	e000      	b.n	8004352 <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	46bd      	mov	sp, r7
 8004356:	bc80      	pop	{r7}
 8004358:	4770      	bx	lr
 800435a:	bf00      	nop
 800435c:	58000400 	.word	0x58000400

08004360 <LL_RCC_RF_DisableReset>:
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8004364:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004368:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800436c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8004370:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004374:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8004378:	bf00      	nop
 800437a:	46bd      	mov	sp, r7
 800437c:	bc80      	pop	{r7}
 800437e:	4770      	bx	lr

08004380 <LL_RCC_IsRFUnderReset>:
{
 8004380:	b480      	push	{r7}
 8004382:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8004384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004388:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800438c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004390:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004394:	d101      	bne.n	800439a <LL_RCC_IsRFUnderReset+0x1a>
 8004396:	2301      	movs	r3, #1
 8004398:	e000      	b.n	800439c <LL_RCC_IsRFUnderReset+0x1c>
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	46bd      	mov	sp, r7
 80043a0:	bc80      	pop	{r7}
 80043a2:	4770      	bx	lr

080043a4 <LL_EXTI_EnableIT_32_63>:
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80043ac:	4b06      	ldr	r3, [pc, #24]	; (80043c8 <LL_EXTI_EnableIT_32_63+0x24>)
 80043ae:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80043b2:	4905      	ldr	r1, [pc, #20]	; (80043c8 <LL_EXTI_EnableIT_32_63+0x24>)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bc80      	pop	{r7}
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	58000800 	.word	0x58000800

080043cc <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b084      	sub	sp, #16
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d103      	bne.n	80043e2 <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	73fb      	strb	r3, [r7, #15]
    return status;
 80043de:	7bfb      	ldrb	r3, [r7, #15]
 80043e0:	e04b      	b.n	800447a <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 80043e2:	2300      	movs	r3, #0
 80043e4:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	799b      	ldrb	r3, [r3, #6]
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d105      	bne.n	80043fc <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7fc fae0 	bl	80009bc <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8004402:	f7ff ffad 	bl	8004360 <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004406:	4b1f      	ldr	r3, [pc, #124]	; (8004484 <HAL_SUBGHZ_Init+0xb8>)
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	4613      	mov	r3, r2
 800440c:	00db      	lsls	r3, r3, #3
 800440e:	1a9b      	subs	r3, r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	0cdb      	lsrs	r3, r3, #19
 8004414:	2264      	movs	r2, #100	; 0x64
 8004416:	fb02 f303 	mul.w	r3, r2, r3
 800441a:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d105      	bne.n	800442e <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	609a      	str	r2, [r3, #8]
      break;
 800442c:	e007      	b.n	800443e <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	3b01      	subs	r3, #1
 8004432:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8004434:	f7ff ffa4 	bl	8004380 <LL_RCC_IsRFUnderReset>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1ee      	bne.n	800441c <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 800443e:	f7ff ff3f 	bl	80042c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8004442:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004446:	f7ff ffad 	bl	80043a4 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 800444a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800444e:	f7ff ff23 	bl	8004298 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8004452:	f7ff ff55 	bl	8004300 <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8004456:	7bfb      	ldrb	r3, [r7, #15]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10a      	bne.n	8004472 <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4618      	mov	r0, r3
 8004462:	f000 faad 	bl	80049c0 <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	719a      	strb	r2, [r3, #6]

  return status;
 8004478:	7bfb      	ldrb	r3, [r7, #15]
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20000000 	.word	0x20000000

08004488 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b086      	sub	sp, #24
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	607a      	str	r2, [r7, #4]
 8004492:	461a      	mov	r2, r3
 8004494:	460b      	mov	r3, r1
 8004496:	817b      	strh	r3, [r7, #10]
 8004498:	4613      	mov	r3, r2
 800449a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	799b      	ldrb	r3, [r3, #6]
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d14a      	bne.n	800453c <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	795b      	ldrb	r3, [r3, #5]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d101      	bne.n	80044b2 <HAL_SUBGHZ_WriteRegisters+0x2a>
 80044ae:	2302      	movs	r3, #2
 80044b0:	e045      	b.n	800453e <HAL_SUBGHZ_WriteRegisters+0xb6>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2201      	movs	r2, #1
 80044b6:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	2202      	movs	r2, #2
 80044bc:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f000 fb4c 	bl	8004b5c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80044c4:	f7ff ff0c 	bl	80042e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 80044c8:	210d      	movs	r1, #13
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 fa98 	bl	8004a00 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80044d0:	897b      	ldrh	r3, [r7, #10]
 80044d2:	0a1b      	lsrs	r3, r3, #8
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	4619      	mov	r1, r3
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 fa90 	bl	8004a00 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80044e0:	897b      	ldrh	r3, [r7, #10]
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	4619      	mov	r1, r3
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f000 fa8a 	bl	8004a00 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80044ec:	2300      	movs	r3, #0
 80044ee:	82bb      	strh	r3, [r7, #20]
 80044f0:	e00a      	b.n	8004508 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80044f2:	8abb      	ldrh	r3, [r7, #20]
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	4413      	add	r3, r2
 80044f8:	781b      	ldrb	r3, [r3, #0]
 80044fa:	4619      	mov	r1, r3
 80044fc:	68f8      	ldr	r0, [r7, #12]
 80044fe:	f000 fa7f 	bl	8004a00 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004502:	8abb      	ldrh	r3, [r7, #20]
 8004504:	3301      	adds	r3, #1
 8004506:	82bb      	strh	r3, [r7, #20]
 8004508:	8aba      	ldrh	r2, [r7, #20]
 800450a:	893b      	ldrh	r3, [r7, #8]
 800450c:	429a      	cmp	r2, r3
 800450e:	d3f0      	bcc.n	80044f2 <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004510:	f7ff fed6 	bl	80042c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004514:	68f8      	ldr	r0, [r7, #12]
 8004516:	f000 fb45 	bl	8004ba4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	75fb      	strb	r3, [r7, #23]
 8004526:	e001      	b.n	800452c <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8004528:	2300      	movs	r3, #0
 800452a:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2201      	movs	r2, #1
 8004530:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	715a      	strb	r2, [r3, #5]

    return status;
 8004538:	7dfb      	ldrb	r3, [r7, #23]
 800453a:	e000      	b.n	800453e <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 800453c:	2302      	movs	r3, #2
  }
}
 800453e:	4618      	mov	r0, r3
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b088      	sub	sp, #32
 800454a:	af00      	add	r7, sp, #0
 800454c:	60f8      	str	r0, [r7, #12]
 800454e:	607a      	str	r2, [r7, #4]
 8004550:	461a      	mov	r2, r3
 8004552:	460b      	mov	r3, r1
 8004554:	817b      	strh	r3, [r7, #10]
 8004556:	4613      	mov	r3, r2
 8004558:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	799b      	ldrb	r3, [r3, #6]
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b01      	cmp	r3, #1
 8004566:	d14a      	bne.n	80045fe <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	795b      	ldrb	r3, [r3, #5]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d101      	bne.n	8004574 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8004570:	2302      	movs	r3, #2
 8004572:	e045      	b.n	8004600 <HAL_SUBGHZ_ReadRegisters+0xba>
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2201      	movs	r2, #1
 8004578:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	f000 faee 	bl	8004b5c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004580:	f7ff feae 	bl	80042e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8004584:	211d      	movs	r1, #29
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f000 fa3a 	bl	8004a00 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800458c:	897b      	ldrh	r3, [r7, #10]
 800458e:	0a1b      	lsrs	r3, r3, #8
 8004590:	b29b      	uxth	r3, r3
 8004592:	b2db      	uxtb	r3, r3
 8004594:	4619      	mov	r1, r3
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 fa32 	bl	8004a00 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800459c:	897b      	ldrh	r3, [r7, #10]
 800459e:	b2db      	uxtb	r3, r3
 80045a0:	4619      	mov	r1, r3
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f000 fa2c 	bl	8004a00 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80045a8:	2100      	movs	r1, #0
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 fa28 	bl	8004a00 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80045b0:	2300      	movs	r3, #0
 80045b2:	82fb      	strh	r3, [r7, #22]
 80045b4:	e009      	b.n	80045ca <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80045b6:	69b9      	ldr	r1, [r7, #24]
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 fa77 	bl	8004aac <SUBGHZSPI_Receive>
      pData++;
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	3301      	adds	r3, #1
 80045c2:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80045c4:	8afb      	ldrh	r3, [r7, #22]
 80045c6:	3301      	adds	r3, #1
 80045c8:	82fb      	strh	r3, [r7, #22]
 80045ca:	8afa      	ldrh	r2, [r7, #22]
 80045cc:	893b      	ldrh	r3, [r7, #8]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d3f1      	bcc.n	80045b6 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80045d2:	f7ff fe75 	bl	80042c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f000 fae4 	bl	8004ba4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d002      	beq.n	80045ea <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	77fb      	strb	r3, [r7, #31]
 80045e8:	e001      	b.n	80045ee <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 80045ea:	2300      	movs	r3, #0
 80045ec:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2201      	movs	r2, #1
 80045f2:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	715a      	strb	r2, [r3, #5]

    return status;
 80045fa:	7ffb      	ldrb	r3, [r7, #31]
 80045fc:	e000      	b.n	8004600 <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 80045fe:	2302      	movs	r3, #2
  }
}
 8004600:	4618      	mov	r0, r3
 8004602:	3720      	adds	r7, #32
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}

08004608 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b086      	sub	sp, #24
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	607a      	str	r2, [r7, #4]
 8004612:	461a      	mov	r2, r3
 8004614:	460b      	mov	r3, r1
 8004616:	72fb      	strb	r3, [r7, #11]
 8004618:	4613      	mov	r3, r2
 800461a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	799b      	ldrb	r3, [r3, #6]
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b01      	cmp	r3, #1
 8004624:	d14a      	bne.n	80046bc <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	795b      	ldrb	r3, [r3, #5]
 800462a:	2b01      	cmp	r3, #1
 800462c:	d101      	bne.n	8004632 <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800462e:	2302      	movs	r3, #2
 8004630:	e045      	b.n	80046be <HAL_SUBGHZ_ExecSetCmd+0xb6>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2201      	movs	r2, #1
 8004636:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004638:	68f8      	ldr	r0, [r7, #12]
 800463a:	f000 fa8f 	bl	8004b5c <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800463e:	7afb      	ldrb	r3, [r7, #11]
 8004640:	2b84      	cmp	r3, #132	; 0x84
 8004642:	d002      	beq.n	800464a <HAL_SUBGHZ_ExecSetCmd+0x42>
 8004644:	7afb      	ldrb	r3, [r7, #11]
 8004646:	2b94      	cmp	r3, #148	; 0x94
 8004648:	d103      	bne.n	8004652 <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2201      	movs	r2, #1
 800464e:	711a      	strb	r2, [r3, #4]
 8004650:	e002      	b.n	8004658 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004658:	f7ff fe42 	bl	80042e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800465c:	7afb      	ldrb	r3, [r7, #11]
 800465e:	4619      	mov	r1, r3
 8004660:	68f8      	ldr	r0, [r7, #12]
 8004662:	f000 f9cd 	bl	8004a00 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004666:	2300      	movs	r3, #0
 8004668:	82bb      	strh	r3, [r7, #20]
 800466a:	e00a      	b.n	8004682 <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800466c:	8abb      	ldrh	r3, [r7, #20]
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	4413      	add	r3, r2
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	4619      	mov	r1, r3
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f000 f9c2 	bl	8004a00 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800467c:	8abb      	ldrh	r3, [r7, #20]
 800467e:	3301      	adds	r3, #1
 8004680:	82bb      	strh	r3, [r7, #20]
 8004682:	8aba      	ldrh	r2, [r7, #20]
 8004684:	893b      	ldrh	r3, [r7, #8]
 8004686:	429a      	cmp	r2, r3
 8004688:	d3f0      	bcc.n	800466c <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800468a:	f7ff fe19 	bl	80042c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 800468e:	7afb      	ldrb	r3, [r7, #11]
 8004690:	2b84      	cmp	r3, #132	; 0x84
 8004692:	d002      	beq.n	800469a <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004694:	68f8      	ldr	r0, [r7, #12]
 8004696:	f000 fa85 	bl	8004ba4 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	75fb      	strb	r3, [r7, #23]
 80046a6:	e001      	b.n	80046ac <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 80046a8:	2300      	movs	r3, #0
 80046aa:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2201      	movs	r2, #1
 80046b0:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2200      	movs	r2, #0
 80046b6:	715a      	strb	r2, [r3, #5]

    return status;
 80046b8:	7dfb      	ldrb	r3, [r7, #23]
 80046ba:	e000      	b.n	80046be <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 80046bc:	2302      	movs	r3, #2
  }
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3718      	adds	r7, #24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}

080046c6 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 80046c6:	b580      	push	{r7, lr}
 80046c8:	b088      	sub	sp, #32
 80046ca:	af00      	add	r7, sp, #0
 80046cc:	60f8      	str	r0, [r7, #12]
 80046ce:	607a      	str	r2, [r7, #4]
 80046d0:	461a      	mov	r2, r3
 80046d2:	460b      	mov	r3, r1
 80046d4:	72fb      	strb	r3, [r7, #11]
 80046d6:	4613      	mov	r3, r2
 80046d8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	799b      	ldrb	r3, [r3, #6]
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d13d      	bne.n	8004764 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	795b      	ldrb	r3, [r3, #5]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d101      	bne.n	80046f4 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 80046f0:	2302      	movs	r3, #2
 80046f2:	e038      	b.n	8004766 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2201      	movs	r2, #1
 80046f8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f000 fa2e 	bl	8004b5c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004700:	f7ff fdee 	bl	80042e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8004704:	7afb      	ldrb	r3, [r7, #11]
 8004706:	4619      	mov	r1, r3
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f000 f979 	bl	8004a00 <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800470e:	2100      	movs	r1, #0
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f000 f975 	bl	8004a00 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8004716:	2300      	movs	r3, #0
 8004718:	82fb      	strh	r3, [r7, #22]
 800471a:	e009      	b.n	8004730 <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800471c:	69b9      	ldr	r1, [r7, #24]
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f000 f9c4 	bl	8004aac <SUBGHZSPI_Receive>
      pData++;
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	3301      	adds	r3, #1
 8004728:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 800472a:	8afb      	ldrh	r3, [r7, #22]
 800472c:	3301      	adds	r3, #1
 800472e:	82fb      	strh	r3, [r7, #22]
 8004730:	8afa      	ldrh	r2, [r7, #22]
 8004732:	893b      	ldrh	r3, [r7, #8]
 8004734:	429a      	cmp	r2, r3
 8004736:	d3f1      	bcc.n	800471c <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004738:	f7ff fdc2 	bl	80042c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 fa31 	bl	8004ba4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d002      	beq.n	8004750 <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	77fb      	strb	r3, [r7, #31]
 800474e:	e001      	b.n	8004754 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 8004750:	2300      	movs	r3, #0
 8004752:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2201      	movs	r2, #1
 8004758:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2200      	movs	r2, #0
 800475e:	715a      	strb	r2, [r3, #5]

    return status;
 8004760:	7ffb      	ldrb	r3, [r7, #31]
 8004762:	e000      	b.n	8004766 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004764:	2302      	movs	r3, #2
  }
}
 8004766:	4618      	mov	r0, r3
 8004768:	3720      	adds	r7, #32
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b086      	sub	sp, #24
 8004772:	af00      	add	r7, sp, #0
 8004774:	60f8      	str	r0, [r7, #12]
 8004776:	607a      	str	r2, [r7, #4]
 8004778:	461a      	mov	r2, r3
 800477a:	460b      	mov	r3, r1
 800477c:	72fb      	strb	r3, [r7, #11]
 800477e:	4613      	mov	r3, r2
 8004780:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	799b      	ldrb	r3, [r3, #6]
 8004786:	b2db      	uxtb	r3, r3
 8004788:	2b01      	cmp	r3, #1
 800478a:	d13e      	bne.n	800480a <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	795b      	ldrb	r3, [r3, #5]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d101      	bne.n	8004798 <HAL_SUBGHZ_WriteBuffer+0x2a>
 8004794:	2302      	movs	r3, #2
 8004796:	e039      	b.n	800480c <HAL_SUBGHZ_WriteBuffer+0x9e>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2201      	movs	r2, #1
 800479c:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800479e:	68f8      	ldr	r0, [r7, #12]
 80047a0:	f000 f9dc 	bl	8004b5c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80047a4:	f7ff fd9c 	bl	80042e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80047a8:	210e      	movs	r1, #14
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 f928 	bl	8004a00 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80047b0:	7afb      	ldrb	r3, [r7, #11]
 80047b2:	4619      	mov	r1, r3
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f000 f923 	bl	8004a00 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80047ba:	2300      	movs	r3, #0
 80047bc:	82bb      	strh	r3, [r7, #20]
 80047be:	e00a      	b.n	80047d6 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80047c0:	8abb      	ldrh	r3, [r7, #20]
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	4413      	add	r3, r2
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	4619      	mov	r1, r3
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 f918 	bl	8004a00 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80047d0:	8abb      	ldrh	r3, [r7, #20]
 80047d2:	3301      	adds	r3, #1
 80047d4:	82bb      	strh	r3, [r7, #20]
 80047d6:	8aba      	ldrh	r2, [r7, #20]
 80047d8:	893b      	ldrh	r3, [r7, #8]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d3f0      	bcc.n	80047c0 <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80047de:	f7ff fd6f 	bl	80042c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f000 f9de 	bl	8004ba4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d002      	beq.n	80047f6 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	75fb      	strb	r3, [r7, #23]
 80047f4:	e001      	b.n	80047fa <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 80047f6:	2300      	movs	r3, #0
 80047f8:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2201      	movs	r2, #1
 80047fe:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2200      	movs	r2, #0
 8004804:	715a      	strb	r2, [r3, #5]

    return status;
 8004806:	7dfb      	ldrb	r3, [r7, #23]
 8004808:	e000      	b.n	800480c <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800480a:	2302      	movs	r3, #2
  }
}
 800480c:	4618      	mov	r0, r3
 800480e:	3718      	adds	r7, #24
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}

08004814 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b088      	sub	sp, #32
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	607a      	str	r2, [r7, #4]
 800481e:	461a      	mov	r2, r3
 8004820:	460b      	mov	r3, r1
 8004822:	72fb      	strb	r3, [r7, #11]
 8004824:	4613      	mov	r3, r2
 8004826:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	799b      	ldrb	r3, [r3, #6]
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b01      	cmp	r3, #1
 8004834:	d141      	bne.n	80048ba <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	795b      	ldrb	r3, [r3, #5]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d101      	bne.n	8004842 <HAL_SUBGHZ_ReadBuffer+0x2e>
 800483e:	2302      	movs	r3, #2
 8004840:	e03c      	b.n	80048bc <HAL_SUBGHZ_ReadBuffer+0xa8>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2201      	movs	r2, #1
 8004846:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004848:	68f8      	ldr	r0, [r7, #12]
 800484a:	f000 f987 	bl	8004b5c <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800484e:	f7ff fd47 	bl	80042e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8004852:	211e      	movs	r1, #30
 8004854:	68f8      	ldr	r0, [r7, #12]
 8004856:	f000 f8d3 	bl	8004a00 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800485a:	7afb      	ldrb	r3, [r7, #11]
 800485c:	4619      	mov	r1, r3
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f000 f8ce 	bl	8004a00 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004864:	2100      	movs	r1, #0
 8004866:	68f8      	ldr	r0, [r7, #12]
 8004868:	f000 f8ca 	bl	8004a00 <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800486c:	2300      	movs	r3, #0
 800486e:	82fb      	strh	r3, [r7, #22]
 8004870:	e009      	b.n	8004886 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004872:	69b9      	ldr	r1, [r7, #24]
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 f919 	bl	8004aac <SUBGHZSPI_Receive>
      pData++;
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	3301      	adds	r3, #1
 800487e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8004880:	8afb      	ldrh	r3, [r7, #22]
 8004882:	3301      	adds	r3, #1
 8004884:	82fb      	strh	r3, [r7, #22]
 8004886:	8afa      	ldrh	r2, [r7, #22]
 8004888:	893b      	ldrh	r3, [r7, #8]
 800488a:	429a      	cmp	r2, r3
 800488c:	d3f1      	bcc.n	8004872 <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800488e:	f7ff fd17 	bl	80042c0 <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f000 f986 	bl	8004ba4 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d002      	beq.n	80048a6 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	77fb      	strb	r3, [r7, #31]
 80048a4:	e001      	b.n	80048aa <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 80048a6:	2300      	movs	r3, #0
 80048a8:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2201      	movs	r2, #1
 80048ae:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	715a      	strb	r2, [r3, #5]

    return status;
 80048b6:	7ffb      	ldrb	r3, [r7, #31]
 80048b8:	e000      	b.n	80048bc <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 80048ba:	2302      	movs	r3, #2
  }
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3720      	adds	r7, #32
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bd80      	pop	{r7, pc}

080048c4 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2] = {0};
 80048cc:	2300      	movs	r3, #0
 80048ce:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2);
 80048d0:	f107 020c 	add.w	r2, r7, #12
 80048d4:	2302      	movs	r3, #2
 80048d6:	2112      	movs	r1, #18
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f7ff fef4 	bl	80046c6 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0];
 80048de:	7b3b      	ldrb	r3, [r7, #12]
 80048e0:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8) | tmpisr[1];
 80048e2:	89fb      	ldrh	r3, [r7, #14]
 80048e4:	021b      	lsls	r3, r3, #8
 80048e6:	b21a      	sxth	r2, r3
 80048e8:	7b7b      	ldrb	r3, [r7, #13]
 80048ea:	b21b      	sxth	r3, r3
 80048ec:	4313      	orrs	r3, r2
 80048ee:	b21b      	sxth	r3, r3
 80048f0:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80048f2:	89fb      	ldrh	r3, [r7, #14]
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d002      	beq.n	8004902 <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f005 f97f 	bl	8009c00 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8004902:	89fb      	ldrh	r3, [r7, #14]
 8004904:	085b      	lsrs	r3, r3, #1
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d002      	beq.n	8004914 <HAL_SUBGHZ_IRQHandler+0x50>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f005 f984 	bl	8009c1c <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8004914:	89fb      	ldrh	r3, [r7, #14]
 8004916:	089b      	lsrs	r3, r3, #2
 8004918:	f003 0301 	and.w	r3, r3, #1
 800491c:	2b00      	cmp	r3, #0
 800491e:	d002      	beq.n	8004926 <HAL_SUBGHZ_IRQHandler+0x62>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f005 f9d3 	bl	8009ccc <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8004926:	89fb      	ldrh	r3, [r7, #14]
 8004928:	08db      	lsrs	r3, r3, #3
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <HAL_SUBGHZ_IRQHandler+0x74>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f005 f9d8 	bl	8009ce8 <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8004938:	89fb      	ldrh	r3, [r7, #14]
 800493a:	091b      	lsrs	r3, r3, #4
 800493c:	f003 0301 	and.w	r3, r3, #1
 8004940:	2b00      	cmp	r3, #0
 8004942:	d002      	beq.n	800494a <HAL_SUBGHZ_IRQHandler+0x86>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f005 f9dd 	bl	8009d04 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800494a:	89fb      	ldrh	r3, [r7, #14]
 800494c:	095b      	lsrs	r3, r3, #5
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d002      	beq.n	800495c <HAL_SUBGHZ_IRQHandler+0x98>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f005 f9aa 	bl	8009cb0 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 800495c:	89fb      	ldrh	r3, [r7, #14]
 800495e:	099b      	lsrs	r3, r3, #6
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	2b00      	cmp	r3, #0
 8004966:	d002      	beq.n	800496e <HAL_SUBGHZ_IRQHandler+0xaa>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f005 f965 	bl	8009c38 <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 800496e:	89fb      	ldrh	r3, [r7, #14]
 8004970:	09db      	lsrs	r3, r3, #7
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00e      	beq.n	8004998 <HAL_SUBGHZ_IRQHandler+0xd4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800497a:	89fb      	ldrh	r3, [r7, #14]
 800497c:	0a1b      	lsrs	r3, r3, #8
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d004      	beq.n	8004990 <HAL_SUBGHZ_IRQHandler+0xcc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8004986:	2101      	movs	r1, #1
 8004988:	6878      	ldr	r0, [r7, #4]
 800498a:	f005 f963 	bl	8009c54 <HAL_SUBGHZ_CADStatusCallback>
 800498e:	e003      	b.n	8004998 <HAL_SUBGHZ_IRQHandler+0xd4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8004990:	2100      	movs	r1, #0
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f005 f95e 	bl	8009c54 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8004998:	89fb      	ldrh	r3, [r7, #14]
 800499a:	0a5b      	lsrs	r3, r3, #9
 800499c:	f003 0301 	and.w	r3, r3, #1
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d002      	beq.n	80049aa <HAL_SUBGHZ_IRQHandler+0xe6>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f005 f973 	bl	8009c90 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 80049aa:	f107 020c 	add.w	r2, r7, #12
 80049ae:	2302      	movs	r3, #2
 80049b0:	2102      	movs	r1, #2
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f7ff fe28 	bl	8004608 <HAL_SUBGHZ_ExecSetCmd>
}
 80049b8:	bf00      	nop
 80049ba:	3710      	adds	r7, #16
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}

080049c0 <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80049c8:	4b0c      	ldr	r3, [pc, #48]	; (80049fc <SUBGHZSPI_Init+0x3c>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a0b      	ldr	r2, [pc, #44]	; (80049fc <SUBGHZSPI_Init+0x3c>)
 80049ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049d2:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80049d4:	4a09      	ldr	r2, [pc, #36]	; (80049fc <SUBGHZSPI_Init+0x3c>)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	f443 7341 	orr.w	r3, r3, #772	; 0x304
 80049dc:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80049de:	4b07      	ldr	r3, [pc, #28]	; (80049fc <SUBGHZSPI_Init+0x3c>)
 80049e0:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 80049e4:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80049e6:	4b05      	ldr	r3, [pc, #20]	; (80049fc <SUBGHZSPI_Init+0x3c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a04      	ldr	r2, [pc, #16]	; (80049fc <SUBGHZSPI_Init+0x3c>)
 80049ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049f0:	6013      	str	r3, [r2, #0]
}
 80049f2:	bf00      	nop
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bc80      	pop	{r7}
 80049fa:	4770      	bx	lr
 80049fc:	58010000 	.word	0x58010000

08004a00 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b087      	sub	sp, #28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
 8004a08:	460b      	mov	r3, r1
 8004a0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004a10:	4b23      	ldr	r3, [pc, #140]	; (8004aa0 <SUBGHZSPI_Transmit+0xa0>)
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	4613      	mov	r3, r2
 8004a16:	00db      	lsls	r3, r3, #3
 8004a18:	1a9b      	subs	r3, r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	0cdb      	lsrs	r3, r3, #19
 8004a1e:	2264      	movs	r2, #100	; 0x64
 8004a20:	fb02 f303 	mul.w	r3, r2, r3
 8004a24:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d105      	bne.n	8004a38 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	609a      	str	r2, [r3, #8]
      break;
 8004a36:	e008      	b.n	8004a4a <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004a3e:	4b19      	ldr	r3, [pc, #100]	; (8004aa4 <SUBGHZSPI_Transmit+0xa4>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f003 0302 	and.w	r3, r3, #2
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d1ed      	bne.n	8004a26 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004a4a:	4b17      	ldr	r3, [pc, #92]	; (8004aa8 <SUBGHZSPI_Transmit+0xa8>)
 8004a4c:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	78fa      	ldrb	r2, [r7, #3]
 8004a52:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004a54:	4b12      	ldr	r3, [pc, #72]	; (8004aa0 <SUBGHZSPI_Transmit+0xa0>)
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	1a9b      	subs	r3, r3, r2
 8004a5e:	009b      	lsls	r3, r3, #2
 8004a60:	0cdb      	lsrs	r3, r3, #19
 8004a62:	2264      	movs	r2, #100	; 0x64
 8004a64:	fb02 f303 	mul.w	r3, r2, r3
 8004a68:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d105      	bne.n	8004a7c <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	609a      	str	r2, [r3, #8]
      break;
 8004a7a:	e008      	b.n	8004a8e <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004a82:	4b08      	ldr	r3, [pc, #32]	; (8004aa4 <SUBGHZSPI_Transmit+0xa4>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f003 0301 	and.w	r3, r3, #1
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d1ed      	bne.n	8004a6a <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 8004a8e:	4b05      	ldr	r3, [pc, #20]	; (8004aa4 <SUBGHZSPI_Transmit+0xa4>)
 8004a90:	68db      	ldr	r3, [r3, #12]

  return status;
 8004a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	371c      	adds	r7, #28
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bc80      	pop	{r7}
 8004a9c:	4770      	bx	lr
 8004a9e:	bf00      	nop
 8004aa0:	20000000 	.word	0x20000000
 8004aa4:	58010000 	.word	0x58010000
 8004aa8:	5801000c 	.word	0x5801000c

08004aac <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b087      	sub	sp, #28
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
 8004ab4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004aba:	4b25      	ldr	r3, [pc, #148]	; (8004b50 <SUBGHZSPI_Receive+0xa4>)
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	00db      	lsls	r3, r3, #3
 8004ac2:	1a9b      	subs	r3, r3, r2
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	0cdb      	lsrs	r3, r3, #19
 8004ac8:	2264      	movs	r2, #100	; 0x64
 8004aca:	fb02 f303 	mul.w	r3, r2, r3
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d105      	bne.n	8004ae2 <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	609a      	str	r2, [r3, #8]
      break;
 8004ae0:	e008      	b.n	8004af4 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8004ae8:	4b1a      	ldr	r3, [pc, #104]	; (8004b54 <SUBGHZSPI_Receive+0xa8>)
 8004aea:	689b      	ldr	r3, [r3, #8]
 8004aec:	f003 0302 	and.w	r3, r3, #2
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	d1ed      	bne.n	8004ad0 <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8004af4:	4b18      	ldr	r3, [pc, #96]	; (8004b58 <SUBGHZSPI_Receive+0xac>)
 8004af6:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	22ff      	movs	r2, #255	; 0xff
 8004afc:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004afe:	4b14      	ldr	r3, [pc, #80]	; (8004b50 <SUBGHZSPI_Receive+0xa4>)
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	4613      	mov	r3, r2
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	1a9b      	subs	r3, r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	0cdb      	lsrs	r3, r3, #19
 8004b0c:	2264      	movs	r2, #100	; 0x64
 8004b0e:	fb02 f303 	mul.w	r3, r2, r3
 8004b12:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d105      	bne.n	8004b26 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	609a      	str	r2, [r3, #8]
      break;
 8004b24:	e008      	b.n	8004b38 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004b2c:	4b09      	ldr	r3, [pc, #36]	; (8004b54 <SUBGHZSPI_Receive+0xa8>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f003 0301 	and.w	r3, r3, #1
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d1ed      	bne.n	8004b14 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004b38:	4b06      	ldr	r3, [pc, #24]	; (8004b54 <SUBGHZSPI_Receive+0xa8>)
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	b2da      	uxtb	r2, r3
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	701a      	strb	r2, [r3, #0]

  return status;
 8004b42:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	371c      	adds	r7, #28
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bc80      	pop	{r7}
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	20000000 	.word	0x20000000
 8004b54:	58010000 	.word	0x58010000
 8004b58:	5801000c 	.word	0x5801000c

08004b5c <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	791b      	ldrb	r3, [r3, #4]
 8004b68:	2b01      	cmp	r3, #1
 8004b6a:	d111      	bne.n	8004b90 <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 8004b6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ba0 <SUBGHZ_CheckDeviceReady+0x44>)
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	4613      	mov	r3, r2
 8004b72:	005b      	lsls	r3, r3, #1
 8004b74:	4413      	add	r3, r2
 8004b76:	00db      	lsls	r3, r3, #3
 8004b78:	0c1b      	lsrs	r3, r3, #16
 8004b7a:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8004b7c:	f7ff fbb0 	bl	80042e0 <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	3b01      	subs	r3, #1
 8004b84:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1f9      	bne.n	8004b80 <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8004b8c:	f7ff fb98 	bl	80042c0 <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f807 	bl	8004ba4 <SUBGHZ_WaitOnBusy>
 8004b96:	4603      	mov	r3, r0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3710      	adds	r7, #16
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	20000000 	.word	0x20000000

08004ba4 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 8004bac:	2300      	movs	r3, #0
 8004bae:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 8004bb0:	4b12      	ldr	r3, [pc, #72]	; (8004bfc <SUBGHZ_WaitOnBusy+0x58>)
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	4413      	add	r3, r2
 8004bba:	00db      	lsls	r3, r3, #3
 8004bbc:	0d1b      	lsrs	r3, r3, #20
 8004bbe:	2264      	movs	r2, #100	; 0x64
 8004bc0:	fb02 f303 	mul.w	r3, r2, r3
 8004bc4:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8004bc6:	f7ff fbb9 	bl	800433c <LL_PWR_IsActiveFlag_RFBUSYMS>
 8004bca:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d105      	bne.n	8004bde <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2202      	movs	r2, #2
 8004bda:	609a      	str	r2, [r3, #8]
      break;
 8004bdc:	e009      	b.n	8004bf2 <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	3b01      	subs	r3, #1
 8004be2:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8004be4:	f7ff fb98 	bl	8004318 <LL_PWR_IsActiveFlag_RFBUSYS>
 8004be8:	4602      	mov	r2, r0
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	4013      	ands	r3, r2
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d0e9      	beq.n	8004bc6 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 8004bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3718      	adds	r7, #24
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	20000000 	.word	0x20000000

08004c00 <LL_RCC_GetUSARTClockSource>:
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8004c08:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c0c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	401a      	ands	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	041b      	lsls	r3, r3, #16
 8004c18:	4313      	orrs	r3, r2
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bc80      	pop	{r7}
 8004c22:	4770      	bx	lr

08004c24 <LL_RCC_GetLPUARTClockSource>:
{
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8004c2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8004c30:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4013      	ands	r3, r2
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	370c      	adds	r7, #12
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bc80      	pop	{r7}
 8004c40:	4770      	bx	lr

08004c42 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b082      	sub	sp, #8
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e042      	b.n	8004cda <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d106      	bne.n	8004c6c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7fb febc 	bl	80009e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2224      	movs	r2, #36	; 0x24
 8004c70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f022 0201 	bic.w	r2, r2, #1
 8004c82:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 fc4b 	bl	8005520 <UART_SetConfig>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	2b01      	cmp	r3, #1
 8004c8e:	d101      	bne.n	8004c94 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e022      	b.n	8004cda <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d002      	beq.n	8004ca2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 fe8f 	bl	80059c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cb0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	689a      	ldr	r2, [r3, #8]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cc0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f042 0201 	orr.w	r2, r2, #1
 8004cd0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 ff15 	bl	8005b02 <UART_CheckIdleState>
 8004cd8:	4603      	mov	r3, r0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3708      	adds	r7, #8
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
	...

08004ce4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b08a      	sub	sp, #40	; 0x28
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf8:	2b20      	cmp	r3, #32
 8004cfa:	d142      	bne.n	8004d82 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d002      	beq.n	8004d08 <HAL_UART_Receive_IT+0x24>
 8004d02:	88fb      	ldrh	r3, [r7, #6]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e03b      	b.n	8004d84 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d101      	bne.n	8004d1a <HAL_UART_Receive_IT+0x36>
 8004d16:	2302      	movs	r3, #2
 8004d18:	e034      	b.n	8004d84 <HAL_UART_Receive_IT+0xa0>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a17      	ldr	r2, [pc, #92]	; (8004d8c <HAL_UART_Receive_IT+0xa8>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d01f      	beq.n	8004d72 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d018      	beq.n	8004d72 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	e853 3f00 	ldrex	r3, [r3]
 8004d4c:	613b      	str	r3, [r7, #16]
   return(result);
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d54:	627b      	str	r3, [r7, #36]	; 0x24
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5e:	623b      	str	r3, [r7, #32]
 8004d60:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d62:	69f9      	ldr	r1, [r7, #28]
 8004d64:	6a3a      	ldr	r2, [r7, #32]
 8004d66:	e841 2300 	strex	r3, r2, [r1]
 8004d6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1e6      	bne.n	8004d40 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004d72:	88fb      	ldrh	r3, [r7, #6]
 8004d74:	461a      	mov	r2, r3
 8004d76:	68b9      	ldr	r1, [r7, #8]
 8004d78:	68f8      	ldr	r0, [r7, #12]
 8004d7a:	f000 ffd5 	bl	8005d28 <UART_Start_Receive_IT>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	e000      	b.n	8004d84 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004d82:	2302      	movs	r3, #2
  }
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3728      	adds	r7, #40	; 0x28
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	40008000 	.word	0x40008000

08004d90 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b08a      	sub	sp, #40	; 0x28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004da4:	2b20      	cmp	r3, #32
 8004da6:	d17a      	bne.n	8004e9e <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d002      	beq.n	8004db4 <HAL_UART_Transmit_DMA+0x24>
 8004dae:	88fb      	ldrh	r3, [r7, #6]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e073      	b.n	8004ea0 <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d101      	bne.n	8004dc6 <HAL_UART_Transmit_DMA+0x36>
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	e06c      	b.n	8004ea0 <HAL_UART_Transmit_DMA+0x110>
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	88fa      	ldrh	r2, [r7, #6]
 8004dd8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	88fa      	ldrh	r2, [r7, #6]
 8004de0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	2221      	movs	r2, #33	; 0x21
 8004df0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d02c      	beq.n	8004e56 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e00:	4a29      	ldr	r2, [pc, #164]	; (8004ea8 <HAL_UART_Transmit_DMA+0x118>)
 8004e02:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e08:	4a28      	ldr	r2, [pc, #160]	; (8004eac <HAL_UART_Transmit_DMA+0x11c>)
 8004e0a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e10:	4a27      	ldr	r2, [pc, #156]	; (8004eb0 <HAL_UART_Transmit_DMA+0x120>)
 8004e12:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e18:	2200      	movs	r2, #0
 8004e1a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e24:	4619      	mov	r1, r3
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	3328      	adds	r3, #40	; 0x28
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	88fb      	ldrh	r3, [r7, #6]
 8004e30:	f7fc fdfe 	bl	8001a30 <HAL_DMA_Start_IT>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00d      	beq.n	8004e56 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2210      	movs	r2, #16
 8004e3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2220      	movs	r2, #32
 8004e4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e024      	b.n	8004ea0 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2240      	movs	r2, #64	; 0x40
 8004e5c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	3308      	adds	r3, #8
 8004e6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	e853 3f00 	ldrex	r3, [r3]
 8004e74:	613b      	str	r3, [r7, #16]
   return(result);
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e7c:	627b      	str	r3, [r7, #36]	; 0x24
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	3308      	adds	r3, #8
 8004e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e86:	623a      	str	r2, [r7, #32]
 8004e88:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8a:	69f9      	ldr	r1, [r7, #28]
 8004e8c:	6a3a      	ldr	r2, [r7, #32]
 8004e8e:	e841 2300 	strex	r3, r2, [r1]
 8004e92:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e94:	69bb      	ldr	r3, [r7, #24]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1e5      	bne.n	8004e66 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	e000      	b.n	8004ea0 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8004e9e:	2302      	movs	r3, #2
  }
}
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	3728      	adds	r7, #40	; 0x28
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}
 8004ea8:	08006077 	.word	0x08006077
 8004eac:	08006111 	.word	0x08006111
 8004eb0:	0800612d 	.word	0x0800612d

08004eb4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	b0ba      	sub	sp, #232	; 0xe8
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004eda:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004ede:	f640 030f 	movw	r3, #2063	; 0x80f
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004ee8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d11b      	bne.n	8004f28 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ef4:	f003 0320 	and.w	r3, r3, #32
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d015      	beq.n	8004f28 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f00:	f003 0320 	and.w	r3, r3, #32
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d105      	bne.n	8004f14 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004f08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d009      	beq.n	8004f28 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 82d6 	beq.w	80054ca <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	4798      	blx	r3
      }
      return;
 8004f26:	e2d0      	b.n	80054ca <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004f28:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f000 811f 	beq.w	8005170 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004f32:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004f36:	4b8b      	ldr	r3, [pc, #556]	; (8005164 <HAL_UART_IRQHandler+0x2b0>)
 8004f38:	4013      	ands	r3, r2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d106      	bne.n	8004f4c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004f3e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004f42:	4b89      	ldr	r3, [pc, #548]	; (8005168 <HAL_UART_IRQHandler+0x2b4>)
 8004f44:	4013      	ands	r3, r2
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	f000 8112 	beq.w	8005170 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f50:	f003 0301 	and.w	r3, r3, #1
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d011      	beq.n	8004f7c <HAL_UART_IRQHandler+0xc8>
 8004f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00b      	beq.n	8004f7c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f72:	f043 0201 	orr.w	r2, r3, #1
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f80:	f003 0302 	and.w	r3, r3, #2
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d011      	beq.n	8004fac <HAL_UART_IRQHandler+0xf8>
 8004f88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00b      	beq.n	8004fac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2202      	movs	r2, #2
 8004f9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fa2:	f043 0204 	orr.w	r2, r3, #4
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004fac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fb0:	f003 0304 	and.w	r3, r3, #4
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d011      	beq.n	8004fdc <HAL_UART_IRQHandler+0x128>
 8004fb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004fbc:	f003 0301 	and.w	r3, r3, #1
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00b      	beq.n	8004fdc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	2204      	movs	r2, #4
 8004fca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004fd2:	f043 0202 	orr.w	r2, r3, #2
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004fdc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fe0:	f003 0308 	and.w	r3, r3, #8
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d017      	beq.n	8005018 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004fe8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fec:	f003 0320 	and.w	r3, r3, #32
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d105      	bne.n	8005000 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004ff4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004ff8:	4b5a      	ldr	r3, [pc, #360]	; (8005164 <HAL_UART_IRQHandler+0x2b0>)
 8004ffa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00b      	beq.n	8005018 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2208      	movs	r2, #8
 8005006:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800500e:	f043 0208 	orr.w	r2, r3, #8
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005018:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800501c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005020:	2b00      	cmp	r3, #0
 8005022:	d012      	beq.n	800504a <HAL_UART_IRQHandler+0x196>
 8005024:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005028:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00c      	beq.n	800504a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005038:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005040:	f043 0220 	orr.w	r2, r3, #32
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 823c 	beq.w	80054ce <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800505a:	f003 0320 	and.w	r3, r3, #32
 800505e:	2b00      	cmp	r3, #0
 8005060:	d013      	beq.n	800508a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005066:	f003 0320 	and.w	r3, r3, #32
 800506a:	2b00      	cmp	r3, #0
 800506c:	d105      	bne.n	800507a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800506e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d007      	beq.n	800508a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800507e:	2b00      	cmp	r3, #0
 8005080:	d003      	beq.n	800508a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005090:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800509e:	2b40      	cmp	r3, #64	; 0x40
 80050a0:	d005      	beq.n	80050ae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80050a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80050a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d04f      	beq.n	800514e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 ff7c 	bl	8005fac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050be:	2b40      	cmp	r3, #64	; 0x40
 80050c0:	d141      	bne.n	8005146 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	3308      	adds	r3, #8
 80050c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80050d0:	e853 3f00 	ldrex	r3, [r3]
 80050d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80050d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	3308      	adds	r3, #8
 80050ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80050ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80050f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80050fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80050fe:	e841 2300 	strex	r3, r2, [r1]
 8005102:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005106:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1d9      	bne.n	80050c2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005112:	2b00      	cmp	r3, #0
 8005114:	d013      	beq.n	800513e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800511a:	4a14      	ldr	r2, [pc, #80]	; (800516c <HAL_UART_IRQHandler+0x2b8>)
 800511c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005122:	4618      	mov	r0, r3
 8005124:	f7fc fd60 	bl	8001be8 <HAL_DMA_Abort_IT>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	d017      	beq.n	800515e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005138:	4610      	mov	r0, r2
 800513a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800513c:	e00f      	b.n	800515e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f9d9 	bl	80054f6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005144:	e00b      	b.n	800515e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f9d5 	bl	80054f6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800514c:	e007      	b.n	800515e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f9d1 	bl	80054f6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800515c:	e1b7      	b.n	80054ce <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800515e:	bf00      	nop
    return;
 8005160:	e1b5      	b.n	80054ce <HAL_UART_IRQHandler+0x61a>
 8005162:	bf00      	nop
 8005164:	10000001 	.word	0x10000001
 8005168:	04000120 	.word	0x04000120
 800516c:	080061ad 	.word	0x080061ad

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005174:	2b01      	cmp	r3, #1
 8005176:	f040 814a 	bne.w	800540e <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800517a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800517e:	f003 0310 	and.w	r3, r3, #16
 8005182:	2b00      	cmp	r3, #0
 8005184:	f000 8143 	beq.w	800540e <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800518c:	f003 0310 	and.w	r3, r3, #16
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 813c 	beq.w	800540e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2210      	movs	r2, #16
 800519c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051a8:	2b40      	cmp	r3, #64	; 0x40
 80051aa:	f040 80b5 	bne.w	8005318 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if (  (nb_remaining_rx_data > 0U)
 80051ba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f000 8187 	beq.w	80054d2 <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80051ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051ce:	429a      	cmp	r2, r3
 80051d0:	f080 817f 	bcs.w	80054d2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80051da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0320 	and.w	r3, r3, #32
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f040 8086 	bne.w	80052fc <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80051fc:	e853 3f00 	ldrex	r3, [r3]
 8005200:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005204:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800520c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	461a      	mov	r2, r3
 8005216:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800521a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800521e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005222:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005226:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800522a:	e841 2300 	strex	r3, r2, [r1]
 800522e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005232:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1da      	bne.n	80051f0 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	3308      	adds	r3, #8
 8005240:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005242:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005244:	e853 3f00 	ldrex	r3, [r3]
 8005248:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800524a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800524c:	f023 0301 	bic.w	r3, r3, #1
 8005250:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	3308      	adds	r3, #8
 800525a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800525e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005262:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005264:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005266:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800526a:	e841 2300 	strex	r3, r2, [r1]
 800526e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005270:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1e1      	bne.n	800523a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	3308      	adds	r3, #8
 800527c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005280:	e853 3f00 	ldrex	r3, [r3]
 8005284:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005286:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005288:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800528c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	3308      	adds	r3, #8
 8005296:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800529a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800529c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80052a0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052a2:	e841 2300 	strex	r3, r2, [r1]
 80052a6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80052a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1e3      	bne.n	8005276 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2220      	movs	r2, #32
 80052b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2200      	movs	r2, #0
 80052ba:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052c4:	e853 3f00 	ldrex	r3, [r3]
 80052c8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80052ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80052cc:	f023 0310 	bic.w	r3, r3, #16
 80052d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	461a      	mov	r2, r3
 80052da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052de:	65bb      	str	r3, [r7, #88]	; 0x58
 80052e0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80052e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052e6:	e841 2300 	strex	r3, r2, [r1]
 80052ea:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80052ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1e4      	bne.n	80052bc <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7fc fc18 	bl	8001b2c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005308:	b29b      	uxth	r3, r3
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	b29b      	uxth	r3, r3
 800530e:	4619      	mov	r1, r3
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 f8f9 	bl	8005508 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005316:	e0dc      	b.n	80054d2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005324:	b29b      	uxth	r3, r3
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if (  (huart->RxXferCount > 0U)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005332:	b29b      	uxth	r3, r3
 8005334:	2b00      	cmp	r3, #0
 8005336:	f000 80ce 	beq.w	80054d6 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 800533a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800533e:	2b00      	cmp	r3, #0
 8005340:	f000 80c9 	beq.w	80054d6 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800534c:	e853 3f00 	ldrex	r3, [r3]
 8005350:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005354:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005358:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	461a      	mov	r2, r3
 8005362:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005366:	647b      	str	r3, [r7, #68]	; 0x44
 8005368:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800536a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800536c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800536e:	e841 2300 	strex	r3, r2, [r1]
 8005372:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005374:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1e4      	bne.n	8005344 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	3308      	adds	r3, #8
 8005380:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005384:	e853 3f00 	ldrex	r3, [r3]
 8005388:	623b      	str	r3, [r7, #32]
   return(result);
 800538a:	6a3b      	ldr	r3, [r7, #32]
 800538c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005390:	f023 0301 	bic.w	r3, r3, #1
 8005394:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	3308      	adds	r3, #8
 800539e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80053a2:	633a      	str	r2, [r7, #48]	; 0x30
 80053a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80053a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80053aa:	e841 2300 	strex	r3, r2, [r1]
 80053ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80053b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1e1      	bne.n	800537a <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2220      	movs	r2, #32
 80053ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	e853 3f00 	ldrex	r3, [r3]
 80053d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f023 0310 	bic.w	r3, r3, #16
 80053de:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	461a      	mov	r2, r3
 80053e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80053ec:	61fb      	str	r3, [r7, #28]
 80053ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f0:	69b9      	ldr	r1, [r7, #24]
 80053f2:	69fa      	ldr	r2, [r7, #28]
 80053f4:	e841 2300 	strex	r3, r2, [r1]
 80053f8:	617b      	str	r3, [r7, #20]
   return(result);
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1e4      	bne.n	80053ca <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005400:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005404:	4619      	mov	r1, r3
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 f87e 	bl	8005508 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800540c:	e063      	b.n	80054d6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800540e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005416:	2b00      	cmp	r3, #0
 8005418:	d00e      	beq.n	8005438 <HAL_UART_IRQHandler+0x584>
 800541a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800541e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d008      	beq.n	8005438 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800542e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f001 fb59 	bl	8006ae8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005436:	e051      	b.n	80054dc <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005438:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800543c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005440:	2b00      	cmp	r3, #0
 8005442:	d014      	beq.n	800546e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800544c:	2b00      	cmp	r3, #0
 800544e:	d105      	bne.n	800545c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005450:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005454:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d008      	beq.n	800546e <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005460:	2b00      	cmp	r3, #0
 8005462:	d03a      	beq.n	80054da <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	4798      	blx	r3
    }
    return;
 800546c:	e035      	b.n	80054da <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800546e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005476:	2b00      	cmp	r3, #0
 8005478:	d009      	beq.n	800548e <HAL_UART_IRQHandler+0x5da>
 800547a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800547e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005482:	2b00      	cmp	r3, #0
 8005484:	d003      	beq.n	800548e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 fea6 	bl	80061d8 <UART_EndTransmit_IT>
    return;
 800548c:	e026      	b.n	80054dc <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800548e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005492:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005496:	2b00      	cmp	r3, #0
 8005498:	d009      	beq.n	80054ae <HAL_UART_IRQHandler+0x5fa>
 800549a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800549e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d003      	beq.n	80054ae <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80054a6:	6878      	ldr	r0, [r7, #4]
 80054a8:	f001 fb30 	bl	8006b0c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80054ac:	e016      	b.n	80054dc <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80054ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d010      	beq.n	80054dc <HAL_UART_IRQHandler+0x628>
 80054ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	da0c      	bge.n	80054dc <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f001 fb19 	bl	8006afa <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80054c8:	e008      	b.n	80054dc <HAL_UART_IRQHandler+0x628>
      return;
 80054ca:	bf00      	nop
 80054cc:	e006      	b.n	80054dc <HAL_UART_IRQHandler+0x628>
    return;
 80054ce:	bf00      	nop
 80054d0:	e004      	b.n	80054dc <HAL_UART_IRQHandler+0x628>
      return;
 80054d2:	bf00      	nop
 80054d4:	e002      	b.n	80054dc <HAL_UART_IRQHandler+0x628>
      return;
 80054d6:	bf00      	nop
 80054d8:	e000      	b.n	80054dc <HAL_UART_IRQHandler+0x628>
    return;
 80054da:	bf00      	nop
  }
}
 80054dc:	37e8      	adds	r7, #232	; 0xe8
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop

080054e4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bc80      	pop	{r7}
 80054f4:	4770      	bx	lr

080054f6 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80054f6:	b480      	push	{r7}
 80054f8:	b083      	sub	sp, #12
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80054fe:	bf00      	nop
 8005500:	370c      	adds	r7, #12
 8005502:	46bd      	mov	sp, r7
 8005504:	bc80      	pop	{r7}
 8005506:	4770      	bx	lr

08005508 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005508:	b480      	push	{r7}
 800550a:	b083      	sub	sp, #12
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	460b      	mov	r3, r1
 8005512:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	bc80      	pop	{r7}
 800551c:	4770      	bx	lr
	...

08005520 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005520:	b5b0      	push	{r4, r5, r7, lr}
 8005522:	b088      	sub	sp, #32
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005528:	2300      	movs	r3, #0
 800552a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	689a      	ldr	r2, [r3, #8]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	691b      	ldr	r3, [r3, #16]
 8005534:	431a      	orrs	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	431a      	orrs	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	69db      	ldr	r3, [r3, #28]
 8005540:	4313      	orrs	r3, r2
 8005542:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	681a      	ldr	r2, [r3, #0]
 800554a:	4bab      	ldr	r3, [pc, #684]	; (80057f8 <UART_SetConfig+0x2d8>)
 800554c:	4013      	ands	r3, r2
 800554e:	687a      	ldr	r2, [r7, #4]
 8005550:	6812      	ldr	r2, [r2, #0]
 8005552:	69f9      	ldr	r1, [r7, #28]
 8005554:	430b      	orrs	r3, r1
 8005556:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	68da      	ldr	r2, [r3, #12]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	430a      	orrs	r2, r1
 800556c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4aa0      	ldr	r2, [pc, #640]	; (80057fc <UART_SetConfig+0x2dc>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d004      	beq.n	8005588 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	69fa      	ldr	r2, [r7, #28]
 8005584:	4313      	orrs	r3, r2
 8005586:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005592:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	6812      	ldr	r2, [r2, #0]
 800559a:	69f9      	ldr	r1, [r7, #28]
 800559c:	430b      	orrs	r3, r1
 800559e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a6:	f023 010f 	bic.w	r1, r3, #15
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	430a      	orrs	r2, r1
 80055b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a91      	ldr	r2, [pc, #580]	; (8005800 <UART_SetConfig+0x2e0>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d122      	bne.n	8005606 <UART_SetConfig+0xe6>
 80055c0:	2003      	movs	r0, #3
 80055c2:	f7ff fb1d 	bl	8004c00 <LL_RCC_GetUSARTClockSource>
 80055c6:	4603      	mov	r3, r0
 80055c8:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80055cc:	2b03      	cmp	r3, #3
 80055ce:	d817      	bhi.n	8005600 <UART_SetConfig+0xe0>
 80055d0:	a201      	add	r2, pc, #4	; (adr r2, 80055d8 <UART_SetConfig+0xb8>)
 80055d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d6:	bf00      	nop
 80055d8:	080055e9 	.word	0x080055e9
 80055dc:	080055f5 	.word	0x080055f5
 80055e0:	080055ef 	.word	0x080055ef
 80055e4:	080055fb 	.word	0x080055fb
 80055e8:	2301      	movs	r3, #1
 80055ea:	76fb      	strb	r3, [r7, #27]
 80055ec:	e072      	b.n	80056d4 <UART_SetConfig+0x1b4>
 80055ee:	2302      	movs	r3, #2
 80055f0:	76fb      	strb	r3, [r7, #27]
 80055f2:	e06f      	b.n	80056d4 <UART_SetConfig+0x1b4>
 80055f4:	2304      	movs	r3, #4
 80055f6:	76fb      	strb	r3, [r7, #27]
 80055f8:	e06c      	b.n	80056d4 <UART_SetConfig+0x1b4>
 80055fa:	2308      	movs	r3, #8
 80055fc:	76fb      	strb	r3, [r7, #27]
 80055fe:	e069      	b.n	80056d4 <UART_SetConfig+0x1b4>
 8005600:	2310      	movs	r3, #16
 8005602:	76fb      	strb	r3, [r7, #27]
 8005604:	e066      	b.n	80056d4 <UART_SetConfig+0x1b4>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a7e      	ldr	r2, [pc, #504]	; (8005804 <UART_SetConfig+0x2e4>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d134      	bne.n	800567a <UART_SetConfig+0x15a>
 8005610:	200c      	movs	r0, #12
 8005612:	f7ff faf5 	bl	8004c00 <LL_RCC_GetUSARTClockSource>
 8005616:	4603      	mov	r3, r0
 8005618:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800561c:	2b0c      	cmp	r3, #12
 800561e:	d829      	bhi.n	8005674 <UART_SetConfig+0x154>
 8005620:	a201      	add	r2, pc, #4	; (adr r2, 8005628 <UART_SetConfig+0x108>)
 8005622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005626:	bf00      	nop
 8005628:	0800565d 	.word	0x0800565d
 800562c:	08005675 	.word	0x08005675
 8005630:	08005675 	.word	0x08005675
 8005634:	08005675 	.word	0x08005675
 8005638:	08005669 	.word	0x08005669
 800563c:	08005675 	.word	0x08005675
 8005640:	08005675 	.word	0x08005675
 8005644:	08005675 	.word	0x08005675
 8005648:	08005663 	.word	0x08005663
 800564c:	08005675 	.word	0x08005675
 8005650:	08005675 	.word	0x08005675
 8005654:	08005675 	.word	0x08005675
 8005658:	0800566f 	.word	0x0800566f
 800565c:	2300      	movs	r3, #0
 800565e:	76fb      	strb	r3, [r7, #27]
 8005660:	e038      	b.n	80056d4 <UART_SetConfig+0x1b4>
 8005662:	2302      	movs	r3, #2
 8005664:	76fb      	strb	r3, [r7, #27]
 8005666:	e035      	b.n	80056d4 <UART_SetConfig+0x1b4>
 8005668:	2304      	movs	r3, #4
 800566a:	76fb      	strb	r3, [r7, #27]
 800566c:	e032      	b.n	80056d4 <UART_SetConfig+0x1b4>
 800566e:	2308      	movs	r3, #8
 8005670:	76fb      	strb	r3, [r7, #27]
 8005672:	e02f      	b.n	80056d4 <UART_SetConfig+0x1b4>
 8005674:	2310      	movs	r3, #16
 8005676:	76fb      	strb	r3, [r7, #27]
 8005678:	e02c      	b.n	80056d4 <UART_SetConfig+0x1b4>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a5f      	ldr	r2, [pc, #380]	; (80057fc <UART_SetConfig+0x2dc>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d125      	bne.n	80056d0 <UART_SetConfig+0x1b0>
 8005684:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8005688:	f7ff facc 	bl	8004c24 <LL_RCC_GetLPUARTClockSource>
 800568c:	4603      	mov	r3, r0
 800568e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005692:	d017      	beq.n	80056c4 <UART_SetConfig+0x1a4>
 8005694:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005698:	d817      	bhi.n	80056ca <UART_SetConfig+0x1aa>
 800569a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800569e:	d00b      	beq.n	80056b8 <UART_SetConfig+0x198>
 80056a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056a4:	d811      	bhi.n	80056ca <UART_SetConfig+0x1aa>
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d003      	beq.n	80056b2 <UART_SetConfig+0x192>
 80056aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ae:	d006      	beq.n	80056be <UART_SetConfig+0x19e>
 80056b0:	e00b      	b.n	80056ca <UART_SetConfig+0x1aa>
 80056b2:	2300      	movs	r3, #0
 80056b4:	76fb      	strb	r3, [r7, #27]
 80056b6:	e00d      	b.n	80056d4 <UART_SetConfig+0x1b4>
 80056b8:	2302      	movs	r3, #2
 80056ba:	76fb      	strb	r3, [r7, #27]
 80056bc:	e00a      	b.n	80056d4 <UART_SetConfig+0x1b4>
 80056be:	2304      	movs	r3, #4
 80056c0:	76fb      	strb	r3, [r7, #27]
 80056c2:	e007      	b.n	80056d4 <UART_SetConfig+0x1b4>
 80056c4:	2308      	movs	r3, #8
 80056c6:	76fb      	strb	r3, [r7, #27]
 80056c8:	e004      	b.n	80056d4 <UART_SetConfig+0x1b4>
 80056ca:	2310      	movs	r3, #16
 80056cc:	76fb      	strb	r3, [r7, #27]
 80056ce:	e001      	b.n	80056d4 <UART_SetConfig+0x1b4>
 80056d0:	2310      	movs	r3, #16
 80056d2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a48      	ldr	r2, [pc, #288]	; (80057fc <UART_SetConfig+0x2dc>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	f040 8098 	bne.w	8005810 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80056e0:	7efb      	ldrb	r3, [r7, #27]
 80056e2:	2b08      	cmp	r3, #8
 80056e4:	d823      	bhi.n	800572e <UART_SetConfig+0x20e>
 80056e6:	a201      	add	r2, pc, #4	; (adr r2, 80056ec <UART_SetConfig+0x1cc>)
 80056e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056ec:	08005711 	.word	0x08005711
 80056f0:	0800572f 	.word	0x0800572f
 80056f4:	08005719 	.word	0x08005719
 80056f8:	0800572f 	.word	0x0800572f
 80056fc:	0800571f 	.word	0x0800571f
 8005700:	0800572f 	.word	0x0800572f
 8005704:	0800572f 	.word	0x0800572f
 8005708:	0800572f 	.word	0x0800572f
 800570c:	08005727 	.word	0x08005727
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005710:	f7fd ff56 	bl	80035c0 <HAL_RCC_GetPCLK1Freq>
 8005714:	6178      	str	r0, [r7, #20]
        break;
 8005716:	e00f      	b.n	8005738 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005718:	4b3b      	ldr	r3, [pc, #236]	; (8005808 <UART_SetConfig+0x2e8>)
 800571a:	617b      	str	r3, [r7, #20]
        break;
 800571c:	e00c      	b.n	8005738 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800571e:	f7fd fe9b 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 8005722:	6178      	str	r0, [r7, #20]
        break;
 8005724:	e008      	b.n	8005738 <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005726:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800572a:	617b      	str	r3, [r7, #20]
        break;
 800572c:	e004      	b.n	8005738 <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 800572e:	2300      	movs	r3, #0
 8005730:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	76bb      	strb	r3, [r7, #26]
        break;
 8005736:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005738:	697b      	ldr	r3, [r7, #20]
 800573a:	2b00      	cmp	r3, #0
 800573c:	f000 8128 	beq.w	8005990 <UART_SetConfig+0x470>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005744:	4a31      	ldr	r2, [pc, #196]	; (800580c <UART_SetConfig+0x2ec>)
 8005746:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800574a:	461a      	mov	r2, r3
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005752:	60bb      	str	r3, [r7, #8]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685a      	ldr	r2, [r3, #4]
 8005758:	4613      	mov	r3, r2
 800575a:	005b      	lsls	r3, r3, #1
 800575c:	4413      	add	r3, r2
 800575e:	68ba      	ldr	r2, [r7, #8]
 8005760:	429a      	cmp	r2, r3
 8005762:	d305      	bcc.n	8005770 <UART_SetConfig+0x250>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800576a:	68ba      	ldr	r2, [r7, #8]
 800576c:	429a      	cmp	r2, r3
 800576e:	d902      	bls.n	8005776 <UART_SetConfig+0x256>
      {
        ret = HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	76bb      	strb	r3, [r7, #26]
 8005774:	e10c      	b.n	8005990 <UART_SetConfig+0x470>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005776:	697b      	ldr	r3, [r7, #20]
 8005778:	4618      	mov	r0, r3
 800577a:	f04f 0100 	mov.w	r1, #0
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	4a22      	ldr	r2, [pc, #136]	; (800580c <UART_SetConfig+0x2ec>)
 8005784:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005788:	b29a      	uxth	r2, r3
 800578a:	f04f 0300 	mov.w	r3, #0
 800578e:	f7fa fcfb 	bl	8000188 <__aeabi_uldivmod>
 8005792:	4602      	mov	r2, r0
 8005794:	460b      	mov	r3, r1
 8005796:	4610      	mov	r0, r2
 8005798:	4619      	mov	r1, r3
 800579a:	f04f 0200 	mov.w	r2, #0
 800579e:	f04f 0300 	mov.w	r3, #0
 80057a2:	020b      	lsls	r3, r1, #8
 80057a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80057a8:	0202      	lsls	r2, r0, #8
 80057aa:	6879      	ldr	r1, [r7, #4]
 80057ac:	6849      	ldr	r1, [r1, #4]
 80057ae:	0849      	lsrs	r1, r1, #1
 80057b0:	4608      	mov	r0, r1
 80057b2:	f04f 0100 	mov.w	r1, #0
 80057b6:	1814      	adds	r4, r2, r0
 80057b8:	eb43 0501 	adc.w	r5, r3, r1
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	461a      	mov	r2, r3
 80057c2:	f04f 0300 	mov.w	r3, #0
 80057c6:	4620      	mov	r0, r4
 80057c8:	4629      	mov	r1, r5
 80057ca:	f7fa fcdd 	bl	8000188 <__aeabi_uldivmod>
 80057ce:	4602      	mov	r2, r0
 80057d0:	460b      	mov	r3, r1
 80057d2:	4613      	mov	r3, r2
 80057d4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057dc:	d308      	bcc.n	80057f0 <UART_SetConfig+0x2d0>
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057e4:	d204      	bcs.n	80057f0 <UART_SetConfig+0x2d0>
        {
          huart->Instance->BRR = usartdiv;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	60da      	str	r2, [r3, #12]
 80057ee:	e0cf      	b.n	8005990 <UART_SetConfig+0x470>
        }
        else
        {
          ret = HAL_ERROR;
 80057f0:	2301      	movs	r3, #1
 80057f2:	76bb      	strb	r3, [r7, #26]
 80057f4:	e0cc      	b.n	8005990 <UART_SetConfig+0x470>
 80057f6:	bf00      	nop
 80057f8:	cfff69f3 	.word	0xcfff69f3
 80057fc:	40008000 	.word	0x40008000
 8005800:	40013800 	.word	0x40013800
 8005804:	40004400 	.word	0x40004400
 8005808:	00f42400 	.word	0x00f42400
 800580c:	0800bfcc 	.word	0x0800bfcc
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	69db      	ldr	r3, [r3, #28]
 8005814:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005818:	d165      	bne.n	80058e6 <UART_SetConfig+0x3c6>
  {
    switch (clocksource)
 800581a:	7efb      	ldrb	r3, [r7, #27]
 800581c:	2b08      	cmp	r3, #8
 800581e:	d828      	bhi.n	8005872 <UART_SetConfig+0x352>
 8005820:	a201      	add	r2, pc, #4	; (adr r2, 8005828 <UART_SetConfig+0x308>)
 8005822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005826:	bf00      	nop
 8005828:	0800584d 	.word	0x0800584d
 800582c:	08005855 	.word	0x08005855
 8005830:	0800585d 	.word	0x0800585d
 8005834:	08005873 	.word	0x08005873
 8005838:	08005863 	.word	0x08005863
 800583c:	08005873 	.word	0x08005873
 8005840:	08005873 	.word	0x08005873
 8005844:	08005873 	.word	0x08005873
 8005848:	0800586b 	.word	0x0800586b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800584c:	f7fd feb8 	bl	80035c0 <HAL_RCC_GetPCLK1Freq>
 8005850:	6178      	str	r0, [r7, #20]
        break;
 8005852:	e013      	b.n	800587c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005854:	f7fd fec6 	bl	80035e4 <HAL_RCC_GetPCLK2Freq>
 8005858:	6178      	str	r0, [r7, #20]
        break;
 800585a:	e00f      	b.n	800587c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800585c:	4b56      	ldr	r3, [pc, #344]	; (80059b8 <UART_SetConfig+0x498>)
 800585e:	617b      	str	r3, [r7, #20]
        break;
 8005860:	e00c      	b.n	800587c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005862:	f7fd fdf9 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 8005866:	6178      	str	r0, [r7, #20]
        break;
 8005868:	e008      	b.n	800587c <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800586a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800586e:	617b      	str	r3, [r7, #20]
        break;
 8005870:	e004      	b.n	800587c <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8005872:	2300      	movs	r3, #0
 8005874:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	76bb      	strb	r3, [r7, #26]
        break;
 800587a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800587c:	697b      	ldr	r3, [r7, #20]
 800587e:	2b00      	cmp	r3, #0
 8005880:	f000 8086 	beq.w	8005990 <UART_SetConfig+0x470>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005888:	4a4c      	ldr	r2, [pc, #304]	; (80059bc <UART_SetConfig+0x49c>)
 800588a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800588e:	461a      	mov	r2, r3
 8005890:	697b      	ldr	r3, [r7, #20]
 8005892:	fbb3 f3f2 	udiv	r3, r3, r2
 8005896:	005a      	lsls	r2, r3, #1
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	085b      	lsrs	r3, r3, #1
 800589e:	441a      	add	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	2b0f      	cmp	r3, #15
 80058b0:	d916      	bls.n	80058e0 <UART_SetConfig+0x3c0>
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058b8:	d212      	bcs.n	80058e0 <UART_SetConfig+0x3c0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	b29b      	uxth	r3, r3
 80058be:	f023 030f 	bic.w	r3, r3, #15
 80058c2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	085b      	lsrs	r3, r3, #1
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	f003 0307 	and.w	r3, r3, #7
 80058ce:	b29a      	uxth	r2, r3
 80058d0:	89fb      	ldrh	r3, [r7, #14]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	89fa      	ldrh	r2, [r7, #14]
 80058dc:	60da      	str	r2, [r3, #12]
 80058de:	e057      	b.n	8005990 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	76bb      	strb	r3, [r7, #26]
 80058e4:	e054      	b.n	8005990 <UART_SetConfig+0x470>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058e6:	7efb      	ldrb	r3, [r7, #27]
 80058e8:	2b08      	cmp	r3, #8
 80058ea:	d828      	bhi.n	800593e <UART_SetConfig+0x41e>
 80058ec:	a201      	add	r2, pc, #4	; (adr r2, 80058f4 <UART_SetConfig+0x3d4>)
 80058ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f2:	bf00      	nop
 80058f4:	08005919 	.word	0x08005919
 80058f8:	08005921 	.word	0x08005921
 80058fc:	08005929 	.word	0x08005929
 8005900:	0800593f 	.word	0x0800593f
 8005904:	0800592f 	.word	0x0800592f
 8005908:	0800593f 	.word	0x0800593f
 800590c:	0800593f 	.word	0x0800593f
 8005910:	0800593f 	.word	0x0800593f
 8005914:	08005937 	.word	0x08005937
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005918:	f7fd fe52 	bl	80035c0 <HAL_RCC_GetPCLK1Freq>
 800591c:	6178      	str	r0, [r7, #20]
        break;
 800591e:	e013      	b.n	8005948 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005920:	f7fd fe60 	bl	80035e4 <HAL_RCC_GetPCLK2Freq>
 8005924:	6178      	str	r0, [r7, #20]
        break;
 8005926:	e00f      	b.n	8005948 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005928:	4b23      	ldr	r3, [pc, #140]	; (80059b8 <UART_SetConfig+0x498>)
 800592a:	617b      	str	r3, [r7, #20]
        break;
 800592c:	e00c      	b.n	8005948 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800592e:	f7fd fd93 	bl	8003458 <HAL_RCC_GetSysClockFreq>
 8005932:	6178      	str	r0, [r7, #20]
        break;
 8005934:	e008      	b.n	8005948 <UART_SetConfig+0x428>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800593a:	617b      	str	r3, [r7, #20]
        break;
 800593c:	e004      	b.n	8005948 <UART_SetConfig+0x428>
      default:
        pclk = 0U;
 800593e:	2300      	movs	r3, #0
 8005940:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	76bb      	strb	r3, [r7, #26]
        break;
 8005946:	bf00      	nop
    }

    if (pclk != 0U)
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d020      	beq.n	8005990 <UART_SetConfig+0x470>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005952:	4a1a      	ldr	r2, [pc, #104]	; (80059bc <UART_SetConfig+0x49c>)
 8005954:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005958:	461a      	mov	r2, r3
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	fbb3 f2f2 	udiv	r2, r3, r2
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	685b      	ldr	r3, [r3, #4]
 8005964:	085b      	lsrs	r3, r3, #1
 8005966:	441a      	add	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005970:	b29b      	uxth	r3, r3
 8005972:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	2b0f      	cmp	r3, #15
 8005978:	d908      	bls.n	800598c <UART_SetConfig+0x46c>
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005980:	d204      	bcs.n	800598c <UART_SetConfig+0x46c>
      {
        huart->Instance->BRR = usartdiv;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	693a      	ldr	r2, [r7, #16]
 8005988:	60da      	str	r2, [r3, #12]
 800598a:	e001      	b.n	8005990 <UART_SetConfig+0x470>
      }
      else
      {
        ret = HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	76bb      	strb	r3, [r7, #26]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80059ac:	7ebb      	ldrb	r3, [r7, #26]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3720      	adds	r7, #32
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bdb0      	pop	{r4, r5, r7, pc}
 80059b6:	bf00      	nop
 80059b8:	00f42400 	.word	0x00f42400
 80059bc:	0800bfcc 	.word	0x0800bfcc

080059c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059cc:	f003 0301 	and.w	r3, r3, #1
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d00a      	beq.n	80059ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	430a      	orrs	r2, r1
 80059e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ee:	f003 0302 	and.w	r3, r3, #2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d00a      	beq.n	8005a0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	430a      	orrs	r2, r1
 8005a0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a10:	f003 0304 	and.w	r3, r3, #4
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00a      	beq.n	8005a2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a32:	f003 0308 	and.w	r3, r3, #8
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00a      	beq.n	8005a50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	430a      	orrs	r2, r1
 8005a4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a54:	f003 0310 	and.w	r3, r3, #16
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d00a      	beq.n	8005a72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a76:	f003 0320 	and.w	r3, r3, #32
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00a      	beq.n	8005a94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	430a      	orrs	r2, r1
 8005a92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d01a      	beq.n	8005ad6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005abe:	d10a      	bne.n	8005ad6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00a      	beq.n	8005af8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	430a      	orrs	r2, r1
 8005af6:	605a      	str	r2, [r3, #4]
  }
}
 8005af8:	bf00      	nop
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bc80      	pop	{r7}
 8005b00:	4770      	bx	lr

08005b02 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b086      	sub	sp, #24
 8005b06:	af02      	add	r7, sp, #8
 8005b08:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b12:	f7fb f8e3 	bl	8000cdc <HAL_GetTick>
 8005b16:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0308 	and.w	r3, r3, #8
 8005b22:	2b08      	cmp	r3, #8
 8005b24:	d10e      	bne.n	8005b44 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b26:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b2a:	9300      	str	r3, [sp, #0]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f82f 	bl	8005b98 <UART_WaitOnFlagUntilTimeout>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d001      	beq.n	8005b44 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b40:	2303      	movs	r3, #3
 8005b42:	e025      	b.n	8005b90 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0304 	and.w	r3, r3, #4
 8005b4e:	2b04      	cmp	r3, #4
 8005b50:	d10e      	bne.n	8005b70 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b52:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b56:	9300      	str	r3, [sp, #0]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 f819 	bl	8005b98 <UART_WaitOnFlagUntilTimeout>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d001      	beq.n	8005b70 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e00f      	b.n	8005b90 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2220      	movs	r2, #32
 8005b74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2220      	movs	r2, #32
 8005b7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2200      	movs	r2, #0
 8005b84:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b09c      	sub	sp, #112	; 0x70
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	603b      	str	r3, [r7, #0]
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ba8:	e0a9      	b.n	8005cfe <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005baa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb0:	f000 80a5 	beq.w	8005cfe <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bb4:	f7fb f892 	bl	8000cdc <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d302      	bcc.n	8005bca <UART_WaitOnFlagUntilTimeout+0x32>
 8005bc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d140      	bne.n	8005c4c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bd2:	e853 3f00 	ldrex	r3, [r3]
 8005bd6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005bd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005bde:	667b      	str	r3, [r7, #100]	; 0x64
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	461a      	mov	r2, r3
 8005be6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005be8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bea:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bec:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005bee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005bf0:	e841 2300 	strex	r3, r2, [r1]
 8005bf4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005bf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d1e6      	bne.n	8005bca <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	3308      	adds	r3, #8
 8005c02:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c06:	e853 3f00 	ldrex	r3, [r3]
 8005c0a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c0e:	f023 0301 	bic.w	r3, r3, #1
 8005c12:	663b      	str	r3, [r7, #96]	; 0x60
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	3308      	adds	r3, #8
 8005c1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005c1c:	64ba      	str	r2, [r7, #72]	; 0x48
 8005c1e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c20:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005c22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c24:	e841 2300 	strex	r3, r2, [r1]
 8005c28:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005c2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1e5      	bne.n	8005bfc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2220      	movs	r2, #32
 8005c34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2220      	movs	r2, #32
 8005c3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e069      	b.n	8005d20 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0304 	and.w	r3, r3, #4
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d051      	beq.n	8005cfe <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	69db      	ldr	r3, [r3, #28]
 8005c60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c68:	d149      	bne.n	8005cfe <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005c72:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7c:	e853 3f00 	ldrex	r3, [r3]
 8005c80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c88:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	461a      	mov	r2, r3
 8005c90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c92:	637b      	str	r3, [r7, #52]	; 0x34
 8005c94:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c9a:	e841 2300 	strex	r3, r2, [r1]
 8005c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d1e6      	bne.n	8005c74 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	3308      	adds	r3, #8
 8005cac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	e853 3f00 	ldrex	r3, [r3]
 8005cb4:	613b      	str	r3, [r7, #16]
   return(result);
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	f023 0301 	bic.w	r3, r3, #1
 8005cbc:	66bb      	str	r3, [r7, #104]	; 0x68
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	3308      	adds	r3, #8
 8005cc4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005cc6:	623a      	str	r2, [r7, #32]
 8005cc8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cca:	69f9      	ldr	r1, [r7, #28]
 8005ccc:	6a3a      	ldr	r2, [r7, #32]
 8005cce:	e841 2300 	strex	r3, r2, [r1]
 8005cd2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1e5      	bne.n	8005ca6 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2220      	movs	r2, #32
 8005cde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2220      	movs	r2, #32
 8005cee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e010      	b.n	8005d20 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	69da      	ldr	r2, [r3, #28]
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	4013      	ands	r3, r2
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	bf0c      	ite	eq
 8005d0e:	2301      	moveq	r3, #1
 8005d10:	2300      	movne	r3, #0
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	461a      	mov	r2, r3
 8005d16:	79fb      	ldrb	r3, [r7, #7]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	f43f af46 	beq.w	8005baa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d1e:	2300      	movs	r3, #0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3770      	adds	r7, #112	; 0x70
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b09d      	sub	sp, #116	; 0x74
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	4613      	mov	r3, r2
 8005d34:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	68ba      	ldr	r2, [r7, #8]
 8005d3a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	88fa      	ldrh	r2, [r7, #6]
 8005d40:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	88fa      	ldrh	r2, [r7, #6]
 8005d48:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d5a:	d10e      	bne.n	8005d7a <UART_Start_Receive_IT+0x52>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	691b      	ldr	r3, [r3, #16]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d105      	bne.n	8005d70 <UART_Start_Receive_IT+0x48>
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005d6a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005d6e:	e02d      	b.n	8005dcc <UART_Start_Receive_IT+0xa4>
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	22ff      	movs	r2, #255	; 0xff
 8005d74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005d78:	e028      	b.n	8005dcc <UART_Start_Receive_IT+0xa4>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	689b      	ldr	r3, [r3, #8]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d10d      	bne.n	8005d9e <UART_Start_Receive_IT+0x76>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d104      	bne.n	8005d94 <UART_Start_Receive_IT+0x6c>
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	22ff      	movs	r2, #255	; 0xff
 8005d8e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005d92:	e01b      	b.n	8005dcc <UART_Start_Receive_IT+0xa4>
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	227f      	movs	r2, #127	; 0x7f
 8005d98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005d9c:	e016      	b.n	8005dcc <UART_Start_Receive_IT+0xa4>
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005da6:	d10d      	bne.n	8005dc4 <UART_Start_Receive_IT+0x9c>
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d104      	bne.n	8005dba <UART_Start_Receive_IT+0x92>
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	227f      	movs	r2, #127	; 0x7f
 8005db4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005db8:	e008      	b.n	8005dcc <UART_Start_Receive_IT+0xa4>
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	223f      	movs	r2, #63	; 0x3f
 8005dbe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005dc2:	e003      	b.n	8005dcc <UART_Start_Receive_IT+0xa4>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2222      	movs	r2, #34	; 0x22
 8005dd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	3308      	adds	r3, #8
 8005de2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005de4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005de6:	e853 3f00 	ldrex	r3, [r3]
 8005dea:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005dec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dee:	f043 0301 	orr.w	r3, r3, #1
 8005df2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	3308      	adds	r3, #8
 8005dfa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005dfc:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005dfe:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e00:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005e02:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005e04:	e841 2300 	strex	r3, r2, [r1]
 8005e08:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005e0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1e5      	bne.n	8005ddc <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e18:	d14d      	bne.n	8005eb6 <UART_Start_Receive_IT+0x18e>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005e20:	88fa      	ldrh	r2, [r7, #6]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d347      	bcc.n	8005eb6 <UART_Start_Receive_IT+0x18e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e2e:	d107      	bne.n	8005e40 <UART_Start_Receive_IT+0x118>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	691b      	ldr	r3, [r3, #16]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d103      	bne.n	8005e40 <UART_Start_Receive_IT+0x118>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	4a38      	ldr	r2, [pc, #224]	; (8005f1c <UART_Start_Receive_IT+0x1f4>)
 8005e3c:	671a      	str	r2, [r3, #112]	; 0x70
 8005e3e:	e002      	b.n	8005e46 <UART_Start_Receive_IT+0x11e>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4a37      	ldr	r2, [pc, #220]	; (8005f20 <UART_Start_Receive_IT+0x1f8>)
 8005e44:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e56:	e853 3f00 	ldrex	r3, [r3]
 8005e5a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e62:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	461a      	mov	r2, r3
 8005e6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e6c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005e6e:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e70:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005e72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005e74:	e841 2300 	strex	r3, r2, [r1]
 8005e78:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005e7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1e6      	bne.n	8005e4e <UART_Start_Receive_IT+0x126>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	3308      	adds	r3, #8
 8005e86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e8a:	e853 3f00 	ldrex	r3, [r3]
 8005e8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e96:	667b      	str	r3, [r7, #100]	; 0x64
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	3308      	adds	r3, #8
 8005e9e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8005ea0:	637a      	str	r2, [r7, #52]	; 0x34
 8005ea2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ea6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ea8:	e841 2300 	strex	r3, r2, [r1]
 8005eac:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d1e5      	bne.n	8005e80 <UART_Start_Receive_IT+0x158>
 8005eb4:	e02c      	b.n	8005f10 <UART_Start_Receive_IT+0x1e8>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	689b      	ldr	r3, [r3, #8]
 8005eba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ebe:	d107      	bne.n	8005ed0 <UART_Start_Receive_IT+0x1a8>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d103      	bne.n	8005ed0 <UART_Start_Receive_IT+0x1a8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	4a16      	ldr	r2, [pc, #88]	; (8005f24 <UART_Start_Receive_IT+0x1fc>)
 8005ecc:	671a      	str	r2, [r3, #112]	; 0x70
 8005ece:	e002      	b.n	8005ed6 <UART_Start_Receive_IT+0x1ae>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	4a15      	ldr	r2, [pc, #84]	; (8005f28 <UART_Start_Receive_IT+0x200>)
 8005ed4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	e853 3f00 	ldrex	r3, [r3]
 8005eea:	613b      	str	r3, [r7, #16]
   return(result);
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005ef2:	663b      	str	r3, [r7, #96]	; 0x60
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	461a      	mov	r2, r3
 8005efa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005efc:	623b      	str	r3, [r7, #32]
 8005efe:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f00:	69f9      	ldr	r1, [r7, #28]
 8005f02:	6a3a      	ldr	r2, [r7, #32]
 8005f04:	e841 2300 	strex	r3, r2, [r1]
 8005f08:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f0a:	69bb      	ldr	r3, [r7, #24]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d1e6      	bne.n	8005ede <UART_Start_Receive_IT+0x1b6>
  }
  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3774      	adds	r7, #116	; 0x74
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bc80      	pop	{r7}
 8005f1a:	4770      	bx	lr
 8005f1c:	080067e9 	.word	0x080067e9
 8005f20:	080064f1 	.word	0x080064f1
 8005f24:	0800638f 	.word	0x0800638f
 8005f28:	0800622f 	.word	0x0800622f

08005f2c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b08f      	sub	sp, #60	; 0x3c
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f3a:	6a3b      	ldr	r3, [r7, #32]
 8005f3c:	e853 3f00 	ldrex	r3, [r3]
 8005f40:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005f48:	637b      	str	r3, [r7, #52]	; 0x34
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f54:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f5a:	e841 2300 	strex	r3, r2, [r1]
 8005f5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d1e6      	bne.n	8005f34 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	3308      	adds	r3, #8
 8005f6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	e853 3f00 	ldrex	r3, [r3]
 8005f74:	60bb      	str	r3, [r7, #8]
   return(result);
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005f7c:	633b      	str	r3, [r7, #48]	; 0x30
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	3308      	adds	r3, #8
 8005f84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f86:	61ba      	str	r2, [r7, #24]
 8005f88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8a:	6979      	ldr	r1, [r7, #20]
 8005f8c:	69ba      	ldr	r2, [r7, #24]
 8005f8e:	e841 2300 	strex	r3, r2, [r1]
 8005f92:	613b      	str	r3, [r7, #16]
   return(result);
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1e5      	bne.n	8005f66 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2220      	movs	r2, #32
 8005f9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 8005fa2:	bf00      	nop
 8005fa4:	373c      	adds	r7, #60	; 0x3c
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bc80      	pop	{r7}
 8005faa:	4770      	bx	lr

08005fac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b095      	sub	sp, #84	; 0x54
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fbc:	e853 3f00 	ldrex	r3, [r3]
 8005fc0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	461a      	mov	r2, r3
 8005fd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fd2:	643b      	str	r3, [r7, #64]	; 0x40
 8005fd4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fd8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fda:	e841 2300 	strex	r3, r2, [r1]
 8005fde:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1e6      	bne.n	8005fb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	3308      	adds	r3, #8
 8005fec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fee:	6a3b      	ldr	r3, [r7, #32]
 8005ff0:	e853 3f00 	ldrex	r3, [r3]
 8005ff4:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ffc:	f023 0301 	bic.w	r3, r3, #1
 8006000:	64bb      	str	r3, [r7, #72]	; 0x48
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	3308      	adds	r3, #8
 8006008:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800600a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800600c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006010:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006012:	e841 2300 	strex	r3, r2, [r1]
 8006016:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1e3      	bne.n	8005fe6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006022:	2b01      	cmp	r3, #1
 8006024:	d118      	bne.n	8006058 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	e853 3f00 	ldrex	r3, [r3]
 8006032:	60bb      	str	r3, [r7, #8]
   return(result);
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	f023 0310 	bic.w	r3, r3, #16
 800603a:	647b      	str	r3, [r7, #68]	; 0x44
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	461a      	mov	r2, r3
 8006042:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006044:	61bb      	str	r3, [r7, #24]
 8006046:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006048:	6979      	ldr	r1, [r7, #20]
 800604a:	69ba      	ldr	r2, [r7, #24]
 800604c:	e841 2300 	strex	r3, r2, [r1]
 8006050:	613b      	str	r3, [r7, #16]
   return(result);
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d1e6      	bne.n	8006026 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2220      	movs	r2, #32
 800605c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800606c:	bf00      	nop
 800606e:	3754      	adds	r7, #84	; 0x54
 8006070:	46bd      	mov	sp, r7
 8006072:	bc80      	pop	{r7}
 8006074:	4770      	bx	lr

08006076 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006076:	b580      	push	{r7, lr}
 8006078:	b090      	sub	sp, #64	; 0x40
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006082:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f003 0320 	and.w	r3, r3, #32
 800608e:	2b00      	cmp	r3, #0
 8006090:	d137      	bne.n	8006102 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8006092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006094:	2200      	movs	r2, #0
 8006096:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800609a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	3308      	adds	r3, #8
 80060a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a4:	e853 3f00 	ldrex	r3, [r3]
 80060a8:	623b      	str	r3, [r7, #32]
   return(result);
 80060aa:	6a3b      	ldr	r3, [r7, #32]
 80060ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80060b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	3308      	adds	r3, #8
 80060b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80060ba:	633a      	str	r2, [r7, #48]	; 0x30
 80060bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060c2:	e841 2300 	strex	r3, r2, [r1]
 80060c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d1e5      	bne.n	800609a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	e853 3f00 	ldrex	r3, [r3]
 80060da:	60fb      	str	r3, [r7, #12]
   return(result);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060e2:	637b      	str	r3, [r7, #52]	; 0x34
 80060e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	461a      	mov	r2, r3
 80060ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060ec:	61fb      	str	r3, [r7, #28]
 80060ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f0:	69b9      	ldr	r1, [r7, #24]
 80060f2:	69fa      	ldr	r2, [r7, #28]
 80060f4:	e841 2300 	strex	r3, r2, [r1]
 80060f8:	617b      	str	r3, [r7, #20]
   return(result);
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1e6      	bne.n	80060ce <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006100:	e002      	b.n	8006108 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8006102:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006104:	f7fb f93a 	bl	800137c <HAL_UART_TxCpltCallback>
}
 8006108:	bf00      	nop
 800610a:	3740      	adds	r7, #64	; 0x40
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800611e:	68f8      	ldr	r0, [r7, #12]
 8006120:	f7ff f9e0 	bl	80054e4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006124:	bf00      	nop
 8006126:	3710      	adds	r7, #16
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b086      	sub	sp, #24
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006138:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006140:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006148:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	689b      	ldr	r3, [r3, #8]
 8006150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006154:	2b80      	cmp	r3, #128	; 0x80
 8006156:	d109      	bne.n	800616c <UART_DMAError+0x40>
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	2b21      	cmp	r3, #33	; 0x21
 800615c:	d106      	bne.n	800616c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	2200      	movs	r2, #0
 8006162:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006166:	6978      	ldr	r0, [r7, #20]
 8006168:	f7ff fee0 	bl	8005f2c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	689b      	ldr	r3, [r3, #8]
 8006172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006176:	2b40      	cmp	r3, #64	; 0x40
 8006178:	d109      	bne.n	800618e <UART_DMAError+0x62>
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2b22      	cmp	r3, #34	; 0x22
 800617e:	d106      	bne.n	800618e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	2200      	movs	r2, #0
 8006184:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006188:	6978      	ldr	r0, [r7, #20]
 800618a:	f7ff ff0f 	bl	8005fac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006194:	f043 0210 	orr.w	r2, r3, #16
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800619e:	6978      	ldr	r0, [r7, #20]
 80061a0:	f7ff f9a9 	bl	80054f6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061a4:	bf00      	nop
 80061a6:	3718      	adds	r7, #24
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80061ac:	b580      	push	{r7, lr}
 80061ae:	b084      	sub	sp, #16
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061ca:	68f8      	ldr	r0, [r7, #12]
 80061cc:	f7ff f993 	bl	80054f6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061d0:	bf00      	nop
 80061d2:	3710      	adds	r7, #16
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b088      	sub	sp, #32
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	e853 3f00 	ldrex	r3, [r3]
 80061ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061f4:	61fb      	str	r3, [r7, #28]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	461a      	mov	r2, r3
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	61bb      	str	r3, [r7, #24]
 8006200:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006202:	6979      	ldr	r1, [r7, #20]
 8006204:	69ba      	ldr	r2, [r7, #24]
 8006206:	e841 2300 	strex	r3, r2, [r1]
 800620a:	613b      	str	r3, [r7, #16]
   return(result);
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1e6      	bne.n	80061e0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2220      	movs	r2, #32
 8006216:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f7fb f8ab 	bl	800137c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006226:	bf00      	nop
 8006228:	3720      	adds	r7, #32
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800622e:	b580      	push	{r7, lr}
 8006230:	b096      	sub	sp, #88	; 0x58
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800623c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006246:	2b22      	cmp	r3, #34	; 0x22
 8006248:	f040 8095 	bne.w	8006376 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006252:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006256:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800625a:	b2d9      	uxtb	r1, r3
 800625c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006260:	b2da      	uxtb	r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006266:	400a      	ands	r2, r1
 8006268:	b2d2      	uxtb	r2, r2
 800626a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006270:	1c5a      	adds	r2, r3, #1
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800627c:	b29b      	uxth	r3, r3
 800627e:	3b01      	subs	r3, #1
 8006280:	b29a      	uxth	r2, r3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800628e:	b29b      	uxth	r3, r3
 8006290:	2b00      	cmp	r3, #0
 8006292:	d178      	bne.n	8006386 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800629c:	e853 3f00 	ldrex	r3, [r3]
 80062a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80062a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062a8:	653b      	str	r3, [r7, #80]	; 0x50
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	461a      	mov	r2, r3
 80062b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062b2:	647b      	str	r3, [r7, #68]	; 0x44
 80062b4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062ba:	e841 2300 	strex	r3, r2, [r1]
 80062be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1e6      	bne.n	8006294 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	3308      	adds	r3, #8
 80062cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d0:	e853 3f00 	ldrex	r3, [r3]
 80062d4:	623b      	str	r3, [r7, #32]
   return(result);
 80062d6:	6a3b      	ldr	r3, [r7, #32]
 80062d8:	f023 0301 	bic.w	r3, r3, #1
 80062dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	3308      	adds	r3, #8
 80062e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80062e6:	633a      	str	r2, [r7, #48]	; 0x30
 80062e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062ee:	e841 2300 	strex	r3, r2, [r1]
 80062f2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1e5      	bne.n	80062c6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2220      	movs	r2, #32
 80062fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800630c:	2b01      	cmp	r3, #1
 800630e:	d12e      	bne.n	800636e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2200      	movs	r2, #0
 8006314:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	e853 3f00 	ldrex	r3, [r3]
 8006322:	60fb      	str	r3, [r7, #12]
   return(result);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	f023 0310 	bic.w	r3, r3, #16
 800632a:	64bb      	str	r3, [r7, #72]	; 0x48
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	461a      	mov	r2, r3
 8006332:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006334:	61fb      	str	r3, [r7, #28]
 8006336:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006338:	69b9      	ldr	r1, [r7, #24]
 800633a:	69fa      	ldr	r2, [r7, #28]
 800633c:	e841 2300 	strex	r3, r2, [r1]
 8006340:	617b      	str	r3, [r7, #20]
   return(result);
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1e6      	bne.n	8006316 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	69db      	ldr	r3, [r3, #28]
 800634e:	f003 0310 	and.w	r3, r3, #16
 8006352:	2b10      	cmp	r3, #16
 8006354:	d103      	bne.n	800635e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2210      	movs	r2, #16
 800635c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006364:	4619      	mov	r1, r3
 8006366:	6878      	ldr	r0, [r7, #4]
 8006368:	f7ff f8ce 	bl	8005508 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800636c:	e00b      	b.n	8006386 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7fb f812 	bl	8001398 <HAL_UART_RxCpltCallback>
}
 8006374:	e007      	b.n	8006386 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	699a      	ldr	r2, [r3, #24]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f042 0208 	orr.w	r2, r2, #8
 8006384:	619a      	str	r2, [r3, #24]
}
 8006386:	bf00      	nop
 8006388:	3758      	adds	r7, #88	; 0x58
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800638e:	b580      	push	{r7, lr}
 8006390:	b096      	sub	sp, #88	; 0x58
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800639c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a6:	2b22      	cmp	r3, #34	; 0x22
 80063a8:	f040 8095 	bne.w	80064d6 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ba:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80063bc:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80063c0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80063c4:	4013      	ands	r3, r2
 80063c6:	b29a      	uxth	r2, r3
 80063c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063ca:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063d0:	1c9a      	adds	r2, r3, #2
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80063dc:	b29b      	uxth	r3, r3
 80063de:	3b01      	subs	r3, #1
 80063e0:	b29a      	uxth	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d178      	bne.n	80064e6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063fc:	e853 3f00 	ldrex	r3, [r3]
 8006400:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006404:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006408:	64fb      	str	r3, [r7, #76]	; 0x4c
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	461a      	mov	r2, r3
 8006410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006412:	643b      	str	r3, [r7, #64]	; 0x40
 8006414:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006416:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006418:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800641a:	e841 2300 	strex	r3, r2, [r1]
 800641e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006422:	2b00      	cmp	r3, #0
 8006424:	d1e6      	bne.n	80063f4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	3308      	adds	r3, #8
 800642c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800642e:	6a3b      	ldr	r3, [r7, #32]
 8006430:	e853 3f00 	ldrex	r3, [r3]
 8006434:	61fb      	str	r3, [r7, #28]
   return(result);
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	f023 0301 	bic.w	r3, r3, #1
 800643c:	64bb      	str	r3, [r7, #72]	; 0x48
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	3308      	adds	r3, #8
 8006444:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006446:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006448:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800644a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800644c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800644e:	e841 2300 	strex	r3, r2, [r1]
 8006452:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006456:	2b00      	cmp	r3, #0
 8006458:	d1e5      	bne.n	8006426 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2220      	movs	r2, #32
 800645e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800646c:	2b01      	cmp	r3, #1
 800646e:	d12e      	bne.n	80064ce <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2200      	movs	r2, #0
 8006474:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	e853 3f00 	ldrex	r3, [r3]
 8006482:	60bb      	str	r3, [r7, #8]
   return(result);
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	f023 0310 	bic.w	r3, r3, #16
 800648a:	647b      	str	r3, [r7, #68]	; 0x44
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	461a      	mov	r2, r3
 8006492:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006494:	61bb      	str	r3, [r7, #24]
 8006496:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006498:	6979      	ldr	r1, [r7, #20]
 800649a:	69ba      	ldr	r2, [r7, #24]
 800649c:	e841 2300 	strex	r3, r2, [r1]
 80064a0:	613b      	str	r3, [r7, #16]
   return(result);
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1e6      	bne.n	8006476 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	69db      	ldr	r3, [r3, #28]
 80064ae:	f003 0310 	and.w	r3, r3, #16
 80064b2:	2b10      	cmp	r3, #16
 80064b4:	d103      	bne.n	80064be <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	2210      	movs	r2, #16
 80064bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80064c4:	4619      	mov	r1, r3
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7ff f81e 	bl	8005508 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80064cc:	e00b      	b.n	80064e6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f7fa ff62 	bl	8001398 <HAL_UART_RxCpltCallback>
}
 80064d4:	e007      	b.n	80064e6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	699a      	ldr	r2, [r3, #24]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f042 0208 	orr.w	r2, r2, #8
 80064e4:	619a      	str	r2, [r3, #24]
}
 80064e6:	bf00      	nop
 80064e8:	3758      	adds	r7, #88	; 0x58
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
	...

080064f0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b0a6      	sub	sp, #152	; 0x98
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80064fe:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	69db      	ldr	r3, [r3, #28]
 8006508:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006526:	2b22      	cmp	r3, #34	; 0x22
 8006528:	f040 814f 	bne.w	80067ca <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006532:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006536:	e0f6      	b.n	8006726 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006542:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8006546:	b2d9      	uxtb	r1, r3
 8006548:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 800654c:	b2da      	uxtb	r2, r3
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006552:	400a      	ands	r2, r1
 8006554:	b2d2      	uxtb	r2, r2
 8006556:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800655c:	1c5a      	adds	r2, r3, #1
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006568:	b29b      	uxth	r3, r3
 800656a:	3b01      	subs	r3, #1
 800656c:	b29a      	uxth	r2, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	69db      	ldr	r3, [r3, #28]
 800657a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800657e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006582:	f003 0307 	and.w	r3, r3, #7
 8006586:	2b00      	cmp	r3, #0
 8006588:	d053      	beq.n	8006632 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800658a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800658e:	f003 0301 	and.w	r3, r3, #1
 8006592:	2b00      	cmp	r3, #0
 8006594:	d011      	beq.n	80065ba <UART_RxISR_8BIT_FIFOEN+0xca>
 8006596:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800659a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00b      	beq.n	80065ba <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	2201      	movs	r2, #1
 80065a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065b0:	f043 0201 	orr.w	r2, r3, #1
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80065be:	f003 0302 	and.w	r3, r3, #2
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d011      	beq.n	80065ea <UART_RxISR_8BIT_FIFOEN+0xfa>
 80065c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00b      	beq.n	80065ea <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	2202      	movs	r2, #2
 80065d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065e0:	f043 0204 	orr.w	r2, r3, #4
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80065ee:	f003 0304 	and.w	r3, r3, #4
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d011      	beq.n	800661a <UART_RxISR_8BIT_FIFOEN+0x12a>
 80065f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00b      	beq.n	800661a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2204      	movs	r2, #4
 8006608:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006610:	f043 0202 	orr.w	r2, r3, #2
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006620:	2b00      	cmp	r3, #0
 8006622:	d006      	beq.n	8006632 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f7fe ff66 	bl	80054f6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006638:	b29b      	uxth	r3, r3
 800663a:	2b00      	cmp	r3, #0
 800663c:	d173      	bne.n	8006726 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006644:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006646:	e853 3f00 	ldrex	r3, [r3]
 800664a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800664c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800664e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006652:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	461a      	mov	r2, r3
 800665c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006660:	66bb      	str	r3, [r7, #104]	; 0x68
 8006662:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006664:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006666:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006668:	e841 2300 	strex	r3, r2, [r1]
 800666c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800666e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006670:	2b00      	cmp	r3, #0
 8006672:	d1e4      	bne.n	800663e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	3308      	adds	r3, #8
 800667a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800667e:	e853 3f00 	ldrex	r3, [r3]
 8006682:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006684:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006686:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800668a:	f023 0301 	bic.w	r3, r3, #1
 800668e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	3308      	adds	r3, #8
 8006696:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006698:	657a      	str	r2, [r7, #84]	; 0x54
 800669a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800669c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800669e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80066a0:	e841 2300 	strex	r3, r2, [r1]
 80066a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80066a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1e3      	bne.n	8006674 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2220      	movs	r2, #32
 80066b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d12e      	bne.n	8006720 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d0:	e853 3f00 	ldrex	r3, [r3]
 80066d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d8:	f023 0310 	bic.w	r3, r3, #16
 80066dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	461a      	mov	r2, r3
 80066e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066e6:	643b      	str	r3, [r7, #64]	; 0x40
 80066e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066ee:	e841 2300 	strex	r3, r2, [r1]
 80066f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1e6      	bne.n	80066c8 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	69db      	ldr	r3, [r3, #28]
 8006700:	f003 0310 	and.w	r3, r3, #16
 8006704:	2b10      	cmp	r3, #16
 8006706:	d103      	bne.n	8006710 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2210      	movs	r2, #16
 800670e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006716:	4619      	mov	r1, r3
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f7fe fef5 	bl	8005508 <HAL_UARTEx_RxEventCallback>
 800671e:	e002      	b.n	8006726 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006720:	6878      	ldr	r0, [r7, #4]
 8006722:	f7fa fe39 	bl	8001398 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006726:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800672a:	2b00      	cmp	r3, #0
 800672c:	d006      	beq.n	800673c <UART_RxISR_8BIT_FIFOEN+0x24c>
 800672e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006732:	f003 0320 	and.w	r3, r3, #32
 8006736:	2b00      	cmp	r3, #0
 8006738:	f47f aefe 	bne.w	8006538 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006742:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006746:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800674a:	2b00      	cmp	r3, #0
 800674c:	d045      	beq.n	80067da <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006754:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006758:	429a      	cmp	r2, r3
 800675a:	d23e      	bcs.n	80067da <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	3308      	adds	r3, #8
 8006762:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006764:	6a3b      	ldr	r3, [r7, #32]
 8006766:	e853 3f00 	ldrex	r3, [r3]
 800676a:	61fb      	str	r3, [r7, #28]
   return(result);
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006772:	673b      	str	r3, [r7, #112]	; 0x70
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	3308      	adds	r3, #8
 800677a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800677c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800677e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006780:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006784:	e841 2300 	strex	r3, r2, [r1]
 8006788:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800678a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678c:	2b00      	cmp	r3, #0
 800678e:	d1e5      	bne.n	800675c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a14      	ldr	r2, [pc, #80]	; (80067e4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8006794:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	e853 3f00 	ldrex	r3, [r3]
 80067a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	f043 0320 	orr.w	r3, r3, #32
 80067aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	461a      	mov	r2, r3
 80067b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067b4:	61bb      	str	r3, [r7, #24]
 80067b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b8:	6979      	ldr	r1, [r7, #20]
 80067ba:	69ba      	ldr	r2, [r7, #24]
 80067bc:	e841 2300 	strex	r3, r2, [r1]
 80067c0:	613b      	str	r3, [r7, #16]
   return(result);
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d1e6      	bne.n	8006796 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80067c8:	e007      	b.n	80067da <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	699a      	ldr	r2, [r3, #24]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f042 0208 	orr.w	r2, r2, #8
 80067d8:	619a      	str	r2, [r3, #24]
}
 80067da:	bf00      	nop
 80067dc:	3798      	adds	r7, #152	; 0x98
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	0800622f 	.word	0x0800622f

080067e8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b0a8      	sub	sp, #160	; 0xa0
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80067f6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	69db      	ldr	r3, [r3, #28]
 8006800:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800681e:	2b22      	cmp	r3, #34	; 0x22
 8006820:	f040 8153 	bne.w	8006aca <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800682a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800682e:	e0fa      	b.n	8006a26 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006836:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800683e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8006842:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8006846:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800684a:	4013      	ands	r3, r2
 800684c:	b29a      	uxth	r2, r3
 800684e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006852:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006858:	1c9a      	adds	r2, r3, #2
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006864:	b29b      	uxth	r3, r3
 8006866:	3b01      	subs	r3, #1
 8006868:	b29a      	uxth	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800687a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800687e:	f003 0307 	and.w	r3, r3, #7
 8006882:	2b00      	cmp	r3, #0
 8006884:	d053      	beq.n	800692e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006886:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800688a:	f003 0301 	and.w	r3, r3, #1
 800688e:	2b00      	cmp	r3, #0
 8006890:	d011      	beq.n	80068b6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8006892:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00b      	beq.n	80068b6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2201      	movs	r2, #1
 80068a4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068ac:	f043 0201 	orr.w	r2, r3, #1
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068ba:	f003 0302 	and.w	r3, r3, #2
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d011      	beq.n	80068e6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80068c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80068c6:	f003 0301 	and.w	r3, r3, #1
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00b      	beq.n	80068e6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2202      	movs	r2, #2
 80068d4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068dc:	f043 0204 	orr.w	r2, r3, #4
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068ea:	f003 0304 	and.w	r3, r3, #4
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d011      	beq.n	8006916 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80068f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d00b      	beq.n	8006916 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2204      	movs	r2, #4
 8006904:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800690c:	f043 0202 	orr.w	r2, r3, #2
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800691c:	2b00      	cmp	r3, #0
 800691e:	d006      	beq.n	800692e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f7fe fde8 	bl	80054f6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006934:	b29b      	uxth	r3, r3
 8006936:	2b00      	cmp	r3, #0
 8006938:	d175      	bne.n	8006a26 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006940:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006942:	e853 3f00 	ldrex	r3, [r3]
 8006946:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006948:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800694a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800694e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	461a      	mov	r2, r3
 8006958:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800695c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800695e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006960:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006962:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006964:	e841 2300 	strex	r3, r2, [r1]
 8006968:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800696a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800696c:	2b00      	cmp	r3, #0
 800696e:	d1e4      	bne.n	800693a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	3308      	adds	r3, #8
 8006976:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800697a:	e853 3f00 	ldrex	r3, [r3]
 800697e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006980:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006982:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006986:	f023 0301 	bic.w	r3, r3, #1
 800698a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	3308      	adds	r3, #8
 8006994:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006998:	65ba      	str	r2, [r7, #88]	; 0x58
 800699a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800699e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069a0:	e841 2300 	strex	r3, r2, [r1]
 80069a4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80069a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1e1      	bne.n	8006970 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2220      	movs	r2, #32
 80069b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069be:	2b01      	cmp	r3, #1
 80069c0:	d12e      	bne.n	8006a20 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2200      	movs	r2, #0
 80069c6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d0:	e853 3f00 	ldrex	r3, [r3]
 80069d4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069d8:	f023 0310 	bic.w	r3, r3, #16
 80069dc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	461a      	mov	r2, r3
 80069e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80069e6:	647b      	str	r3, [r7, #68]	; 0x44
 80069e8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069ec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069ee:	e841 2300 	strex	r3, r2, [r1]
 80069f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1e6      	bne.n	80069c8 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	69db      	ldr	r3, [r3, #28]
 8006a00:	f003 0310 	and.w	r3, r3, #16
 8006a04:	2b10      	cmp	r3, #16
 8006a06:	d103      	bne.n	8006a10 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2210      	movs	r2, #16
 8006a0e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006a16:	4619      	mov	r1, r3
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f7fe fd75 	bl	8005508 <HAL_UARTEx_RxEventCallback>
 8006a1e:	e002      	b.n	8006a26 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f7fa fcb9 	bl	8001398 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006a26:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d006      	beq.n	8006a3c <UART_RxISR_16BIT_FIFOEN+0x254>
 8006a2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a32:	f003 0320 	and.w	r3, r3, #32
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f47f aefa 	bne.w	8006830 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a42:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006a46:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d045      	beq.n	8006ada <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006a54:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d23e      	bcs.n	8006ada <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	3308      	adds	r3, #8
 8006a62:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a66:	e853 3f00 	ldrex	r3, [r3]
 8006a6a:	623b      	str	r3, [r7, #32]
   return(result);
 8006a6c:	6a3b      	ldr	r3, [r7, #32]
 8006a6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a72:	677b      	str	r3, [r7, #116]	; 0x74
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	3308      	adds	r3, #8
 8006a7a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006a7c:	633a      	str	r2, [r7, #48]	; 0x30
 8006a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a84:	e841 2300 	strex	r3, r2, [r1]
 8006a88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1e5      	bne.n	8006a5c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	4a14      	ldr	r2, [pc, #80]	; (8006ae4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8006a94:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	e853 3f00 	ldrex	r3, [r3]
 8006aa2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f043 0320 	orr.w	r3, r3, #32
 8006aaa:	673b      	str	r3, [r7, #112]	; 0x70
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006ab4:	61fb      	str	r3, [r7, #28]
 8006ab6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab8:	69b9      	ldr	r1, [r7, #24]
 8006aba:	69fa      	ldr	r2, [r7, #28]
 8006abc:	e841 2300 	strex	r3, r2, [r1]
 8006ac0:	617b      	str	r3, [r7, #20]
   return(result);
 8006ac2:	697b      	ldr	r3, [r7, #20]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1e6      	bne.n	8006a96 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ac8:	e007      	b.n	8006ada <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	699a      	ldr	r2, [r3, #24]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f042 0208 	orr.w	r2, r2, #8
 8006ad8:	619a      	str	r2, [r3, #24]
}
 8006ada:	bf00      	nop
 8006adc:	37a0      	adds	r7, #160	; 0xa0
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}
 8006ae2:	bf00      	nop
 8006ae4:	0800638f 	.word	0x0800638f

08006ae8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006af0:	bf00      	nop
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bc80      	pop	{r7}
 8006af8:	4770      	bx	lr

08006afa <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b083      	sub	sp, #12
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006b02:	bf00      	nop
 8006b04:	370c      	adds	r7, #12
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bc80      	pop	{r7}
 8006b0a:	4770      	bx	lr

08006b0c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bc80      	pop	{r7}
 8006b1c:	4770      	bx	lr

08006b1e <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b088      	sub	sp, #32
 8006b22:	af02      	add	r7, sp, #8
 8006b24:	60f8      	str	r0, [r7, #12]
 8006b26:	1d3b      	adds	r3, r7, #4
 8006b28:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d101      	bne.n	8006b3e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 8006b3a:	2302      	movs	r3, #2
 8006b3c:	e046      	b.n	8006bcc <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2201      	movs	r2, #1
 8006b42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2224      	movs	r2, #36	; 0x24
 8006b4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f022 0201 	bic.w	r2, r2, #1
 8006b5c:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	430a      	orrs	r2, r1
 8006b70:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d105      	bne.n	8006b84 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8006b78:	1d3b      	adds	r3, r7, #4
 8006b7a:	e893 0006 	ldmia.w	r3, {r1, r2}
 8006b7e:	68f8      	ldr	r0, [r7, #12]
 8006b80:	f000 f911 	bl	8006da6 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681a      	ldr	r2, [r3, #0]
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f042 0201 	orr.w	r2, r2, #1
 8006b92:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b94:	f7fa f8a2 	bl	8000cdc <HAL_GetTick>
 8006b98:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b9a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006b9e:	9300      	str	r3, [sp, #0]
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f7fe fff5 	bl	8005b98 <UART_WaitOnFlagUntilTimeout>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d002      	beq.n	8006bba <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8006bb4:	2303      	movs	r3, #3
 8006bb6:	75fb      	strb	r3, [r7, #23]
 8006bb8:	e003      	b.n	8006bc2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 8006bca:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3718      	adds	r7, #24
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	bd80      	pop	{r7, pc}

08006bd4 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b089      	sub	sp, #36	; 0x24
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d101      	bne.n	8006bea <HAL_UARTEx_EnableStopMode+0x16>
 8006be6:	2302      	movs	r3, #2
 8006be8:	e021      	b.n	8006c2e <HAL_UARTEx_EnableStopMode+0x5a>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2201      	movs	r2, #1
 8006bee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	e853 3f00 	ldrex	r3, [r3]
 8006bfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	f043 0302 	orr.w	r3, r3, #2
 8006c06:	61fb      	str	r3, [r7, #28]
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	61bb      	str	r3, [r7, #24]
 8006c12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c14:	6979      	ldr	r1, [r7, #20]
 8006c16:	69ba      	ldr	r2, [r7, #24]
 8006c18:	e841 2300 	strex	r3, r2, [r1]
 8006c1c:	613b      	str	r3, [r7, #16]
   return(result);
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d1e6      	bne.n	8006bf2 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3724      	adds	r7, #36	; 0x24
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bc80      	pop	{r7}
 8006c36:	4770      	bx	lr

08006c38 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d101      	bne.n	8006c4e <HAL_UARTEx_EnableFifoMode+0x16>
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	e02b      	b.n	8006ca6 <HAL_UARTEx_EnableFifoMode+0x6e>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2201      	movs	r2, #1
 8006c52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2224      	movs	r2, #36	; 0x24
 8006c5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f022 0201 	bic.w	r2, r2, #1
 8006c74:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c7c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006c84:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 f8ac 	bl	8006dec <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2220      	movs	r2, #32
 8006c98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3710      	adds	r7, #16
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}

08006cae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006cae:	b580      	push	{r7, lr}
 8006cb0:	b084      	sub	sp, #16
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
 8006cb6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d101      	bne.n	8006cc6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006cc2:	2302      	movs	r3, #2
 8006cc4:	e02d      	b.n	8006d22 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2201      	movs	r2, #1
 8006cca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2224      	movs	r2, #36	; 0x24
 8006cd2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f022 0201 	bic.w	r2, r2, #1
 8006cec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	683a      	ldr	r2, [r7, #0]
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 f872 	bl	8006dec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2220      	movs	r2, #32
 8006d14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}

08006d2a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d2a:	b580      	push	{r7, lr}
 8006d2c:	b084      	sub	sp, #16
 8006d2e:	af00      	add	r7, sp, #0
 8006d30:	6078      	str	r0, [r7, #4]
 8006d32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d101      	bne.n	8006d42 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006d3e:	2302      	movs	r3, #2
 8006d40:	e02d      	b.n	8006d9e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2201      	movs	r2, #1
 8006d46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2224      	movs	r2, #36	; 0x24
 8006d4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f022 0201 	bic.w	r2, r2, #1
 8006d68:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	683a      	ldr	r2, [r7, #0]
 8006d7a:	430a      	orrs	r2, r1
 8006d7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f834 	bl	8006dec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2220      	movs	r2, #32
 8006d90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3710      	adds	r7, #16
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}

08006da6 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8006da6:	b480      	push	{r7}
 8006da8:	b085      	sub	sp, #20
 8006daa:	af00      	add	r7, sp, #0
 8006dac:	60f8      	str	r0, [r7, #12]
 8006dae:	1d3b      	adds	r3, r7, #4
 8006db0:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	f023 0210 	bic.w	r2, r3, #16
 8006dbe:	893b      	ldrh	r3, [r7, #8]
 8006dc0:	4619      	mov	r1, r3
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	430a      	orrs	r2, r1
 8006dc8:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 8006dd4:	7abb      	ldrb	r3, [r7, #10]
 8006dd6:	061a      	lsls	r2, r3, #24
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	430a      	orrs	r2, r1
 8006dde:	605a      	str	r2, [r3, #4]
}
 8006de0:	bf00      	nop
 8006de2:	3714      	adds	r7, #20
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bc80      	pop	{r7}
 8006de8:	4770      	bx	lr
	...

08006dec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b085      	sub	sp, #20
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d108      	bne.n	8006e0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2201      	movs	r2, #1
 8006e00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e0c:	e031      	b.n	8006e72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e0e:	2308      	movs	r3, #8
 8006e10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e12:	2308      	movs	r3, #8
 8006e14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	0e5b      	lsrs	r3, r3, #25
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	f003 0307 	and.w	r3, r3, #7
 8006e24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	0f5b      	lsrs	r3, r3, #29
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	f003 0307 	and.w	r3, r3, #7
 8006e34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e36:	7bbb      	ldrb	r3, [r7, #14]
 8006e38:	7b3a      	ldrb	r2, [r7, #12]
 8006e3a:	4910      	ldr	r1, [pc, #64]	; (8006e7c <UARTEx_SetNbDataToProcess+0x90>)
 8006e3c:	5c8a      	ldrb	r2, [r1, r2]
 8006e3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e42:	7b3a      	ldrb	r2, [r7, #12]
 8006e44:	490e      	ldr	r1, [pc, #56]	; (8006e80 <UARTEx_SetNbDataToProcess+0x94>)
 8006e46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e48:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e54:	7bfb      	ldrb	r3, [r7, #15]
 8006e56:	7b7a      	ldrb	r2, [r7, #13]
 8006e58:	4908      	ldr	r1, [pc, #32]	; (8006e7c <UARTEx_SetNbDataToProcess+0x90>)
 8006e5a:	5c8a      	ldrb	r2, [r1, r2]
 8006e5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e60:	7b7a      	ldrb	r2, [r7, #13]
 8006e62:	4907      	ldr	r1, [pc, #28]	; (8006e80 <UARTEx_SetNbDataToProcess+0x94>)
 8006e64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e66:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e6a:	b29a      	uxth	r2, r3
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006e72:	bf00      	nop
 8006e74:	3714      	adds	r7, #20
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bc80      	pop	{r7}
 8006e7a:	4770      	bx	lr
 8006e7c:	0800bfe4 	.word	0x0800bfe4
 8006e80:	0800bfec 	.word	0x0800bfec

08006e84 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af02      	add	r7, sp, #8
 8006e8a:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8006e8c:	4a21      	ldr	r2, [pc, #132]	; (8006f14 <RadioInit+0x90>)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8006e92:	4b21      	ldr	r3, [pc, #132]	; (8006f18 <RadioInit+0x94>)
 8006e94:	2200      	movs	r2, #0
 8006e96:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8006e98:	4b1f      	ldr	r3, [pc, #124]	; (8006f18 <RadioInit+0x94>)
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8006e9e:	4b1e      	ldr	r3, [pc, #120]	; (8006f18 <RadioInit+0x94>)
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	609a      	str	r2, [r3, #8]

    SUBGRF_Init( RadioOnDioIrq );
 8006ea4:	481d      	ldr	r0, [pc, #116]	; (8006f1c <RadioInit+0x98>)
 8006ea6:	f001 feb7 	bl	8008c18 <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    RadioSetPublicNetwork( false );
 8006eaa:	2000      	movs	r0, #0
 8006eac:	f001 f81e 	bl	8007eec <RadioSetPublicNetwork>

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode(  );
 8006eb0:	f002 f94a 	bl	8009148 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	2000      	movs	r0, #0
 8006eb8:	f002 fca0 	bl	80097fc <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams(RFO_LP, 0, RADIO_RAMP_200_US);
 8006ebc:	2204      	movs	r2, #4
 8006ebe:	2100      	movs	r1, #0
 8006ec0:	2001      	movs	r0, #1
 8006ec2:	f002 facb 	bl	800945c <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	2200      	movs	r2, #0
 8006eca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006ece:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006ed2:	f002 f9ff 	bl	80092d4 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8006ed6:	f000 fe9b 	bl	8007c10 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8006eda:	2300      	movs	r3, #0
 8006edc:	9300      	str	r3, [sp, #0]
 8006ede:	4b10      	ldr	r3, [pc, #64]	; (8006f20 <RadioInit+0x9c>)
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f04f 31ff 	mov.w	r1, #4294967295
 8006ee6:	480f      	ldr	r0, [pc, #60]	; (8006f24 <RadioInit+0xa0>)
 8006ee8:	f004 f92e 	bl	800b148 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8006eec:	2300      	movs	r3, #0
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	4b0d      	ldr	r3, [pc, #52]	; (8006f28 <RadioInit+0xa4>)
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f04f 31ff 	mov.w	r1, #4294967295
 8006ef8:	480c      	ldr	r0, [pc, #48]	; (8006f2c <RadioInit+0xa8>)
 8006efa:	f004 f925 	bl	800b148 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8006efe:	4809      	ldr	r0, [pc, #36]	; (8006f24 <RadioInit+0xa0>)
 8006f00:	f004 f9c6 	bl	800b290 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8006f04:	4809      	ldr	r0, [pc, #36]	; (8006f2c <RadioInit+0xa8>)
 8006f06:	f004 f9c3 	bl	800b290 <UTIL_TIMER_Stop>
}
 8006f0a:	bf00      	nop
 8006f0c:	3708      	adds	r7, #8
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	20000148 	.word	0x20000148
 8006f18:	20000898 	.word	0x20000898
 8006f1c:	08007fd1 	.word	0x08007fd1
 8006f20:	08007f59 	.word	0x08007f59
 8006f24:	200008f0 	.word	0x200008f0
 8006f28:	08007f6d 	.word	0x08007f6d
 8006f2c:	20000908 	.word	0x20000908

08006f30 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8006f34:	f001 feb4 	bl	8008ca0 <SUBGRF_GetOperatingMode>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b07      	cmp	r3, #7
 8006f3c:	d00a      	beq.n	8006f54 <RadioGetStatus+0x24>
 8006f3e:	2b07      	cmp	r3, #7
 8006f40:	dc0a      	bgt.n	8006f58 <RadioGetStatus+0x28>
 8006f42:	2b04      	cmp	r3, #4
 8006f44:	d002      	beq.n	8006f4c <RadioGetStatus+0x1c>
 8006f46:	2b05      	cmp	r3, #5
 8006f48:	d002      	beq.n	8006f50 <RadioGetStatus+0x20>
 8006f4a:	e005      	b.n	8006f58 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8006f4c:	2302      	movs	r3, #2
 8006f4e:	e004      	b.n	8006f5a <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e002      	b.n	8006f5a <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8006f54:	2303      	movs	r3, #3
 8006f56:	e000      	b.n	8006f5a <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8006f58:	2300      	movs	r3, #0
    }
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	bd80      	pop	{r7, pc}
	...

08006f60 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b082      	sub	sp, #8
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	4603      	mov	r3, r0
 8006f68:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8006f6a:	4a25      	ldr	r2, [pc, #148]	; (8007000 <RadioSetModem+0xa0>)
 8006f6c:	79fb      	ldrb	r3, [r7, #7]
 8006f6e:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem(modem);
 8006f70:	79fb      	ldrb	r3, [r7, #7]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f003 f807 	bl	8009f86 <RFW_SetRadioModem>
    switch( modem )
 8006f78:	79fb      	ldrb	r3, [r7, #7]
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	2b03      	cmp	r3, #3
 8006f7e:	d80b      	bhi.n	8006f98 <RadioSetModem+0x38>
 8006f80:	a201      	add	r2, pc, #4	; (adr r2, 8006f88 <RadioSetModem+0x28>)
 8006f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f86:	bf00      	nop
 8006f88:	08006fa7 	.word	0x08006fa7
 8006f8c:	08006fcd 	.word	0x08006fcd
 8006f90:	08006fdb 	.word	0x08006fdb
 8006f94:	08006fe9 	.word	0x08006fe9
    {
    default:
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8006f98:	2000      	movs	r0, #0
 8006f9a:	f002 fa39 	bl	8009410 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8006f9e:	4b18      	ldr	r3, [pc, #96]	; (8007000 <RadioSetModem+0xa0>)
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	735a      	strb	r2, [r3, #13]
        break;
 8006fa4:	e028      	b.n	8006ff8 <RadioSetModem+0x98>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8006fa6:	2001      	movs	r0, #1
 8006fa8:	f002 fa32 	bl	8009410 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8006fac:	4b14      	ldr	r3, [pc, #80]	; (8007000 <RadioSetModem+0xa0>)
 8006fae:	7b5a      	ldrb	r2, [r3, #13]
 8006fb0:	4b13      	ldr	r3, [pc, #76]	; (8007000 <RadioSetModem+0xa0>)
 8006fb2:	7b1b      	ldrb	r3, [r3, #12]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d01e      	beq.n	8006ff6 <RadioSetModem+0x96>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8006fb8:	4b11      	ldr	r3, [pc, #68]	; (8007000 <RadioSetModem+0xa0>)
 8006fba:	7b1a      	ldrb	r2, [r3, #12]
 8006fbc:	4b10      	ldr	r3, [pc, #64]	; (8007000 <RadioSetModem+0xa0>)
 8006fbe:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8006fc0:	4b0f      	ldr	r3, [pc, #60]	; (8007000 <RadioSetModem+0xa0>)
 8006fc2:	7b5b      	ldrb	r3, [r3, #13]
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f000 ff91 	bl	8007eec <RadioSetPublicNetwork>
        }
        break;
 8006fca:	e014      	b.n	8006ff6 <RadioSetModem+0x96>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8006fcc:	2002      	movs	r0, #2
 8006fce:	f002 fa1f 	bl	8009410 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8006fd2:	4b0b      	ldr	r3, [pc, #44]	; (8007000 <RadioSetModem+0xa0>)
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	735a      	strb	r2, [r3, #13]
        break;
 8006fd8:	e00e      	b.n	8006ff8 <RadioSetModem+0x98>
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8006fda:	2002      	movs	r0, #2
 8006fdc:	f002 fa18 	bl	8009410 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8006fe0:	4b07      	ldr	r3, [pc, #28]	; (8007000 <RadioSetModem+0xa0>)
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	735a      	strb	r2, [r3, #13]
        break;
 8006fe6:	e007      	b.n	8006ff8 <RadioSetModem+0x98>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8006fe8:	2000      	movs	r0, #0
 8006fea:	f002 fa11 	bl	8009410 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8006fee:	4b04      	ldr	r3, [pc, #16]	; (8007000 <RadioSetModem+0xa0>)
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	735a      	strb	r2, [r3, #13]
        break;
 8006ff4:	e000      	b.n	8006ff8 <RadioSetModem+0x98>
        break;
 8006ff6:	bf00      	nop
    }
}
 8006ff8:	bf00      	nop
 8006ffa:	3708      	adds	r7, #8
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	20000898 	.word	0x20000898

08007004 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b082      	sub	sp, #8
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f002 f9bd 	bl	800938c <SUBGRF_SetRfFrequency>
}
 8007012:	bf00      	nop
 8007014:	3708      	adds	r7, #8
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}

0800701a <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 800701a:	b580      	push	{r7, lr}
 800701c:	b090      	sub	sp, #64	; 0x40
 800701e:	af0a      	add	r7, sp, #40	; 0x28
 8007020:	60f8      	str	r0, [r7, #12]
 8007022:	60b9      	str	r1, [r7, #8]
 8007024:	603b      	str	r3, [r7, #0]
 8007026:	4613      	mov	r3, r2
 8007028:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 800702a:	2301      	movs	r3, #1
 800702c:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 800702e:	2300      	movs	r3, #0
 8007030:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8007032:	2300      	movs	r3, #0
 8007034:	613b      	str	r3, [r7, #16]

    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 8007036:	f000 fdfe 	bl	8007c36 <RadioStandby>
    /* ST_WORKAROUND_END */

    RadioSetModem( MODEM_FSK );
 800703a:	2000      	movs	r0, #0
 800703c:	f7ff ff90 	bl	8006f60 <RadioSetModem>

    RadioSetChannel( freq );
 8007040:	68f8      	ldr	r0, [r7, #12]
 8007042:	f7ff ffdf 	bl	8007004 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8007046:	2301      	movs	r3, #1
 8007048:	9309      	str	r3, [sp, #36]	; 0x24
 800704a:	2300      	movs	r3, #0
 800704c:	9308      	str	r3, [sp, #32]
 800704e:	2300      	movs	r3, #0
 8007050:	9307      	str	r3, [sp, #28]
 8007052:	2300      	movs	r3, #0
 8007054:	9306      	str	r3, [sp, #24]
 8007056:	2300      	movs	r3, #0
 8007058:	9305      	str	r3, [sp, #20]
 800705a:	2300      	movs	r3, #0
 800705c:	9304      	str	r3, [sp, #16]
 800705e:	2300      	movs	r3, #0
 8007060:	9303      	str	r3, [sp, #12]
 8007062:	2300      	movs	r3, #0
 8007064:	9302      	str	r3, [sp, #8]
 8007066:	2303      	movs	r3, #3
 8007068:	9301      	str	r3, [sp, #4]
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	9300      	str	r3, [sp, #0]
 800706e:	2300      	movs	r3, #0
 8007070:	f44f 7216 	mov.w	r2, #600	; 0x258
 8007074:	68b9      	ldr	r1, [r7, #8]
 8007076:	2000      	movs	r0, #0
 8007078:	f000 f840 	bl	80070fc <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 800707c:	2000      	movs	r0, #0
 800707e:	f000 fde1 	bl	8007c44 <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8007082:	f000 ff61 	bl	8007f48 <RadioGetWakeupTime>
 8007086:	4603      	mov	r3, r0
 8007088:	4618      	mov	r0, r3
 800708a:	f7f9 fe2e 	bl	8000cea <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 800708e:	f004 fa19 	bl	800b4c4 <UTIL_TIMER_GetCurrentTime>
 8007092:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8007094:	e00d      	b.n	80070b2 <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8007096:	2000      	movs	r0, #0
 8007098:	f000 fea6 	bl	8007de8 <RadioRssi>
 800709c:	4603      	mov	r3, r0
 800709e:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 80070a0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80070a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	dd02      	ble.n	80070b2 <RadioIsChannelFree+0x98>
        {
            status = false;
 80070ac:	2300      	movs	r3, #0
 80070ae:	75fb      	strb	r3, [r7, #23]
            break;
 80070b0:	e006      	b.n	80070c0 <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80070b2:	6938      	ldr	r0, [r7, #16]
 80070b4:	f004 fa18 	bl	800b4e8 <UTIL_TIMER_GetElapsedTime>
 80070b8:	4602      	mov	r2, r0
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	4293      	cmp	r3, r2
 80070be:	d8ea      	bhi.n	8007096 <RadioIsChannelFree+0x7c>
        }
    }
    /* ST_WORKAROUND_BEGIN: Prevent multiple sleeps with TXCO delay */
    RadioStandby( );
 80070c0:	f000 fdb9 	bl	8007c36 <RadioStandby>
    /* ST_WORKAROUND_END */
    return status;
 80070c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80070c6:	4618      	mov	r0, r3
 80070c8:	3718      	adds	r7, #24
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}

080070ce <RadioRandom>:

static uint32_t RadioRandom( void )
{
 80070ce:	b580      	push	{r7, lr}
 80070d0:	b082      	sub	sp, #8
 80070d2:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 80070d4:	2300      	movs	r3, #0
 80070d6:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Set LoRa modem ON
    RadioSetModem( MODEM_LORA );
 80070d8:	2001      	movs	r0, #1
 80070da:	f7ff ff41 	bl	8006f60 <RadioSetModem>

    // Disable LoRa modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80070de:	2300      	movs	r3, #0
 80070e0:	2200      	movs	r2, #0
 80070e2:	2100      	movs	r1, #0
 80070e4:	2000      	movs	r0, #0
 80070e6:	f002 f8f5 	bl	80092d4 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 80070ea:	f001 feaa 	bl	8008e42 <SUBGRF_GetRandom>
 80070ee:	6078      	str	r0, [r7, #4]

    return rnd;
 80070f0:	687b      	ldr	r3, [r7, #4]
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3708      	adds	r7, #8
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
	...

080070fc <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b08a      	sub	sp, #40	; 0x28
 8007100:	af00      	add	r7, sp, #0
 8007102:	60b9      	str	r1, [r7, #8]
 8007104:	607a      	str	r2, [r7, #4]
 8007106:	461a      	mov	r2, r3
 8007108:	4603      	mov	r3, r0
 800710a:	73fb      	strb	r3, [r7, #15]
 800710c:	4613      	mov	r3, r2
 800710e:	73bb      	strb	r3, [r7, #14]

    uint8_t modReg;
    SubgRf.RxContinuous = rxContinuous;
 8007110:	4abd      	ldr	r2, [pc, #756]	; (8007408 <RadioSetRxConfig+0x30c>)
 8007112:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8007116:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8007118:	f002 fef3 	bl	8009f02 <RFW_DeInit>
    if( rxContinuous == true )
 800711c:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
 8007120:	2b00      	cmp	r3, #0
 8007122:	d001      	beq.n	8007128 <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8007124:	2300      	movs	r3, #0
 8007126:	873b      	strh	r3, [r7, #56]	; 0x38
    }
    if( fixLen == true )
 8007128:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800712c:	2b00      	cmp	r3, #0
 800712e:	d004      	beq.n	800713a <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8007130:	4ab6      	ldr	r2, [pc, #728]	; (800740c <RadioSetRxConfig+0x310>)
 8007132:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8007136:	7013      	strb	r3, [r2, #0]
 8007138:	e002      	b.n	8007140 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 800713a:	4bb4      	ldr	r3, [pc, #720]	; (800740c <RadioSetRxConfig+0x310>)
 800713c:	22ff      	movs	r2, #255	; 0xff
 800713e:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8007140:	7bfb      	ldrb	r3, [r7, #15]
 8007142:	2b04      	cmp	r3, #4
 8007144:	d009      	beq.n	800715a <RadioSetRxConfig+0x5e>
 8007146:	2b04      	cmp	r3, #4
 8007148:	f300 81da 	bgt.w	8007500 <RadioSetRxConfig+0x404>
 800714c:	2b00      	cmp	r3, #0
 800714e:	f000 80bf 	beq.w	80072d0 <RadioSetRxConfig+0x1d4>
 8007152:	2b01      	cmp	r3, #1
 8007154:	f000 812c 	beq.w	80073b0 <RadioSetRxConfig+0x2b4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8007158:	e1d2      	b.n	8007500 <RadioSetRxConfig+0x404>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 800715a:	2001      	movs	r0, #1
 800715c:	f001 ffb6 	bl	80090cc <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8007160:	4ba9      	ldr	r3, [pc, #676]	; (8007408 <RadioSetRxConfig+0x30c>)
 8007162:	2200      	movs	r2, #0
 8007164:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8007168:	4aa7      	ldr	r2, [pc, #668]	; (8007408 <RadioSetRxConfig+0x30c>)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 800716e:	4ba6      	ldr	r3, [pc, #664]	; (8007408 <RadioSetRxConfig+0x30c>)
 8007170:	2209      	movs	r2, #9
 8007172:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8007176:	4ba4      	ldr	r3, [pc, #656]	; (8007408 <RadioSetRxConfig+0x30c>)
 8007178:	f44f 7248 	mov.w	r2, #800	; 0x320
 800717c:	641a      	str	r2, [r3, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 800717e:	68b8      	ldr	r0, [r7, #8]
 8007180:	f002 fdf0 	bl	8009d64 <SUBGRF_GetFskBandwidthRegValue>
 8007184:	4603      	mov	r3, r0
 8007186:	461a      	mov	r2, r3
 8007188:	4b9f      	ldr	r3, [pc, #636]	; (8007408 <RadioSetRxConfig+0x30c>)
 800718a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800718e:	4b9e      	ldr	r3, [pc, #632]	; (8007408 <RadioSetRxConfig+0x30c>)
 8007190:	2200      	movs	r2, #0
 8007192:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8007194:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007196:	00db      	lsls	r3, r3, #3
 8007198:	b29a      	uxth	r2, r3
 800719a:	4b9b      	ldr	r3, [pc, #620]	; (8007408 <RadioSetRxConfig+0x30c>)
 800719c:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 800719e:	4b9a      	ldr	r3, [pc, #616]	; (8007408 <RadioSetRxConfig+0x30c>)
 80071a0:	2200      	movs	r2, #0
 80071a2:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 80071a4:	4b98      	ldr	r3, [pc, #608]	; (8007408 <RadioSetRxConfig+0x30c>)
 80071a6:	2210      	movs	r2, #16
 80071a8:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80071aa:	4b97      	ldr	r3, [pc, #604]	; (8007408 <RadioSetRxConfig+0x30c>)
 80071ac:	2200      	movs	r2, #0
 80071ae:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 80071b0:	4b95      	ldr	r3, [pc, #596]	; (8007408 <RadioSetRxConfig+0x30c>)
 80071b2:	2200      	movs	r2, #0
 80071b4:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80071b6:	4b95      	ldr	r3, [pc, #596]	; (800740c <RadioSetRxConfig+0x310>)
 80071b8:	781a      	ldrb	r2, [r3, #0]
 80071ba:	4b93      	ldr	r3, [pc, #588]	; (8007408 <RadioSetRxConfig+0x30c>)
 80071bc:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80071be:	4b92      	ldr	r3, [pc, #584]	; (8007408 <RadioSetRxConfig+0x30c>)
 80071c0:	2201      	movs	r2, #1
 80071c2:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 80071c4:	4b90      	ldr	r3, [pc, #576]	; (8007408 <RadioSetRxConfig+0x30c>)
 80071c6:	2200      	movs	r2, #0
 80071c8:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 80071ca:	2004      	movs	r0, #4
 80071cc:	f7ff fec8 	bl	8006f60 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80071d0:	488f      	ldr	r0, [pc, #572]	; (8007410 <RadioSetRxConfig+0x314>)
 80071d2:	f002 f9a9 	bl	8009528 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80071d6:	488f      	ldr	r0, [pc, #572]	; (8007414 <RadioSetRxConfig+0x318>)
 80071d8:	f002 fa72 	bl	80096c0 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80071dc:	4a8e      	ldr	r2, [pc, #568]	; (8007418 <RadioSetRxConfig+0x31c>)
 80071de:	f107 031c 	add.w	r3, r7, #28
 80071e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80071e6:	e883 0003 	stmia.w	r3, {r0, r1}
 80071ea:	f107 031c 	add.w	r3, r7, #28
 80071ee:	4618      	mov	r0, r3
 80071f0:	f001 fda5 	bl	8008d3e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80071f4:	f240 10ff 	movw	r0, #511	; 0x1ff
 80071f8:	f001 fdf0 	bl	8008ddc <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(0x8b8);
 80071fc:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8007200:	f000 fe11 	bl	8007e26 <RadioRead>
 8007204:	4603      	mov	r3, r0
 8007206:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=RADIO_BIT_MASK(4);
 800720a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800720e:	f023 0310 	bic.w	r3, r3, #16
 8007212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x8b8, modReg);
 8007216:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800721a:	4619      	mov	r1, r3
 800721c:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8007220:	f000 fdef 	bl	8007e02 <RadioWrite>
            RadioWrite(0x8b9, 0x4 );
 8007224:	2104      	movs	r1, #4
 8007226:	f640 00b9 	movw	r0, #2233	; 0x8b9
 800722a:	f000 fdea 	bl	8007e02 <RadioWrite>
            modReg= RadioRead(0x89b);
 800722e:	f640 009b 	movw	r0, #2203	; 0x89b
 8007232:	f000 fdf8 	bl	8007e26 <RadioRead>
 8007236:	4603      	mov	r3, r0
 8007238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800723c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007240:	f023 031c 	bic.w	r3, r3, #28
 8007244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x89b, (modReg| (0x1<<3) ) );
 8007248:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800724c:	f043 0308 	orr.w	r3, r3, #8
 8007250:	b2db      	uxtb	r3, r3
 8007252:	4619      	mov	r1, r3
 8007254:	f640 009b 	movw	r0, #2203	; 0x89b
 8007258:	f000 fdd3 	bl	8007e02 <RadioWrite>
            modReg= RadioRead(0x6d1);
 800725c:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8007260:	f000 fde1 	bl	8007e26 <RadioRead>
 8007264:	4603      	mov	r3, r0
 8007266:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800726a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800726e:	f023 0318 	bic.w	r3, r3, #24
 8007272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6d1, (modReg| (0x3<<3) ));
 8007276:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800727a:	f043 0318 	orr.w	r3, r3, #24
 800727e:	b2db      	uxtb	r3, r3
 8007280:	4619      	mov	r1, r3
 8007282:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8007286:	f000 fdbc 	bl	8007e02 <RadioWrite>
            modReg= RadioRead(0x6ac);
 800728a:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800728e:	f000 fdca 	bl	8007e26 <RadioRead>
 8007292:	4603      	mov	r3, r0
 8007294:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8007298:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800729c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            RadioWrite(0x6ac, (modReg| (0x5<<4) ));
 80072a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072a8:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	4619      	mov	r1, r3
 80072b0:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80072b4:	f000 fda5 	bl	8007e02 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80072b8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80072ba:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80072be:	fb02 f303 	mul.w	r3, r2, r3
 80072c2:	461a      	mov	r2, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80072ca:	4a4f      	ldr	r2, [pc, #316]	; (8007408 <RadioSetRxConfig+0x30c>)
 80072cc:	6093      	str	r3, [r2, #8]
            break;
 80072ce:	e118      	b.n	8007502 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80072d0:	2000      	movs	r0, #0
 80072d2:	f001 fefb 	bl	80090cc <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80072d6:	4b4c      	ldr	r3, [pc, #304]	; (8007408 <RadioSetRxConfig+0x30c>)
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80072de:	4a4a      	ldr	r2, [pc, #296]	; (8007408 <RadioSetRxConfig+0x30c>)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80072e4:	4b48      	ldr	r3, [pc, #288]	; (8007408 <RadioSetRxConfig+0x30c>)
 80072e6:	220b      	movs	r2, #11
 80072e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80072ec:	68b8      	ldr	r0, [r7, #8]
 80072ee:	f002 fd39 	bl	8009d64 <SUBGRF_GetFskBandwidthRegValue>
 80072f2:	4603      	mov	r3, r0
 80072f4:	461a      	mov	r2, r3
 80072f6:	4b44      	ldr	r3, [pc, #272]	; (8007408 <RadioSetRxConfig+0x30c>)
 80072f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80072fc:	4b42      	ldr	r3, [pc, #264]	; (8007408 <RadioSetRxConfig+0x30c>)
 80072fe:	2200      	movs	r2, #0
 8007300:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8007302:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007304:	00db      	lsls	r3, r3, #3
 8007306:	b29a      	uxth	r2, r3
 8007308:	4b3f      	ldr	r3, [pc, #252]	; (8007408 <RadioSetRxConfig+0x30c>)
 800730a:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 800730c:	4b3e      	ldr	r3, [pc, #248]	; (8007408 <RadioSetRxConfig+0x30c>)
 800730e:	2204      	movs	r2, #4
 8007310:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8007312:	4b3d      	ldr	r3, [pc, #244]	; (8007408 <RadioSetRxConfig+0x30c>)
 8007314:	2218      	movs	r2, #24
 8007316:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8007318:	4b3b      	ldr	r3, [pc, #236]	; (8007408 <RadioSetRxConfig+0x30c>)
 800731a:	2200      	movs	r2, #0
 800731c:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 800731e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8007322:	f083 0301 	eor.w	r3, r3, #1
 8007326:	b2db      	uxtb	r3, r3
 8007328:	461a      	mov	r2, r3
 800732a:	4b37      	ldr	r3, [pc, #220]	; (8007408 <RadioSetRxConfig+0x30c>)
 800732c:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800732e:	4b37      	ldr	r3, [pc, #220]	; (800740c <RadioSetRxConfig+0x310>)
 8007330:	781a      	ldrb	r2, [r3, #0]
 8007332:	4b35      	ldr	r3, [pc, #212]	; (8007408 <RadioSetRxConfig+0x30c>)
 8007334:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 8007336:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800733a:	2b00      	cmp	r3, #0
 800733c:	d003      	beq.n	8007346 <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 800733e:	4b32      	ldr	r3, [pc, #200]	; (8007408 <RadioSetRxConfig+0x30c>)
 8007340:	22f2      	movs	r2, #242	; 0xf2
 8007342:	75da      	strb	r2, [r3, #23]
 8007344:	e002      	b.n	800734c <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8007346:	4b30      	ldr	r3, [pc, #192]	; (8007408 <RadioSetRxConfig+0x30c>)
 8007348:	2201      	movs	r2, #1
 800734a:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800734c:	4b2e      	ldr	r3, [pc, #184]	; (8007408 <RadioSetRxConfig+0x30c>)
 800734e:	2201      	movs	r2, #1
 8007350:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8007352:	f000 fc70 	bl	8007c36 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 8007356:	4b2c      	ldr	r3, [pc, #176]	; (8007408 <RadioSetRxConfig+0x30c>)
 8007358:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800735c:	2b00      	cmp	r3, #0
 800735e:	bf14      	ite	ne
 8007360:	2301      	movne	r3, #1
 8007362:	2300      	moveq	r3, #0
 8007364:	b2db      	uxtb	r3, r3
 8007366:	4618      	mov	r0, r3
 8007368:	f7ff fdfa 	bl	8006f60 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800736c:	4828      	ldr	r0, [pc, #160]	; (8007410 <RadioSetRxConfig+0x314>)
 800736e:	f002 f8db 	bl	8009528 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007372:	4828      	ldr	r0, [pc, #160]	; (8007414 <RadioSetRxConfig+0x318>)
 8007374:	f002 f9a4 	bl	80096c0 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8007378:	4a28      	ldr	r2, [pc, #160]	; (800741c <RadioSetRxConfig+0x320>)
 800737a:	f107 0314 	add.w	r3, r7, #20
 800737e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007382:	e883 0003 	stmia.w	r3, {r0, r1}
 8007386:	f107 0314 	add.w	r3, r7, #20
 800738a:	4618      	mov	r0, r3
 800738c:	f001 fcd7 	bl	8008d3e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8007390:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007394:	f001 fd22 	bl	8008ddc <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8007398:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800739a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 800739e:	fb02 f303 	mul.w	r3, r2, r3
 80073a2:	461a      	mov	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80073aa:	4a17      	ldr	r2, [pc, #92]	; (8007408 <RadioSetRxConfig+0x30c>)
 80073ac:	6093      	str	r3, [r2, #8]
            break;
 80073ae:	e0a8      	b.n	8007502 <RadioSetRxConfig+0x406>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80073b0:	2000      	movs	r0, #0
 80073b2:	f001 fe8b 	bl	80090cc <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80073b6:	4b14      	ldr	r3, [pc, #80]	; (8007408 <RadioSetRxConfig+0x30c>)
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	b2da      	uxtb	r2, r3
 80073c2:	4b11      	ldr	r3, [pc, #68]	; (8007408 <RadioSetRxConfig+0x30c>)
 80073c4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80073c8:	4a15      	ldr	r2, [pc, #84]	; (8007420 <RadioSetRxConfig+0x324>)
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	4413      	add	r3, r2
 80073ce:	781a      	ldrb	r2, [r3, #0]
 80073d0:	4b0d      	ldr	r3, [pc, #52]	; (8007408 <RadioSetRxConfig+0x30c>)
 80073d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80073d6:	4a0c      	ldr	r2, [pc, #48]	; (8007408 <RadioSetRxConfig+0x30c>)
 80073d8:	7bbb      	ldrb	r3, [r7, #14]
 80073da:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d105      	bne.n	80073f0 <RadioSetRxConfig+0x2f4>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2b0b      	cmp	r3, #11
 80073e8:	d008      	beq.n	80073fc <RadioSetRxConfig+0x300>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2b0c      	cmp	r3, #12
 80073ee:	d005      	beq.n	80073fc <RadioSetRxConfig+0x300>
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d116      	bne.n	8007424 <RadioSetRxConfig+0x328>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2b0c      	cmp	r3, #12
 80073fa:	d113      	bne.n	8007424 <RadioSetRxConfig+0x328>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 80073fc:	4b02      	ldr	r3, [pc, #8]	; (8007408 <RadioSetRxConfig+0x30c>)
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8007404:	e012      	b.n	800742c <RadioSetRxConfig+0x330>
 8007406:	bf00      	nop
 8007408:	20000898 	.word	0x20000898
 800740c:	20000008 	.word	0x20000008
 8007410:	200008d0 	.word	0x200008d0
 8007414:	200008a6 	.word	0x200008a6
 8007418:	0800bc4c 	.word	0x0800bc4c
 800741c:	0800bc54 	.word	0x0800bc54
 8007420:	0800c078 	.word	0x0800c078
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8007424:	4b39      	ldr	r3, [pc, #228]	; (800750c <RadioSetRxConfig+0x410>)
 8007426:	2200      	movs	r2, #0
 8007428:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 800742c:	4b37      	ldr	r3, [pc, #220]	; (800750c <RadioSetRxConfig+0x410>)
 800742e:	2201      	movs	r2, #1
 8007430:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007432:	4b36      	ldr	r3, [pc, #216]	; (800750c <RadioSetRxConfig+0x410>)
 8007434:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007438:	2b05      	cmp	r3, #5
 800743a:	d004      	beq.n	8007446 <RadioSetRxConfig+0x34a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 800743c:	4b33      	ldr	r3, [pc, #204]	; (800750c <RadioSetRxConfig+0x410>)
 800743e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8007442:	2b06      	cmp	r3, #6
 8007444:	d10a      	bne.n	800745c <RadioSetRxConfig+0x360>
                if( preambleLen < 12 )
 8007446:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007448:	2b0b      	cmp	r3, #11
 800744a:	d803      	bhi.n	8007454 <RadioSetRxConfig+0x358>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 800744c:	4b2f      	ldr	r3, [pc, #188]	; (800750c <RadioSetRxConfig+0x410>)
 800744e:	220c      	movs	r2, #12
 8007450:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8007452:	e006      	b.n	8007462 <RadioSetRxConfig+0x366>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007454:	4a2d      	ldr	r2, [pc, #180]	; (800750c <RadioSetRxConfig+0x410>)
 8007456:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007458:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 800745a:	e002      	b.n	8007462 <RadioSetRxConfig+0x366>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800745c:	4a2b      	ldr	r2, [pc, #172]	; (800750c <RadioSetRxConfig+0x410>)
 800745e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8007460:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8007462:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8007466:	4b29      	ldr	r3, [pc, #164]	; (800750c <RadioSetRxConfig+0x410>)
 8007468:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800746a:	4b29      	ldr	r3, [pc, #164]	; (8007510 <RadioSetRxConfig+0x414>)
 800746c:	781a      	ldrb	r2, [r3, #0]
 800746e:	4b27      	ldr	r3, [pc, #156]	; (800750c <RadioSetRxConfig+0x410>)
 8007470:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8007472:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8007476:	4b25      	ldr	r3, [pc, #148]	; (800750c <RadioSetRxConfig+0x410>)
 8007478:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 800747c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8007480:	4b22      	ldr	r3, [pc, #136]	; (800750c <RadioSetRxConfig+0x410>)
 8007482:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 8007486:	f000 fbd6 	bl	8007c36 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 800748a:	4b20      	ldr	r3, [pc, #128]	; (800750c <RadioSetRxConfig+0x410>)
 800748c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007490:	2b00      	cmp	r3, #0
 8007492:	bf14      	ite	ne
 8007494:	2301      	movne	r3, #1
 8007496:	2300      	moveq	r3, #0
 8007498:	b2db      	uxtb	r3, r3
 800749a:	4618      	mov	r0, r3
 800749c:	f7ff fd60 	bl	8006f60 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80074a0:	481c      	ldr	r0, [pc, #112]	; (8007514 <RadioSetRxConfig+0x418>)
 80074a2:	f002 f841 	bl	8009528 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80074a6:	481c      	ldr	r0, [pc, #112]	; (8007518 <RadioSetRxConfig+0x41c>)
 80074a8:	f002 f90a 	bl	80096c0 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80074ac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	4618      	mov	r0, r3
 80074b2:	f001 fe1a 	bl	80090ea <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80074b6:	4b15      	ldr	r3, [pc, #84]	; (800750c <RadioSetRxConfig+0x410>)
 80074b8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d10d      	bne.n	80074dc <RadioSetRxConfig+0x3e0>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 80074c0:	f240 7036 	movw	r0, #1846	; 0x736
 80074c4:	f002 fa58 	bl	8009978 <SUBGRF_ReadRegister>
 80074c8:	4603      	mov	r3, r0
 80074ca:	f023 0304 	bic.w	r3, r3, #4
 80074ce:	b2db      	uxtb	r3, r3
 80074d0:	4619      	mov	r1, r3
 80074d2:	f240 7036 	movw	r0, #1846	; 0x736
 80074d6:	f002 fa3b 	bl	8009950 <SUBGRF_WriteRegister>
 80074da:	e00c      	b.n	80074f6 <RadioSetRxConfig+0x3fa>
                SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 80074dc:	f240 7036 	movw	r0, #1846	; 0x736
 80074e0:	f002 fa4a 	bl	8009978 <SUBGRF_ReadRegister>
 80074e4:	4603      	mov	r3, r0
 80074e6:	f043 0304 	orr.w	r3, r3, #4
 80074ea:	b2db      	uxtb	r3, r3
 80074ec:	4619      	mov	r1, r3
 80074ee:	f240 7036 	movw	r0, #1846	; 0x736
 80074f2:	f002 fa2d 	bl	8009950 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80074f6:	4b05      	ldr	r3, [pc, #20]	; (800750c <RadioSetRxConfig+0x410>)
 80074f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80074fc:	609a      	str	r2, [r3, #8]
            break;
 80074fe:	e000      	b.n	8007502 <RadioSetRxConfig+0x406>
            break;
 8007500:	bf00      	nop
    }
}
 8007502:	bf00      	nop
 8007504:	3728      	adds	r7, #40	; 0x28
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	20000898 	.word	0x20000898
 8007510:	20000008 	.word	0x20000008
 8007514:	200008d0 	.word	0x200008d0
 8007518:	200008a6 	.word	0x200008a6

0800751c <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b086      	sub	sp, #24
 8007520:	af00      	add	r7, sp, #0
 8007522:	60ba      	str	r2, [r7, #8]
 8007524:	607b      	str	r3, [r7, #4]
 8007526:	4603      	mov	r3, r0
 8007528:	73fb      	strb	r3, [r7, #15]
 800752a:	460b      	mov	r3, r1
 800752c:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 800752e:	f002 fce8 	bl	8009f02 <RFW_DeInit>
    switch( modem )
 8007532:	7bfb      	ldrb	r3, [r7, #15]
 8007534:	2b03      	cmp	r3, #3
 8007536:	f000 80d7 	beq.w	80076e8 <RadioSetTxConfig+0x1cc>
 800753a:	2b03      	cmp	r3, #3
 800753c:	f300 80e6 	bgt.w	800770c <RadioSetTxConfig+0x1f0>
 8007540:	2b00      	cmp	r3, #0
 8007542:	d002      	beq.n	800754a <RadioSetTxConfig+0x2e>
 8007544:	2b01      	cmp	r3, #1
 8007546:	d061      	beq.n	800760c <RadioSetTxConfig+0xf0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;

        default:
            break;
 8007548:	e0e0      	b.n	800770c <RadioSetTxConfig+0x1f0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800754a:	4b7c      	ldr	r3, [pc, #496]	; (800773c <RadioSetTxConfig+0x220>)
 800754c:	2200      	movs	r2, #0
 800754e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8007552:	4a7a      	ldr	r2, [pc, #488]	; (800773c <RadioSetTxConfig+0x220>)
 8007554:	6a3b      	ldr	r3, [r7, #32]
 8007556:	63d3      	str	r3, [r2, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8007558:	4b78      	ldr	r3, [pc, #480]	; (800773c <RadioSetTxConfig+0x220>)
 800755a:	220b      	movs	r2, #11
 800755c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f002 fbff 	bl	8009d64 <SUBGRF_GetFskBandwidthRegValue>
 8007566:	4603      	mov	r3, r0
 8007568:	461a      	mov	r2, r3
 800756a:	4b74      	ldr	r3, [pc, #464]	; (800773c <RadioSetTxConfig+0x220>)
 800756c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8007570:	4a72      	ldr	r2, [pc, #456]	; (800773c <RadioSetTxConfig+0x220>)
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	6413      	str	r3, [r2, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8007576:	4b71      	ldr	r3, [pc, #452]	; (800773c <RadioSetTxConfig+0x220>)
 8007578:	2200      	movs	r2, #0
 800757a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 800757c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800757e:	00db      	lsls	r3, r3, #3
 8007580:	b29a      	uxth	r2, r3
 8007582:	4b6e      	ldr	r3, [pc, #440]	; (800773c <RadioSetTxConfig+0x220>)
 8007584:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8007586:	4b6d      	ldr	r3, [pc, #436]	; (800773c <RadioSetTxConfig+0x220>)
 8007588:	2204      	movs	r2, #4
 800758a:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 800758c:	4b6b      	ldr	r3, [pc, #428]	; (800773c <RadioSetTxConfig+0x220>)
 800758e:	2218      	movs	r2, #24
 8007590:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8007592:	4b6a      	ldr	r3, [pc, #424]	; (800773c <RadioSetTxConfig+0x220>)
 8007594:	2200      	movs	r2, #0
 8007596:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8007598:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800759c:	f083 0301 	eor.w	r3, r3, #1
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	461a      	mov	r2, r3
 80075a4:	4b65      	ldr	r3, [pc, #404]	; (800773c <RadioSetTxConfig+0x220>)
 80075a6:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 80075a8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d003      	beq.n	80075b8 <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80075b0:	4b62      	ldr	r3, [pc, #392]	; (800773c <RadioSetTxConfig+0x220>)
 80075b2:	22f2      	movs	r2, #242	; 0xf2
 80075b4:	75da      	strb	r2, [r3, #23]
 80075b6:	e002      	b.n	80075be <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80075b8:	4b60      	ldr	r3, [pc, #384]	; (800773c <RadioSetTxConfig+0x220>)
 80075ba:	2201      	movs	r2, #1
 80075bc:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80075be:	4b5f      	ldr	r3, [pc, #380]	; (800773c <RadioSetTxConfig+0x220>)
 80075c0:	2201      	movs	r2, #1
 80075c2:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80075c4:	f000 fb37 	bl	8007c36 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80075c8:	4b5c      	ldr	r3, [pc, #368]	; (800773c <RadioSetTxConfig+0x220>)
 80075ca:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	bf14      	ite	ne
 80075d2:	2301      	movne	r3, #1
 80075d4:	2300      	moveq	r3, #0
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	4618      	mov	r0, r3
 80075da:	f7ff fcc1 	bl	8006f60 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80075de:	4858      	ldr	r0, [pc, #352]	; (8007740 <RadioSetTxConfig+0x224>)
 80075e0:	f001 ffa2 	bl	8009528 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80075e4:	4857      	ldr	r0, [pc, #348]	; (8007744 <RadioSetTxConfig+0x228>)
 80075e6:	f002 f86b 	bl	80096c0 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80075ea:	4a57      	ldr	r2, [pc, #348]	; (8007748 <RadioSetTxConfig+0x22c>)
 80075ec:	f107 0310 	add.w	r3, r7, #16
 80075f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80075f4:	e883 0003 	stmia.w	r3, {r0, r1}
 80075f8:	f107 0310 	add.w	r3, r7, #16
 80075fc:	4618      	mov	r0, r3
 80075fe:	f001 fb9e 	bl	8008d3e <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8007602:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007606:	f001 fbe9 	bl	8008ddc <SUBGRF_SetWhiteningSeed>
            break;
 800760a:	e080      	b.n	800770e <RadioSetTxConfig+0x1f2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 800760c:	4b4b      	ldr	r3, [pc, #300]	; (800773c <RadioSetTxConfig+0x220>)
 800760e:	2201      	movs	r2, #1
 8007610:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8007614:	6a3b      	ldr	r3, [r7, #32]
 8007616:	b2da      	uxtb	r2, r3
 8007618:	4b48      	ldr	r3, [pc, #288]	; (800773c <RadioSetTxConfig+0x220>)
 800761a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 800761e:	4a4b      	ldr	r2, [pc, #300]	; (800774c <RadioSetTxConfig+0x230>)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4413      	add	r3, r2
 8007624:	781a      	ldrb	r2, [r3, #0]
 8007626:	4b45      	ldr	r3, [pc, #276]	; (800773c <RadioSetTxConfig+0x220>)
 8007628:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 800762c:	4a43      	ldr	r2, [pc, #268]	; (800773c <RadioSetTxConfig+0x220>)
 800762e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007632:	f882 3052 	strb.w	r3, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d105      	bne.n	8007648 <RadioSetTxConfig+0x12c>
 800763c:	6a3b      	ldr	r3, [r7, #32]
 800763e:	2b0b      	cmp	r3, #11
 8007640:	d008      	beq.n	8007654 <RadioSetTxConfig+0x138>
 8007642:	6a3b      	ldr	r3, [r7, #32]
 8007644:	2b0c      	cmp	r3, #12
 8007646:	d005      	beq.n	8007654 <RadioSetTxConfig+0x138>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2b01      	cmp	r3, #1
 800764c:	d107      	bne.n	800765e <RadioSetTxConfig+0x142>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800764e:	6a3b      	ldr	r3, [r7, #32]
 8007650:	2b0c      	cmp	r3, #12
 8007652:	d104      	bne.n	800765e <RadioSetTxConfig+0x142>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8007654:	4b39      	ldr	r3, [pc, #228]	; (800773c <RadioSetTxConfig+0x220>)
 8007656:	2201      	movs	r2, #1
 8007658:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800765c:	e003      	b.n	8007666 <RadioSetTxConfig+0x14a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800765e:	4b37      	ldr	r3, [pc, #220]	; (800773c <RadioSetTxConfig+0x220>)
 8007660:	2200      	movs	r2, #0
 8007662:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007666:	4b35      	ldr	r3, [pc, #212]	; (800773c <RadioSetTxConfig+0x220>)
 8007668:	2201      	movs	r2, #1
 800766a:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800766c:	4b33      	ldr	r3, [pc, #204]	; (800773c <RadioSetTxConfig+0x220>)
 800766e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007672:	2b05      	cmp	r3, #5
 8007674:	d004      	beq.n	8007680 <RadioSetTxConfig+0x164>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8007676:	4b31      	ldr	r3, [pc, #196]	; (800773c <RadioSetTxConfig+0x220>)
 8007678:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800767c:	2b06      	cmp	r3, #6
 800767e:	d10a      	bne.n	8007696 <RadioSetTxConfig+0x17a>
                if( preambleLen < 12 )
 8007680:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007682:	2b0b      	cmp	r3, #11
 8007684:	d803      	bhi.n	800768e <RadioSetTxConfig+0x172>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8007686:	4b2d      	ldr	r3, [pc, #180]	; (800773c <RadioSetTxConfig+0x220>)
 8007688:	220c      	movs	r2, #12
 800768a:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 800768c:	e006      	b.n	800769c <RadioSetTxConfig+0x180>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800768e:	4a2b      	ldr	r2, [pc, #172]	; (800773c <RadioSetTxConfig+0x220>)
 8007690:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007692:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8007694:	e002      	b.n	800769c <RadioSetTxConfig+0x180>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8007696:	4a29      	ldr	r2, [pc, #164]	; (800773c <RadioSetTxConfig+0x220>)
 8007698:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800769a:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 800769c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80076a0:	4b26      	ldr	r3, [pc, #152]	; (800773c <RadioSetTxConfig+0x220>)
 80076a2:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80076a4:	4b2a      	ldr	r3, [pc, #168]	; (8007750 <RadioSetTxConfig+0x234>)
 80076a6:	781a      	ldrb	r2, [r3, #0]
 80076a8:	4b24      	ldr	r3, [pc, #144]	; (800773c <RadioSetTxConfig+0x220>)
 80076aa:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80076ac:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80076b0:	4b22      	ldr	r3, [pc, #136]	; (800773c <RadioSetTxConfig+0x220>)
 80076b2:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80076b6:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 80076ba:	4b20      	ldr	r3, [pc, #128]	; (800773c <RadioSetTxConfig+0x220>)
 80076bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
            RadioStandby( );
 80076c0:	f000 fab9 	bl	8007c36 <RadioStandby>
            RadioSetModem( ( SubgRf.ModulationParams.PacketType == PACKET_TYPE_GFSK ) ? MODEM_FSK : MODEM_LORA );
 80076c4:	4b1d      	ldr	r3, [pc, #116]	; (800773c <RadioSetTxConfig+0x220>)
 80076c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	bf14      	ite	ne
 80076ce:	2301      	movne	r3, #1
 80076d0:	2300      	moveq	r3, #0
 80076d2:	b2db      	uxtb	r3, r3
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7ff fc43 	bl	8006f60 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80076da:	4819      	ldr	r0, [pc, #100]	; (8007740 <RadioSetTxConfig+0x224>)
 80076dc:	f001 ff24 	bl	8009528 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80076e0:	4818      	ldr	r0, [pc, #96]	; (8007744 <RadioSetTxConfig+0x228>)
 80076e2:	f001 ffed 	bl	80096c0 <SUBGRF_SetPacketParams>
            break;
 80076e6:	e012      	b.n	800770e <RadioSetTxConfig+0x1f2>
            RadioSetModem(MODEM_SIGFOX_TX);
 80076e8:	2003      	movs	r0, #3
 80076ea:	f7ff fc39 	bl	8006f60 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80076ee:	4b13      	ldr	r3, [pc, #76]	; (800773c <RadioSetTxConfig+0x220>)
 80076f0:	2202      	movs	r2, #2
 80076f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 80076f6:	4a11      	ldr	r2, [pc, #68]	; (800773c <RadioSetTxConfig+0x220>)
 80076f8:	6a3b      	ldr	r3, [r7, #32]
 80076fa:	6493      	str	r3, [r2, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80076fc:	4b0f      	ldr	r3, [pc, #60]	; (800773c <RadioSetTxConfig+0x220>)
 80076fe:	2216      	movs	r2, #22
 8007700:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8007704:	480e      	ldr	r0, [pc, #56]	; (8007740 <RadioSetTxConfig+0x224>)
 8007706:	f001 ff0f 	bl	8009528 <SUBGRF_SetModulationParams>
            break;
 800770a:	e000      	b.n	800770e <RadioSetTxConfig+0x1f2>
            break;
 800770c:	bf00      	nop
    }



    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 800770e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007712:	4618      	mov	r0, r3
 8007714:	f002 fa38 	bl	8009b88 <SUBGRF_SetRfTxPower>
 8007718:	4603      	mov	r3, r0
 800771a:	461a      	mov	r2, r3
 800771c:	4b07      	ldr	r3, [pc, #28]	; (800773c <RadioSetTxConfig+0x220>)
 800771e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 8007722:	4b06      	ldr	r3, [pc, #24]	; (800773c <RadioSetTxConfig+0x220>)
 8007724:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007728:	4618      	mov	r0, r3
 800772a:	f002 fbfe 	bl	8009f2a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 800772e:	4a03      	ldr	r2, [pc, #12]	; (800773c <RadioSetTxConfig+0x220>)
 8007730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007732:	6053      	str	r3, [r2, #4]
}
 8007734:	bf00      	nop
 8007736:	3718      	adds	r7, #24
 8007738:	46bd      	mov	sp, r7
 800773a:	bd80      	pop	{r7, pc}
 800773c:	20000898 	.word	0x20000898
 8007740:	200008d0 	.word	0x200008d0
 8007744:	200008a6 	.word	0x200008a6
 8007748:	0800bc54 	.word	0x0800bc54
 800774c:	0800c078 	.word	0x0800c078
 8007750:	20000008 	.word	0x20000008

08007754 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
    return true;
 800775c:	2301      	movs	r3, #1
}
 800775e:	4618      	mov	r0, r3
 8007760:	370c      	adds	r7, #12
 8007762:	46bd      	mov	sp, r7
 8007764:	bc80      	pop	{r7}
 8007766:	4770      	bx	lr

08007768 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 8007768:	b480      	push	{r7}
 800776a:	b085      	sub	sp, #20
 800776c:	af00      	add	r7, sp, #0
 800776e:	4603      	mov	r3, r0
 8007770:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8007772:	2300      	movs	r3, #0
 8007774:	60fb      	str	r3, [r7, #12]

    switch( bw )
 8007776:	79fb      	ldrb	r3, [r7, #7]
 8007778:	2b0a      	cmp	r3, #10
 800777a:	d83e      	bhi.n	80077fa <RadioGetLoRaBandwidthInHz+0x92>
 800777c:	a201      	add	r2, pc, #4	; (adr r2, 8007784 <RadioGetLoRaBandwidthInHz+0x1c>)
 800777e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007782:	bf00      	nop
 8007784:	080077b1 	.word	0x080077b1
 8007788:	080077c1 	.word	0x080077c1
 800778c:	080077d1 	.word	0x080077d1
 8007790:	080077e1 	.word	0x080077e1
 8007794:	080077e9 	.word	0x080077e9
 8007798:	080077ef 	.word	0x080077ef
 800779c:	080077f5 	.word	0x080077f5
 80077a0:	080077fb 	.word	0x080077fb
 80077a4:	080077b9 	.word	0x080077b9
 80077a8:	080077c9 	.word	0x080077c9
 80077ac:	080077d9 	.word	0x080077d9
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 80077b0:	f641 6384 	movw	r3, #7812	; 0x1e84
 80077b4:	60fb      	str	r3, [r7, #12]
        break;
 80077b6:	e020      	b.n	80077fa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80077b8:	f642 03b1 	movw	r3, #10417	; 0x28b1
 80077bc:	60fb      	str	r3, [r7, #12]
        break;
 80077be:	e01c      	b.n	80077fa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80077c0:	f643 5309 	movw	r3, #15625	; 0x3d09
 80077c4:	60fb      	str	r3, [r7, #12]
        break;
 80077c6:	e018      	b.n	80077fa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80077c8:	f245 1361 	movw	r3, #20833	; 0x5161
 80077cc:	60fb      	str	r3, [r7, #12]
        break;
 80077ce:	e014      	b.n	80077fa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80077d0:	f647 2312 	movw	r3, #31250	; 0x7a12
 80077d4:	60fb      	str	r3, [r7, #12]
        break;
 80077d6:	e010      	b.n	80077fa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80077d8:	f24a 23c3 	movw	r3, #41667	; 0xa2c3
 80077dc:	60fb      	str	r3, [r7, #12]
        break;
 80077de:	e00c      	b.n	80077fa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 80077e0:	f24f 4324 	movw	r3, #62500	; 0xf424
 80077e4:	60fb      	str	r3, [r7, #12]
        break;
 80077e6:	e008      	b.n	80077fa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80077e8:	4b07      	ldr	r3, [pc, #28]	; (8007808 <RadioGetLoRaBandwidthInHz+0xa0>)
 80077ea:	60fb      	str	r3, [r7, #12]
        break;
 80077ec:	e005      	b.n	80077fa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80077ee:	4b07      	ldr	r3, [pc, #28]	; (800780c <RadioGetLoRaBandwidthInHz+0xa4>)
 80077f0:	60fb      	str	r3, [r7, #12]
        break;
 80077f2:	e002      	b.n	80077fa <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80077f4:	4b06      	ldr	r3, [pc, #24]	; (8007810 <RadioGetLoRaBandwidthInHz+0xa8>)
 80077f6:	60fb      	str	r3, [r7, #12]
        break;
 80077f8:	bf00      	nop
    }

    return bandwidthInHz;
 80077fa:	68fb      	ldr	r3, [r7, #12]
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3714      	adds	r7, #20
 8007800:	46bd      	mov	sp, r7
 8007802:	bc80      	pop	{r7}
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	0001e848 	.word	0x0001e848
 800780c:	0003d090 	.word	0x0003d090
 8007810:	0007a120 	.word	0x0007a120

08007814 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	4608      	mov	r0, r1
 800781e:	4611      	mov	r1, r2
 8007820:	461a      	mov	r2, r3
 8007822:	4603      	mov	r3, r0
 8007824:	70fb      	strb	r3, [r7, #3]
 8007826:	460b      	mov	r3, r1
 8007828:	803b      	strh	r3, [r7, #0]
 800782a:	4613      	mov	r3, r2
 800782c:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 800782e:	883b      	ldrh	r3, [r7, #0]
 8007830:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007832:	78ba      	ldrb	r2, [r7, #2]
 8007834:	f082 0201 	eor.w	r2, r2, #1
 8007838:	b2d2      	uxtb	r2, r2
 800783a:	2a00      	cmp	r2, #0
 800783c:	d001      	beq.n	8007842 <RadioGetGfskTimeOnAirNumerator+0x2e>
 800783e:	2208      	movs	r2, #8
 8007840:	e000      	b.n	8007844 <RadioGetGfskTimeOnAirNumerator+0x30>
 8007842:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8007844:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8007846:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 800784a:	7c3b      	ldrb	r3, [r7, #16]
 800784c:	7d39      	ldrb	r1, [r7, #20]
 800784e:	2900      	cmp	r1, #0
 8007850:	d001      	beq.n	8007856 <RadioGetGfskTimeOnAirNumerator+0x42>
 8007852:	2102      	movs	r1, #2
 8007854:	e000      	b.n	8007858 <RadioGetGfskTimeOnAirNumerator+0x44>
 8007856:	2100      	movs	r1, #0
 8007858:	440b      	add	r3, r1
 800785a:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 800785c:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 800785e:	4618      	mov	r0, r3
 8007860:	370c      	adds	r7, #12
 8007862:	46bd      	mov	sp, r7
 8007864:	bc80      	pop	{r7}
 8007866:	4770      	bx	lr

08007868 <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8007868:	b480      	push	{r7}
 800786a:	b08b      	sub	sp, #44	; 0x2c
 800786c:	af00      	add	r7, sp, #0
 800786e:	60f8      	str	r0, [r7, #12]
 8007870:	60b9      	str	r1, [r7, #8]
 8007872:	4611      	mov	r1, r2
 8007874:	461a      	mov	r2, r3
 8007876:	460b      	mov	r3, r1
 8007878:	71fb      	strb	r3, [r7, #7]
 800787a:	4613      	mov	r3, r2
 800787c:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 800787e:	79fb      	ldrb	r3, [r7, #7]
 8007880:	3304      	adds	r3, #4
 8007882:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8007884:	2300      	movs	r3, #0
 8007886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	2b05      	cmp	r3, #5
 800788e:	d002      	beq.n	8007896 <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	2b06      	cmp	r3, #6
 8007894:	d104      	bne.n	80078a0 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 8007896:	88bb      	ldrh	r3, [r7, #4]
 8007898:	2b0b      	cmp	r3, #11
 800789a:	d801      	bhi.n	80078a0 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 800789c:	230c      	movs	r3, #12
 800789e:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d105      	bne.n	80078b2 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	2b0b      	cmp	r3, #11
 80078aa:	d008      	beq.n	80078be <RadioGetLoRaTimeOnAirNumerator+0x56>
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	2b0c      	cmp	r3, #12
 80078b0:	d005      	beq.n	80078be <RadioGetLoRaTimeOnAirNumerator+0x56>
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d105      	bne.n	80078c4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	2b0c      	cmp	r3, #12
 80078bc:	d102      	bne.n	80078c4 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 80078be:	2301      	movs	r3, #1
 80078c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80078c4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80078c8:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 80078ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80078ce:	2a00      	cmp	r2, #0
 80078d0:	d001      	beq.n	80078d6 <RadioGetLoRaTimeOnAirNumerator+0x6e>
 80078d2:	2210      	movs	r2, #16
 80078d4:	e000      	b.n	80078d8 <RadioGetLoRaTimeOnAirNumerator+0x70>
 80078d6:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80078d8:	4413      	add	r3, r2
 80078da:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 80078e0:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 80078e2:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80078e6:	2a00      	cmp	r2, #0
 80078e8:	d001      	beq.n	80078ee <RadioGetLoRaTimeOnAirNumerator+0x86>
 80078ea:	2200      	movs	r2, #0
 80078ec:	e000      	b.n	80078f0 <RadioGetLoRaTimeOnAirNumerator+0x88>
 80078ee:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 80078f0:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80078f2:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	2b06      	cmp	r3, #6
 80078f8:	d803      	bhi.n	8007902 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	623b      	str	r3, [r7, #32]
 8007900:	e00e      	b.n	8007920 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	3308      	adds	r3, #8
 8007906:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 8007908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800790c:	2b00      	cmp	r3, #0
 800790e:	d004      	beq.n	800791a <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	3b02      	subs	r3, #2
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	623b      	str	r3, [r7, #32]
 8007918:	e002      	b.n	8007920 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	2b00      	cmp	r3, #0
 8007924:	da01      	bge.n	800792a <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 8007926:	2300      	movs	r3, #0
 8007928:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 800792a:	69fa      	ldr	r2, [r7, #28]
 800792c:	6a3b      	ldr	r3, [r7, #32]
 800792e:	4413      	add	r3, r2
 8007930:	1e5a      	subs	r2, r3, #1
 8007932:	6a3b      	ldr	r3, [r7, #32]
 8007934:	fb92 f3f3 	sdiv	r3, r2, r3
 8007938:	697a      	ldr	r2, [r7, #20]
 800793a:	fb02 f203 	mul.w	r2, r2, r3
 800793e:	88bb      	ldrh	r3, [r7, #4]
 8007940:	4413      	add	r3, r2
    int32_t intermediate =
 8007942:	330c      	adds	r3, #12
 8007944:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	2b06      	cmp	r3, #6
 800794a:	d802      	bhi.n	8007952 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	3302      	adds	r3, #2
 8007950:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	009b      	lsls	r3, r3, #2
 8007956:	1c5a      	adds	r2, r3, #1
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	3b02      	subs	r3, #2
 800795c:	fa02 f303 	lsl.w	r3, r2, r3
}
 8007960:	4618      	mov	r0, r3
 8007962:	372c      	adds	r7, #44	; 0x2c
 8007964:	46bd      	mov	sp, r7
 8007966:	bc80      	pop	{r7}
 8007968:	4770      	bx	lr
	...

0800796c <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b08a      	sub	sp, #40	; 0x28
 8007970:	af04      	add	r7, sp, #16
 8007972:	60b9      	str	r1, [r7, #8]
 8007974:	607a      	str	r2, [r7, #4]
 8007976:	461a      	mov	r2, r3
 8007978:	4603      	mov	r3, r0
 800797a:	73fb      	strb	r3, [r7, #15]
 800797c:	4613      	mov	r3, r2
 800797e:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8007980:	2300      	movs	r3, #0
 8007982:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8007984:	2301      	movs	r3, #1
 8007986:	613b      	str	r3, [r7, #16]

    switch( modem )
 8007988:	7bfb      	ldrb	r3, [r7, #15]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d002      	beq.n	8007994 <RadioTimeOnAir+0x28>
 800798e:	2b01      	cmp	r3, #1
 8007990:	d017      	beq.n	80079c2 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8007992:	e035      	b.n	8007a00 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8007994:	f897 0024 	ldrb.w	r0, [r7, #36]	; 0x24
 8007998:	8c3a      	ldrh	r2, [r7, #32]
 800799a:	7bb9      	ldrb	r1, [r7, #14]
 800799c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80079a0:	9301      	str	r3, [sp, #4]
 80079a2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80079a6:	9300      	str	r3, [sp, #0]
 80079a8:	4603      	mov	r3, r0
 80079aa:	6878      	ldr	r0, [r7, #4]
 80079ac:	f7ff ff32 	bl	8007814 <RadioGetGfskTimeOnAirNumerator>
 80079b0:	4603      	mov	r3, r0
 80079b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80079b6:	fb02 f303 	mul.w	r3, r2, r3
 80079ba:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	613b      	str	r3, [r7, #16]
        break;
 80079c0:	e01e      	b.n	8007a00 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80079c2:	8c39      	ldrh	r1, [r7, #32]
 80079c4:	7bba      	ldrb	r2, [r7, #14]
 80079c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80079ca:	9302      	str	r3, [sp, #8]
 80079cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80079d0:	9301      	str	r3, [sp, #4]
 80079d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80079d6:	9300      	str	r3, [sp, #0]
 80079d8:	460b      	mov	r3, r1
 80079da:	6879      	ldr	r1, [r7, #4]
 80079dc:	68b8      	ldr	r0, [r7, #8]
 80079de:	f7ff ff43 	bl	8007868 <RadioGetLoRaTimeOnAirNumerator>
 80079e2:	4603      	mov	r3, r0
 80079e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80079e8:	fb02 f303 	mul.w	r3, r2, r3
 80079ec:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 80079ee:	4a0a      	ldr	r2, [pc, #40]	; (8007a18 <RadioTimeOnAir+0xac>)
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	4413      	add	r3, r2
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7ff feb6 	bl	8007768 <RadioGetLoRaBandwidthInHz>
 80079fc:	6138      	str	r0, [r7, #16]
        break;
 80079fe:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC(numerator, denominator); /* ST_WORKAROUND : simplified calculation with macro usage */
 8007a00:	697a      	ldr	r2, [r7, #20]
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	4413      	add	r3, r2
 8007a06:	1e5a      	subs	r2, r3, #1
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3718      	adds	r7, #24
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}
 8007a16:	bf00      	nop
 8007a18:	0800c078 	.word	0x0800c078

08007a1c <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	460b      	mov	r3, r1
 8007a26:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8007a28:	2300      	movs	r3, #0
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f240 2101 	movw	r1, #513	; 0x201
 8007a30:	f240 2001 	movw	r0, #513	; 0x201
 8007a34:	f001 fc4e 	bl	80092d4 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX(SET);

    /* Set RF switch */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_TX);
 8007a38:	4b70      	ldr	r3, [pc, #448]	; (8007bfc <RadioSend+0x1e0>)
 8007a3a:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007a3e:	2101      	movs	r1, #1
 8007a40:	4618      	mov	r0, r3
 8007a42:	f002 f879 	bl	8009b38 <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if((SubgRf.Modem==MODEM_LORA) && (SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ))
 8007a46:	4b6d      	ldr	r3, [pc, #436]	; (8007bfc <RadioSend+0x1e0>)
 8007a48:	781b      	ldrb	r3, [r3, #0]
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d112      	bne.n	8007a74 <RadioSend+0x58>
 8007a4e:	4b6b      	ldr	r3, [pc, #428]	; (8007bfc <RadioSend+0x1e0>)
 8007a50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007a54:	2b06      	cmp	r3, #6
 8007a56:	d10d      	bne.n	8007a74 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8007a58:	f640 0089 	movw	r0, #2185	; 0x889
 8007a5c:	f001 ff8c 	bl	8009978 <SUBGRF_ReadRegister>
 8007a60:	4603      	mov	r3, r0
 8007a62:	f023 0304 	bic.w	r3, r3, #4
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	4619      	mov	r1, r3
 8007a6a:	f640 0089 	movw	r0, #2185	; 0x889
 8007a6e:	f001 ff6f 	bl	8009950 <SUBGRF_WriteRegister>
 8007a72:	e00c      	b.n	8007a8e <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8007a74:	f640 0089 	movw	r0, #2185	; 0x889
 8007a78:	f001 ff7e 	bl	8009978 <SUBGRF_ReadRegister>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	f043 0304 	orr.w	r3, r3, #4
 8007a82:	b2db      	uxtb	r3, r3
 8007a84:	4619      	mov	r1, r3
 8007a86:	f640 0089 	movw	r0, #2185	; 0x889
 8007a8a:	f001 ff61 	bl	8009950 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch(SubgRf.Modem)
 8007a8e:	4b5b      	ldr	r3, [pc, #364]	; (8007bfc <RadioSend+0x1e0>)
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	2b03      	cmp	r3, #3
 8007a94:	f200 80a5 	bhi.w	8007be2 <RadioSend+0x1c6>
 8007a98:	a201      	add	r2, pc, #4	; (adr r2, 8007aa0 <RadioSend+0x84>)
 8007a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a9e:	bf00      	nop
 8007aa0:	08007acb 	.word	0x08007acb
 8007aa4:	08007ab1 	.word	0x08007ab1
 8007aa8:	08007b2b 	.word	0x08007b2b
 8007aac:	08007b4b 	.word	0x08007b4b
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8007ab0:	4a52      	ldr	r2, [pc, #328]	; (8007bfc <RadioSend+0x1e0>)
 8007ab2:	78fb      	ldrb	r3, [r7, #3]
 8007ab4:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007ab6:	4852      	ldr	r0, [pc, #328]	; (8007c00 <RadioSend+0x1e4>)
 8007ab8:	f001 fe02 	bl	80096c0 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8007abc:	78fb      	ldrb	r3, [r7, #3]
 8007abe:	2200      	movs	r2, #0
 8007ac0:	4619      	mov	r1, r3
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f001 f928 	bl	8008d18 <SUBGRF_SendPayload>
            break;
 8007ac8:	e08c      	b.n	8007be4 <RadioSend+0x1c8>
        }
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 8007aca:	f002 fa20 	bl	8009f0e <RFW_Is_Init>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d11d      	bne.n	8007b10 <RadioSend+0xf4>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8007ad4:	f107 020d 	add.w	r2, r7, #13
 8007ad8:	78fb      	ldrb	r3, [r7, #3]
 8007ada:	4619      	mov	r1, r3
 8007adc:	6878      	ldr	r0, [r7, #4]
 8007ade:	f002 fa2e 	bl	8009f3e <RFW_TransmitInit>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d10c      	bne.n	8007b02 <RadioSend+0xe6>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8007ae8:	7b7a      	ldrb	r2, [r7, #13]
 8007aea:	4b44      	ldr	r3, [pc, #272]	; (8007bfc <RadioSend+0x1e0>)
 8007aec:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007aee:	4844      	ldr	r0, [pc, #272]	; (8007c00 <RadioSend+0x1e4>)
 8007af0:	f001 fde6 	bl	80096c0 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 8007af4:	7b7b      	ldrb	r3, [r7, #13]
 8007af6:	2200      	movs	r2, #0
 8007af8:	4619      	mov	r1, r3
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f001 f90c 	bl	8008d18 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 8007b00:	e070      	b.n	8007be4 <RadioSend+0x1c8>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 8007b02:	4b40      	ldr	r3, [pc, #256]	; (8007c04 <RadioSend+0x1e8>)
 8007b04:	2201      	movs	r2, #1
 8007b06:	2100      	movs	r1, #0
 8007b08:	2002      	movs	r0, #2
 8007b0a:	f003 fdb9 	bl	800b680 <UTIL_ADV_TRACE_COND_FSend>
 8007b0e:	e072      	b.n	8007bf6 <RadioSend+0x1da>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8007b10:	4a3a      	ldr	r2, [pc, #232]	; (8007bfc <RadioSend+0x1e0>)
 8007b12:	78fb      	ldrb	r3, [r7, #3]
 8007b14:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007b16:	483a      	ldr	r0, [pc, #232]	; (8007c00 <RadioSend+0x1e4>)
 8007b18:	f001 fdd2 	bl	80096c0 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 8007b1c:	78fb      	ldrb	r3, [r7, #3]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	4619      	mov	r1, r3
 8007b22:	6878      	ldr	r0, [r7, #4]
 8007b24:	f001 f8f8 	bl	8008d18 <SUBGRF_SendPayload>
            break;
 8007b28:	e05c      	b.n	8007be4 <RadioSend+0x1c8>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8007b2a:	4b34      	ldr	r3, [pc, #208]	; (8007bfc <RadioSend+0x1e0>)
 8007b2c:	2202      	movs	r2, #2
 8007b2e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8007b30:	4a32      	ldr	r2, [pc, #200]	; (8007bfc <RadioSend+0x1e0>)
 8007b32:	78fb      	ldrb	r3, [r7, #3]
 8007b34:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007b36:	4832      	ldr	r0, [pc, #200]	; (8007c00 <RadioSend+0x1e4>)
 8007b38:	f001 fdc2 	bl	80096c0 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8007b3c:	78fb      	ldrb	r3, [r7, #3]
 8007b3e:	2200      	movs	r2, #0
 8007b40:	4619      	mov	r1, r3
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f001 f8e8 	bl	8008d18 <SUBGRF_SendPayload>
            break;
 8007b48:	e04c      	b.n	8007be4 <RadioSend+0x1c8>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8007b4a:	78fb      	ldrb	r3, [r7, #3]
 8007b4c:	461a      	mov	r2, r3
 8007b4e:	6879      	ldr	r1, [r7, #4]
 8007b50:	482d      	ldr	r0, [pc, #180]	; (8007c08 <RadioSend+0x1ec>)
 8007b52:	f000 fc66 	bl	8008422 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8007b56:	4b29      	ldr	r3, [pc, #164]	; (8007bfc <RadioSend+0x1e0>)
 8007b58:	2202      	movs	r2, #2
 8007b5a:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8007b5c:	78fb      	ldrb	r3, [r7, #3]
 8007b5e:	3301      	adds	r3, #1
 8007b60:	b2da      	uxtb	r2, r3
 8007b62:	4b26      	ldr	r3, [pc, #152]	; (8007bfc <RadioSend+0x1e0>)
 8007b64:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007b66:	4826      	ldr	r0, [pc, #152]	; (8007c00 <RadioSend+0x1e4>)
 8007b68:	f001 fdaa 	bl	80096c0 <SUBGRF_SetPacketParams>

            RadioWrite( 0x00F1, 0 ); // clean start-up LSB
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	20f1      	movs	r0, #241	; 0xf1
 8007b70:	f000 f947 	bl	8007e02 <RadioWrite>
            RadioWrite( 0x00F0, 0 ); // clean start-up MSB
 8007b74:	2100      	movs	r1, #0
 8007b76:	20f0      	movs	r0, #240	; 0xf0
 8007b78:	f000 f943 	bl	8007e02 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8007b7c:	4b1f      	ldr	r3, [pc, #124]	; (8007bfc <RadioSend+0x1e0>)
 8007b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b80:	2b64      	cmp	r3, #100	; 0x64
 8007b82:	d108      	bne.n	8007b96 <RadioSend+0x17a>
            {
                RadioWrite( 0x00F3, 0x70 ); // clean end of frame LSB
 8007b84:	2170      	movs	r1, #112	; 0x70
 8007b86:	20f3      	movs	r0, #243	; 0xf3
 8007b88:	f000 f93b 	bl	8007e02 <RadioWrite>
                RadioWrite( 0x00F2, 0x1D ); // clean end of frame MSB
 8007b8c:	211d      	movs	r1, #29
 8007b8e:	20f2      	movs	r0, #242	; 0xf2
 8007b90:	f000 f937 	bl	8007e02 <RadioWrite>
 8007b94:	e007      	b.n	8007ba6 <RadioSend+0x18a>
            }
            else // 600 bps
            {
                RadioWrite( 0x00F3, 0xE1 ); // clean end of frame LSB
 8007b96:	21e1      	movs	r1, #225	; 0xe1
 8007b98:	20f3      	movs	r0, #243	; 0xf3
 8007b9a:	f000 f932 	bl	8007e02 <RadioWrite>
                RadioWrite( 0x00F2, 0x04 ); // clean end of frame MSB
 8007b9e:	2104      	movs	r1, #4
 8007ba0:	20f2      	movs	r0, #242	; 0xf2
 8007ba2:	f000 f92e 	bl	8007e02 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 8007ba6:	78fb      	ldrb	r3, [r7, #3]
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	00db      	lsls	r3, r3, #3
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	3302      	adds	r3, #2
 8007bb0:	81fb      	strh	r3, [r7, #14]
            RadioWrite( 0x00F4, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8007bb2:	89fb      	ldrh	r3, [r7, #14]
 8007bb4:	0a1b      	lsrs	r3, r3, #8
 8007bb6:	b29b      	uxth	r3, r3
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	4619      	mov	r1, r3
 8007bbc:	20f4      	movs	r0, #244	; 0xf4
 8007bbe:	f000 f920 	bl	8007e02 <RadioWrite>
            RadioWrite( 0x00F5, bitNum & 0x00FF );             // limit frame
 8007bc2:	89fb      	ldrh	r3, [r7, #14]
 8007bc4:	b2db      	uxtb	r3, r3
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	20f5      	movs	r0, #245	; 0xf5
 8007bca:	f000 f91a 	bl	8007e02 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 8007bce:	78fb      	ldrb	r3, [r7, #3]
 8007bd0:	3301      	adds	r3, #1
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8007bd8:	4619      	mov	r1, r3
 8007bda:	480b      	ldr	r0, [pc, #44]	; (8007c08 <RadioSend+0x1ec>)
 8007bdc:	f001 f89c 	bl	8008d18 <SUBGRF_SendPayload>
            break;
 8007be0:	e000      	b.n	8007be4 <RadioSend+0x1c8>
        }
        default:
            break;
 8007be2:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8007be4:	4b05      	ldr	r3, [pc, #20]	; (8007bfc <RadioSend+0x1e0>)
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	4619      	mov	r1, r3
 8007bea:	4808      	ldr	r0, [pc, #32]	; (8007c0c <RadioSend+0x1f0>)
 8007bec:	f003 fbc0 	bl	800b370 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8007bf0:	4806      	ldr	r0, [pc, #24]	; (8007c0c <RadioSend+0x1f0>)
 8007bf2:	f003 fadf 	bl	800b1b4 <UTIL_TIMER_Start>
}
 8007bf6:	3710      	adds	r7, #16
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bd80      	pop	{r7, pc}
 8007bfc:	20000898 	.word	0x20000898
 8007c00:	200008a6 	.word	0x200008a6
 8007c04:	0800bc5c 	.word	0x0800bc5c
 8007c08:	20000048 	.word	0x20000048
 8007c0c:	200008f0 	.word	0x200008f0

08007c10 <RadioSleep>:

static void RadioSleep( void )
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 8007c16:	2300      	movs	r3, #0
 8007c18:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 8007c1a:	793b      	ldrb	r3, [r7, #4]
 8007c1c:	f043 0304 	orr.w	r3, r3, #4
 8007c20:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 8007c22:	7938      	ldrb	r0, [r7, #4]
 8007c24:	f001 f954 	bl	8008ed0 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8007c28:	2002      	movs	r0, #2
 8007c2a:	f7f9 f85e 	bl	8000cea <HAL_Delay>
}
 8007c2e:	bf00      	nop
 8007c30:	3708      	adds	r7, #8
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <RadioStandby>:

static void RadioStandby( void )
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8007c3a:	2000      	movs	r0, #0
 8007c3c:	f001 f97a 	bl	8008f34 <SUBGRF_SetStandby>
}
 8007c40:	bf00      	nop
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
    if ( 1UL == RFW_Is_Init( ) )
 8007c4c:	f002 f95f 	bl	8009f0e <RFW_Is_Init>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d102      	bne.n	8007c5c <RadioRx+0x18>
    {
      RFW_ReceiveInit( );
 8007c56:	f002 f982 	bl	8009f5e <RFW_ReceiveInit>
 8007c5a:	e007      	b.n	8007c6c <RadioRx+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f240 2162 	movw	r1, #610	; 0x262
 8007c64:	f240 2062 	movw	r0, #610	; 0x262
 8007c68:	f001 fb34 	bl	80092d4 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d006      	beq.n	8007c80 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8007c72:	6879      	ldr	r1, [r7, #4]
 8007c74:	480f      	ldr	r0, [pc, #60]	; (8007cb4 <RadioRx+0x70>)
 8007c76:	f003 fb7b 	bl	800b370 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8007c7a:	480e      	ldr	r0, [pc, #56]	; (8007cb4 <RadioRx+0x70>)
 8007c7c:	f003 fa9a 	bl	800b1b4 <UTIL_TIMER_Start>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX(SET);

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8007c80:	4b0d      	ldr	r3, [pc, #52]	; (8007cb8 <RadioRx+0x74>)
 8007c82:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007c86:	2100      	movs	r1, #0
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f001 ff55 	bl	8009b38 <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 8007c8e:	4b0a      	ldr	r3, [pc, #40]	; (8007cb8 <RadioRx+0x74>)
 8007c90:	785b      	ldrb	r3, [r3, #1]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d004      	beq.n	8007ca0 <RadioRx+0x5c>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8007c96:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007c9a:	f001 f987 	bl	8008fac <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 8007c9e:	e005      	b.n	8007cac <RadioRx+0x68>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8007ca0:	4b05      	ldr	r3, [pc, #20]	; (8007cb8 <RadioRx+0x74>)
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	019b      	lsls	r3, r3, #6
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f001 f980 	bl	8008fac <SUBGRF_SetRx>
}
 8007cac:	bf00      	nop
 8007cae:	3708      	adds	r7, #8
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	20000908 	.word	0x20000908
 8007cb8:	20000898 	.word	0x20000898

08007cbc <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
    if (1UL==RFW_Is_Init())
 8007cc4:	f002 f923 	bl	8009f0e <RFW_Is_Init>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d102      	bne.n	8007cd4 <RadioRxBoosted+0x18>
    {
      RFW_ReceiveInit();
 8007cce:	f002 f946 	bl	8009f5e <RFW_ReceiveInit>
 8007cd2:	e007      	b.n	8007ce4 <RadioRxBoosted+0x28>
    }
    else
    {
      SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f240 2162 	movw	r1, #610	; 0x262
 8007cdc:	f240 2062 	movw	r0, #610	; 0x262
 8007ce0:	f001 faf8 	bl	80092d4 <SUBGRF_SetDioIrqParams>
                              IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                              IRQ_RADIO_NONE,
                              IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d006      	beq.n	8007cf8 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 8007cea:	6879      	ldr	r1, [r7, #4]
 8007cec:	480f      	ldr	r0, [pc, #60]	; (8007d2c <RadioRxBoosted+0x70>)
 8007cee:	f003 fb3f 	bl	800b370 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8007cf2:	480e      	ldr	r0, [pc, #56]	; (8007d2c <RadioRxBoosted+0x70>)
 8007cf4:	f003 fa5e 	bl	800b1b4 <UTIL_TIMER_Start>
    }

    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8007cf8:	4b0d      	ldr	r3, [pc, #52]	; (8007d30 <RadioRxBoosted+0x74>)
 8007cfa:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007cfe:	2100      	movs	r1, #0
 8007d00:	4618      	mov	r0, r3
 8007d02:	f001 ff19 	bl	8009b38 <SUBGRF_SetSwitch>

    if( SubgRf.RxContinuous == true )
 8007d06:	4b0a      	ldr	r3, [pc, #40]	; (8007d30 <RadioRxBoosted+0x74>)
 8007d08:	785b      	ldrb	r3, [r3, #1]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d004      	beq.n	8007d18 <RadioRxBoosted+0x5c>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8007d0e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007d12:	f001 f96b 	bl	8008fec <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 8007d16:	e005      	b.n	8007d24 <RadioRxBoosted+0x68>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8007d18:	4b05      	ldr	r3, [pc, #20]	; (8007d30 <RadioRxBoosted+0x74>)
 8007d1a:	689b      	ldr	r3, [r3, #8]
 8007d1c:	019b      	lsls	r3, r3, #6
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f001 f964 	bl	8008fec <SUBGRF_SetRxBoosted>
}
 8007d24:	bf00      	nop
 8007d26:	3708      	adds	r7, #8
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	20000908 	.word	0x20000908
 8007d30:	20000898 	.word	0x20000898

08007d34 <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b082      	sub	sp, #8
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	6039      	str	r1, [r7, #0]
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8007d3e:	4b07      	ldr	r3, [pc, #28]	; (8007d5c <RadioSetRxDutyCycle+0x28>)
 8007d40:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007d44:	2100      	movs	r1, #0
 8007d46:	4618      	mov	r0, r3
 8007d48:	f001 fef6 	bl	8009b38 <SUBGRF_SetSwitch>

    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8007d4c:	6839      	ldr	r1, [r7, #0]
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f001 f970 	bl	8009034 <SUBGRF_SetRxDutyCycle>
}
 8007d54:	bf00      	nop
 8007d56:	3708      	adds	r7, #8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}
 8007d5c:	20000898 	.word	0x20000898

08007d60 <RadioStartCad>:

static void RadioStartCad( void )
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch(SubgRf.AntSwitchPaSelect, RFSWITCH_RX);
 8007d64:	4b09      	ldr	r3, [pc, #36]	; (8007d8c <RadioStartCad+0x2c>)
 8007d66:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8007d6a:	2100      	movs	r1, #0
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	f001 fee3 	bl	8009b38 <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8007d72:	2300      	movs	r3, #0
 8007d74:	2200      	movs	r2, #0
 8007d76:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8007d7a:	f44f 70c0 	mov.w	r0, #384	; 0x180
 8007d7e:	f001 faa9 	bl	80092d4 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8007d82:	f001 f983 	bl	800908c <SUBGRF_SetCad>
}
 8007d86:	bf00      	nop
 8007d88:	bd80      	pop	{r7, pc}
 8007d8a:	bf00      	nop
 8007d8c:	20000898 	.word	0x20000898

08007d90 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	460b      	mov	r3, r1
 8007d9a:	70fb      	strb	r3, [r7, #3]
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8007da0:	883b      	ldrh	r3, [r7, #0]
 8007da2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007da6:	fb02 f303 	mul.w	r3, r2, r3
 8007daa:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f001 faed 	bl	800938c <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8007db2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007db6:	4618      	mov	r0, r3
 8007db8:	f001 fee6 	bl	8009b88 <SUBGRF_SetRfTxPower>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch(antswitchpow, RFSWITCH_TX);
 8007dc0:	7afb      	ldrb	r3, [r7, #11]
 8007dc2:	2101      	movs	r1, #1
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f001 feb7 	bl	8009b38 <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8007dca:	f001 f96d 	bl	80090a8 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8007dce:	68f9      	ldr	r1, [r7, #12]
 8007dd0:	4804      	ldr	r0, [pc, #16]	; (8007de4 <RadioSetTxContinuousWave+0x54>)
 8007dd2:	f003 facd 	bl	800b370 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8007dd6:	4803      	ldr	r0, [pc, #12]	; (8007de4 <RadioSetTxContinuousWave+0x54>)
 8007dd8:	f003 f9ec 	bl	800b1b4 <UTIL_TIMER_Start>
}
 8007ddc:	bf00      	nop
 8007dde:	3710      	adds	r7, #16
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}
 8007de4:	200008f0 	.word	0x200008f0

08007de8 <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b082      	sub	sp, #8
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	4603      	mov	r3, r0
 8007df0:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8007df2:	f001 fd1a 	bl	800982a <SUBGRF_GetRssiInst>
 8007df6:	4603      	mov	r3, r0
 8007df8:	b21b      	sxth	r3, r3
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3708      	adds	r7, #8
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}

08007e02 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b082      	sub	sp, #8
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	4603      	mov	r3, r0
 8007e0a:	460a      	mov	r2, r1
 8007e0c:	80fb      	strh	r3, [r7, #6]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister(addr, data );
 8007e12:	797a      	ldrb	r2, [r7, #5]
 8007e14:	88fb      	ldrh	r3, [r7, #6]
 8007e16:	4611      	mov	r1, r2
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f001 fd99 	bl	8009950 <SUBGRF_WriteRegister>
}
 8007e1e:	bf00      	nop
 8007e20:	3708      	adds	r7, #8
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b082      	sub	sp, #8
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister(addr);
 8007e30:	88fb      	ldrh	r3, [r7, #6]
 8007e32:	4618      	mov	r0, r3
 8007e34:	f001 fda0 	bl	8009978 <SUBGRF_ReadRegister>
 8007e38:	4603      	mov	r3, r0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3708      	adds	r7, #8
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b082      	sub	sp, #8
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	4603      	mov	r3, r0
 8007e4a:	6039      	str	r1, [r7, #0]
 8007e4c:	80fb      	strh	r3, [r7, #6]
 8007e4e:	4613      	mov	r3, r2
 8007e50:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8007e52:	797b      	ldrb	r3, [r7, #5]
 8007e54:	b29a      	uxth	r2, r3
 8007e56:	88fb      	ldrh	r3, [r7, #6]
 8007e58:	6839      	ldr	r1, [r7, #0]
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f001 fda0 	bl	80099a0 <SUBGRF_WriteRegisters>
}
 8007e60:	bf00      	nop
 8007e62:	3708      	adds	r7, #8
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}

08007e68 <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b082      	sub	sp, #8
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	4603      	mov	r3, r0
 8007e70:	6039      	str	r1, [r7, #0]
 8007e72:	80fb      	strh	r3, [r7, #6]
 8007e74:	4613      	mov	r3, r2
 8007e76:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8007e78:	797b      	ldrb	r3, [r7, #5]
 8007e7a:	b29a      	uxth	r2, r3
 8007e7c:	88fb      	ldrh	r3, [r7, #6]
 8007e7e:	6839      	ldr	r1, [r7, #0]
 8007e80:	4618      	mov	r0, r3
 8007e82:	f001 fdaf 	bl	80099e4 <SUBGRF_ReadRegisters>
}
 8007e86:	bf00      	nop
 8007e88:	3708      	adds	r7, #8
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}
	...

08007e90 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b082      	sub	sp, #8
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	4603      	mov	r3, r0
 8007e98:	460a      	mov	r2, r1
 8007e9a:	71fb      	strb	r3, [r7, #7]
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8007ea0:	79fb      	ldrb	r3, [r7, #7]
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d10a      	bne.n	8007ebc <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8007ea6:	4a0e      	ldr	r2, [pc, #56]	; (8007ee0 <RadioSetMaxPayloadLength+0x50>)
 8007ea8:	79bb      	ldrb	r3, [r7, #6]
 8007eaa:	7013      	strb	r3, [r2, #0]
 8007eac:	4b0c      	ldr	r3, [pc, #48]	; (8007ee0 <RadioSetMaxPayloadLength+0x50>)
 8007eae:	781a      	ldrb	r2, [r3, #0]
 8007eb0:	4b0c      	ldr	r3, [pc, #48]	; (8007ee4 <RadioSetMaxPayloadLength+0x54>)
 8007eb2:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007eb4:	480c      	ldr	r0, [pc, #48]	; (8007ee8 <RadioSetMaxPayloadLength+0x58>)
 8007eb6:	f001 fc03 	bl	80096c0 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8007eba:	e00d      	b.n	8007ed8 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8007ebc:	4b09      	ldr	r3, [pc, #36]	; (8007ee4 <RadioSetMaxPayloadLength+0x54>)
 8007ebe:	7d5b      	ldrb	r3, [r3, #21]
 8007ec0:	2b01      	cmp	r3, #1
 8007ec2:	d109      	bne.n	8007ed8 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8007ec4:	4a06      	ldr	r2, [pc, #24]	; (8007ee0 <RadioSetMaxPayloadLength+0x50>)
 8007ec6:	79bb      	ldrb	r3, [r7, #6]
 8007ec8:	7013      	strb	r3, [r2, #0]
 8007eca:	4b05      	ldr	r3, [pc, #20]	; (8007ee0 <RadioSetMaxPayloadLength+0x50>)
 8007ecc:	781a      	ldrb	r2, [r3, #0]
 8007ece:	4b05      	ldr	r3, [pc, #20]	; (8007ee4 <RadioSetMaxPayloadLength+0x54>)
 8007ed0:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007ed2:	4805      	ldr	r0, [pc, #20]	; (8007ee8 <RadioSetMaxPayloadLength+0x58>)
 8007ed4:	f001 fbf4 	bl	80096c0 <SUBGRF_SetPacketParams>
}
 8007ed8:	bf00      	nop
 8007eda:	3708      	adds	r7, #8
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}
 8007ee0:	20000008 	.word	0x20000008
 8007ee4:	20000898 	.word	0x20000898
 8007ee8:	200008a6 	.word	0x200008a6

08007eec <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b082      	sub	sp, #8
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8007ef6:	4a13      	ldr	r2, [pc, #76]	; (8007f44 <RadioSetPublicNetwork+0x58>)
 8007ef8:	79fb      	ldrb	r3, [r7, #7]
 8007efa:	7313      	strb	r3, [r2, #12]
 8007efc:	4b11      	ldr	r3, [pc, #68]	; (8007f44 <RadioSetPublicNetwork+0x58>)
 8007efe:	7b1a      	ldrb	r2, [r3, #12]
 8007f00:	4b10      	ldr	r3, [pc, #64]	; (8007f44 <RadioSetPublicNetwork+0x58>)
 8007f02:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8007f04:	2001      	movs	r0, #1
 8007f06:	f7ff f82b 	bl	8006f60 <RadioSetModem>
    if( enable == true )
 8007f0a:	79fb      	ldrb	r3, [r7, #7]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d00a      	beq.n	8007f26 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8007f10:	2134      	movs	r1, #52	; 0x34
 8007f12:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8007f16:	f001 fd1b 	bl	8009950 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8007f1a:	2144      	movs	r1, #68	; 0x44
 8007f1c:	f240 7041 	movw	r0, #1857	; 0x741
 8007f20:	f001 fd16 	bl	8009950 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8007f24:	e009      	b.n	8007f3a <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8007f26:	2114      	movs	r1, #20
 8007f28:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8007f2c:	f001 fd10 	bl	8009950 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8007f30:	2124      	movs	r1, #36	; 0x24
 8007f32:	f240 7041 	movw	r0, #1857	; 0x741
 8007f36:	f001 fd0b 	bl	8009950 <SUBGRF_WriteRegister>
}
 8007f3a:	bf00      	nop
 8007f3c:	3708      	adds	r7, #8
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	20000898 	.word	0x20000898

08007f48 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8007f4c:	f001 fe50 	bl	8009bf0 <SUBGRF_GetRadioWakeUpTime>
 8007f50:	4603      	mov	r3, r0
 8007f52:	3303      	adds	r3, #3
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void* context )
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8007f60:	f000 f80e 	bl	8007f80 <RadioOnTxTimeoutProcess>
}
 8007f64:	bf00      	nop
 8007f66:	3708      	adds	r7, #8
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void* context )
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b082      	sub	sp, #8
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8007f74:	f000 f818 	bl	8007fa8 <RadioOnRxTimeoutProcess>
}
 8007f78:	bf00      	nop
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8007f84:	4b07      	ldr	r3, [pc, #28]	; (8007fa4 <RadioOnTxTimeoutProcess+0x24>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d008      	beq.n	8007f9e <RadioOnTxTimeoutProcess+0x1e>
 8007f8c:	4b05      	ldr	r3, [pc, #20]	; (8007fa4 <RadioOnTxTimeoutProcess+0x24>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d003      	beq.n	8007f9e <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8007f96:	4b03      	ldr	r3, [pc, #12]	; (8007fa4 <RadioOnTxTimeoutProcess+0x24>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	4798      	blx	r3
    }
}
 8007f9e:	bf00      	nop
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	20000148 	.word	0x20000148

08007fa8 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX(RST);
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8007fac:	4b07      	ldr	r3, [pc, #28]	; (8007fcc <RadioOnRxTimeoutProcess+0x24>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d008      	beq.n	8007fc6 <RadioOnRxTimeoutProcess+0x1e>
 8007fb4:	4b05      	ldr	r3, [pc, #20]	; (8007fcc <RadioOnRxTimeoutProcess+0x24>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d003      	beq.n	8007fc6 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8007fbe:	4b03      	ldr	r3, [pc, #12]	; (8007fcc <RadioOnRxTimeoutProcess+0x24>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	4798      	blx	r3
    }
}
 8007fc6:	bf00      	nop
 8007fc8:	bd80      	pop	{r7, pc}
 8007fca:	bf00      	nop
 8007fcc:	20000148 	.word	0x20000148

08007fd0 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8007fda:	4a05      	ldr	r2, [pc, #20]	; (8007ff0 <RadioOnDioIrq+0x20>)
 8007fdc:	88fb      	ldrh	r3, [r7, #6]
 8007fde:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54

    RADIO_IRQ_PROCESS();
 8007fe2:	f000 f807 	bl	8007ff4 <RadioIrqProcess>
}
 8007fe6:	bf00      	nop
 8007fe8:	3708      	adds	r7, #8
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	bf00      	nop
 8007ff0:	20000898 	.word	0x20000898

08007ff4 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8007ff4:	b590      	push	{r4, r7, lr}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8007ffe:	2300      	movs	r3, #0
 8008000:	603b      	str	r3, [r7, #0]

    switch ( SubgRf.RadioIrq )
 8008002:	4bb5      	ldr	r3, [pc, #724]	; (80082d8 <RadioIrqProcess+0x2e4>)
 8008004:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8008008:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800800c:	f000 810c 	beq.w	8008228 <RadioIrqProcess+0x234>
 8008010:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008014:	f300 81b5 	bgt.w	8008382 <RadioIrqProcess+0x38e>
 8008018:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800801c:	f000 80f0 	beq.w	8008200 <RadioIrqProcess+0x20c>
 8008020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008024:	f300 81ad 	bgt.w	8008382 <RadioIrqProcess+0x38e>
 8008028:	2b80      	cmp	r3, #128	; 0x80
 800802a:	f000 80d5 	beq.w	80081d8 <RadioIrqProcess+0x1e4>
 800802e:	2b80      	cmp	r3, #128	; 0x80
 8008030:	f300 81a7 	bgt.w	8008382 <RadioIrqProcess+0x38e>
 8008034:	2b20      	cmp	r3, #32
 8008036:	dc49      	bgt.n	80080cc <RadioIrqProcess+0xd8>
 8008038:	2b00      	cmp	r3, #0
 800803a:	f340 81a2 	ble.w	8008382 <RadioIrqProcess+0x38e>
 800803e:	3b01      	subs	r3, #1
 8008040:	2b1f      	cmp	r3, #31
 8008042:	f200 819e 	bhi.w	8008382 <RadioIrqProcess+0x38e>
 8008046:	a201      	add	r2, pc, #4	; (adr r2, 800804c <RadioIrqProcess+0x58>)
 8008048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800804c:	080080d5 	.word	0x080080d5
 8008050:	0800810f 	.word	0x0800810f
 8008054:	08008383 	.word	0x08008383
 8008058:	080082a1 	.word	0x080082a1
 800805c:	08008383 	.word	0x08008383
 8008060:	08008383 	.word	0x08008383
 8008064:	08008383 	.word	0x08008383
 8008068:	080082af 	.word	0x080082af
 800806c:	08008383 	.word	0x08008383
 8008070:	08008383 	.word	0x08008383
 8008074:	08008383 	.word	0x08008383
 8008078:	08008383 	.word	0x08008383
 800807c:	08008383 	.word	0x08008383
 8008080:	08008383 	.word	0x08008383
 8008084:	08008383 	.word	0x08008383
 8008088:	080082cb 	.word	0x080082cb
 800808c:	08008383 	.word	0x08008383
 8008090:	08008383 	.word	0x08008383
 8008094:	08008383 	.word	0x08008383
 8008098:	08008383 	.word	0x08008383
 800809c:	08008383 	.word	0x08008383
 80080a0:	08008383 	.word	0x08008383
 80080a4:	08008383 	.word	0x08008383
 80080a8:	08008383 	.word	0x08008383
 80080ac:	08008383 	.word	0x08008383
 80080b0:	08008383 	.word	0x08008383
 80080b4:	08008383 	.word	0x08008383
 80080b8:	08008383 	.word	0x08008383
 80080bc:	08008383 	.word	0x08008383
 80080c0:	08008383 	.word	0x08008383
 80080c4:	08008383 	.word	0x08008383
 80080c8:	08008305 	.word	0x08008305
 80080cc:	2b40      	cmp	r3, #64	; 0x40
 80080ce:	f000 813a 	beq.w	8008346 <RadioIrqProcess+0x352>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 80080d2:	e156      	b.n	8008382 <RadioIrqProcess+0x38e>
        TimerStop( &TxTimeoutTimer );
 80080d4:	4881      	ldr	r0, [pc, #516]	; (80082dc <RadioIrqProcess+0x2e8>)
 80080d6:	f003 f8db 	bl	800b290 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80080da:	2000      	movs	r0, #0
 80080dc:	f000 ff2a 	bl	8008f34 <SUBGRF_SetStandby>
        if ( RFW_Is_LongPacketModeEnabled() == 1 )
 80080e0:	f001 ff1c 	bl	8009f1c <RFW_Is_LongPacketModeEnabled>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d101      	bne.n	80080ee <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 80080ea:	f001 ff40 	bl	8009f6e <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80080ee:	4b7c      	ldr	r3, [pc, #496]	; (80082e0 <RadioIrqProcess+0x2ec>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	f000 8147 	beq.w	8008386 <RadioIrqProcess+0x392>
 80080f8:	4b79      	ldr	r3, [pc, #484]	; (80082e0 <RadioIrqProcess+0x2ec>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	f000 8141 	beq.w	8008386 <RadioIrqProcess+0x392>
            RadioEvents->TxDone( );
 8008104:	4b76      	ldr	r3, [pc, #472]	; (80082e0 <RadioIrqProcess+0x2ec>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4798      	blx	r3
        break;
 800810c:	e13b      	b.n	8008386 <RadioIrqProcess+0x392>
        TimerStop( &RxTimeoutTimer );
 800810e:	4875      	ldr	r0, [pc, #468]	; (80082e4 <RadioIrqProcess+0x2f0>)
 8008110:	f003 f8be 	bl	800b290 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8008114:	4b70      	ldr	r3, [pc, #448]	; (80082d8 <RadioIrqProcess+0x2e4>)
 8008116:	785b      	ldrb	r3, [r3, #1]
 8008118:	f083 0301 	eor.w	r3, r3, #1
 800811c:	b2db      	uxtb	r3, r3
 800811e:	2b00      	cmp	r3, #0
 8008120:	d014      	beq.n	800814c <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8008122:	2000      	movs	r0, #0
 8008124:	f000 ff06 	bl	8008f34 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( 0x0902, 0x00 );
 8008128:	2100      	movs	r1, #0
 800812a:	f640 1002 	movw	r0, #2306	; 0x902
 800812e:	f001 fc0f 	bl	8009950 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( 0x0944, SUBGRF_ReadRegister( 0x0944 ) | ( 1 << 1 ) );
 8008132:	f640 1044 	movw	r0, #2372	; 0x944
 8008136:	f001 fc1f 	bl	8009978 <SUBGRF_ReadRegister>
 800813a:	4603      	mov	r3, r0
 800813c:	f043 0302 	orr.w	r3, r3, #2
 8008140:	b2db      	uxtb	r3, r3
 8008142:	4619      	mov	r1, r3
 8008144:	f640 1044 	movw	r0, #2372	; 0x944
 8008148:	f001 fc02 	bl	8009950 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size , 255 );
 800814c:	1dfb      	adds	r3, r7, #7
 800814e:	22ff      	movs	r2, #255	; 0xff
 8008150:	4619      	mov	r1, r3
 8008152:	4865      	ldr	r0, [pc, #404]	; (80082e8 <RadioIrqProcess+0x2f4>)
 8008154:	f000 fdbe 	bl	8008cd4 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &(SubgRf.PacketStatus) );
 8008158:	4864      	ldr	r0, [pc, #400]	; (80082ec <RadioIrqProcess+0x2f8>)
 800815a:	f001 fba7 	bl	80098ac <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800815e:	4b60      	ldr	r3, [pc, #384]	; (80082e0 <RadioIrqProcess+0x2ec>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d036      	beq.n	80081d4 <RadioIrqProcess+0x1e0>
 8008166:	4b5e      	ldr	r3, [pc, #376]	; (80082e0 <RadioIrqProcess+0x2ec>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d031      	beq.n	80081d4 <RadioIrqProcess+0x1e0>
            switch ( SubgRf.PacketStatus.packetType )
 8008170:	4b59      	ldr	r3, [pc, #356]	; (80082d8 <RadioIrqProcess+0x2e4>)
 8008172:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008176:	2b01      	cmp	r3, #1
 8008178:	d10e      	bne.n	8008198 <RadioIrqProcess+0x1a4>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 800817a:	4b59      	ldr	r3, [pc, #356]	; (80082e0 <RadioIrqProcess+0x2ec>)
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	689c      	ldr	r4, [r3, #8]
 8008180:	79fb      	ldrb	r3, [r7, #7]
 8008182:	b299      	uxth	r1, r3
 8008184:	4b54      	ldr	r3, [pc, #336]	; (80082d8 <RadioIrqProcess+0x2e4>)
 8008186:	f993 3030 	ldrsb.w	r3, [r3, #48]	; 0x30
 800818a:	b21a      	sxth	r2, r3
 800818c:	4b52      	ldr	r3, [pc, #328]	; (80082d8 <RadioIrqProcess+0x2e4>)
 800818e:	f993 3031 	ldrsb.w	r3, [r3, #49]	; 0x31
 8008192:	4855      	ldr	r0, [pc, #340]	; (80082e8 <RadioIrqProcess+0x2f4>)
 8008194:	47a0      	blx	r4
                break;
 8008196:	e01e      	b.n	80081d6 <RadioIrqProcess+0x1e2>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8008198:	4b4f      	ldr	r3, [pc, #316]	; (80082d8 <RadioIrqProcess+0x2e4>)
 800819a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800819c:	463a      	mov	r2, r7
 800819e:	4611      	mov	r1, r2
 80081a0:	4618      	mov	r0, r3
 80081a2:	f001 fe07 	bl	8009db4 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 80081a6:	4b4e      	ldr	r3, [pc, #312]	; (80082e0 <RadioIrqProcess+0x2ec>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	689c      	ldr	r4, [r3, #8]
 80081ac:	79fb      	ldrb	r3, [r7, #7]
 80081ae:	b299      	uxth	r1, r3
 80081b0:	4b49      	ldr	r3, [pc, #292]	; (80082d8 <RadioIrqProcess+0x2e4>)
 80081b2:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 80081b6:	b218      	sxth	r0, r3
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80081be:	4a4c      	ldr	r2, [pc, #304]	; (80082f0 <RadioIrqProcess+0x2fc>)
 80081c0:	fb82 c203 	smull	ip, r2, r2, r3
 80081c4:	1192      	asrs	r2, r2, #6
 80081c6:	17db      	asrs	r3, r3, #31
 80081c8:	1ad3      	subs	r3, r2, r3
 80081ca:	b25b      	sxtb	r3, r3
 80081cc:	4602      	mov	r2, r0
 80081ce:	4846      	ldr	r0, [pc, #280]	; (80082e8 <RadioIrqProcess+0x2f4>)
 80081d0:	47a0      	blx	r4
                break;
 80081d2:	e000      	b.n	80081d6 <RadioIrqProcess+0x1e2>
        }
 80081d4:	bf00      	nop
        break;
 80081d6:	e0e3      	b.n	80083a0 <RadioIrqProcess+0x3ac>
        SUBGRF_SetStandby( STDBY_RC );
 80081d8:	2000      	movs	r0, #0
 80081da:	f000 feab 	bl	8008f34 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 80081de:	4b40      	ldr	r3, [pc, #256]	; (80082e0 <RadioIrqProcess+0x2ec>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	f000 80d1 	beq.w	800838a <RadioIrqProcess+0x396>
 80081e8:	4b3d      	ldr	r3, [pc, #244]	; (80082e0 <RadioIrqProcess+0x2ec>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	f000 80cb 	beq.w	800838a <RadioIrqProcess+0x396>
            RadioEvents->CadDone( false );
 80081f4:	4b3a      	ldr	r3, [pc, #232]	; (80082e0 <RadioIrqProcess+0x2ec>)
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	699b      	ldr	r3, [r3, #24]
 80081fa:	2000      	movs	r0, #0
 80081fc:	4798      	blx	r3
        break;
 80081fe:	e0c4      	b.n	800838a <RadioIrqProcess+0x396>
        SUBGRF_SetStandby( STDBY_RC );
 8008200:	2000      	movs	r0, #0
 8008202:	f000 fe97 	bl	8008f34 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8008206:	4b36      	ldr	r3, [pc, #216]	; (80082e0 <RadioIrqProcess+0x2ec>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2b00      	cmp	r3, #0
 800820c:	f000 80bf 	beq.w	800838e <RadioIrqProcess+0x39a>
 8008210:	4b33      	ldr	r3, [pc, #204]	; (80082e0 <RadioIrqProcess+0x2ec>)
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	699b      	ldr	r3, [r3, #24]
 8008216:	2b00      	cmp	r3, #0
 8008218:	f000 80b9 	beq.w	800838e <RadioIrqProcess+0x39a>
            RadioEvents->CadDone( true );
 800821c:	4b30      	ldr	r3, [pc, #192]	; (80082e0 <RadioIrqProcess+0x2ec>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	699b      	ldr	r3, [r3, #24]
 8008222:	2001      	movs	r0, #1
 8008224:	4798      	blx	r3
        break;
 8008226:	e0b2      	b.n	800838e <RadioIrqProcess+0x39a>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8008228:	4b32      	ldr	r3, [pc, #200]	; (80082f4 <RadioIrqProcess+0x300>)
 800822a:	2201      	movs	r2, #1
 800822c:	2100      	movs	r1, #0
 800822e:	2002      	movs	r0, #2
 8008230:	f003 fa26 	bl	800b680 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8008234:	f000 fd34 	bl	8008ca0 <SUBGRF_GetOperatingMode>
 8008238:	4603      	mov	r3, r0
 800823a:	2b04      	cmp	r3, #4
 800823c:	d115      	bne.n	800826a <RadioIrqProcess+0x276>
            TimerStop( &TxTimeoutTimer );
 800823e:	4827      	ldr	r0, [pc, #156]	; (80082dc <RadioIrqProcess+0x2e8>)
 8008240:	f003 f826 	bl	800b290 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8008244:	2000      	movs	r0, #0
 8008246:	f000 fe75 	bl	8008f34 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 800824a:	4b25      	ldr	r3, [pc, #148]	; (80082e0 <RadioIrqProcess+0x2ec>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	f000 809f 	beq.w	8008392 <RadioIrqProcess+0x39e>
 8008254:	4b22      	ldr	r3, [pc, #136]	; (80082e0 <RadioIrqProcess+0x2ec>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	2b00      	cmp	r3, #0
 800825c:	f000 8099 	beq.w	8008392 <RadioIrqProcess+0x39e>
                RadioEvents->TxTimeout( );
 8008260:	4b1f      	ldr	r3, [pc, #124]	; (80082e0 <RadioIrqProcess+0x2ec>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	685b      	ldr	r3, [r3, #4]
 8008266:	4798      	blx	r3
        break;
 8008268:	e093      	b.n	8008392 <RadioIrqProcess+0x39e>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 800826a:	f000 fd19 	bl	8008ca0 <SUBGRF_GetOperatingMode>
 800826e:	4603      	mov	r3, r0
 8008270:	2b05      	cmp	r3, #5
 8008272:	f040 808e 	bne.w	8008392 <RadioIrqProcess+0x39e>
            TimerStop( &RxTimeoutTimer );
 8008276:	481b      	ldr	r0, [pc, #108]	; (80082e4 <RadioIrqProcess+0x2f0>)
 8008278:	f003 f80a 	bl	800b290 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800827c:	2000      	movs	r0, #0
 800827e:	f000 fe59 	bl	8008f34 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8008282:	4b17      	ldr	r3, [pc, #92]	; (80082e0 <RadioIrqProcess+0x2ec>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	2b00      	cmp	r3, #0
 8008288:	f000 8083 	beq.w	8008392 <RadioIrqProcess+0x39e>
 800828c:	4b14      	ldr	r3, [pc, #80]	; (80082e0 <RadioIrqProcess+0x2ec>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d07d      	beq.n	8008392 <RadioIrqProcess+0x39e>
                RadioEvents->RxTimeout( );
 8008296:	4b12      	ldr	r3, [pc, #72]	; (80082e0 <RadioIrqProcess+0x2ec>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	4798      	blx	r3
        break;
 800829e:	e078      	b.n	8008392 <RadioIrqProcess+0x39e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 80082a0:	4b15      	ldr	r3, [pc, #84]	; (80082f8 <RadioIrqProcess+0x304>)
 80082a2:	2201      	movs	r2, #1
 80082a4:	2100      	movs	r1, #0
 80082a6:	2002      	movs	r0, #2
 80082a8:	f003 f9ea 	bl	800b680 <UTIL_ADV_TRACE_COND_FSend>
        break;
 80082ac:	e078      	b.n	80083a0 <RadioIrqProcess+0x3ac>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 80082ae:	4b13      	ldr	r3, [pc, #76]	; (80082fc <RadioIrqProcess+0x308>)
 80082b0:	2201      	movs	r2, #1
 80082b2:	2100      	movs	r1, #0
 80082b4:	2002      	movs	r0, #2
 80082b6:	f003 f9e3 	bl	800b680 <UTIL_ADV_TRACE_COND_FSend>
        if ( 1UL == RFW_Is_Init( ) )
 80082ba:	f001 fe28 	bl	8009f0e <RFW_Is_Init>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b01      	cmp	r3, #1
 80082c2:	d168      	bne.n	8008396 <RadioIrqProcess+0x3a2>
            RFW_ReceivePayload( );
 80082c4:	f001 fe59 	bl	8009f7a <RFW_ReceivePayload>
        break;
 80082c8:	e065      	b.n	8008396 <RadioIrqProcess+0x3a2>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 80082ca:	4b0d      	ldr	r3, [pc, #52]	; (8008300 <RadioIrqProcess+0x30c>)
 80082cc:	2201      	movs	r2, #1
 80082ce:	2100      	movs	r1, #0
 80082d0:	2002      	movs	r0, #2
 80082d2:	f003 f9d5 	bl	800b680 <UTIL_ADV_TRACE_COND_FSend>
        break;
 80082d6:	e063      	b.n	80083a0 <RadioIrqProcess+0x3ac>
 80082d8:	20000898 	.word	0x20000898
 80082dc:	200008f0 	.word	0x200008f0
 80082e0:	20000148 	.word	0x20000148
 80082e4:	20000908 	.word	0x20000908
 80082e8:	20000048 	.word	0x20000048
 80082ec:	200008bc 	.word	0x200008bc
 80082f0:	10624dd3 	.word	0x10624dd3
 80082f4:	0800bc74 	.word	0x0800bc74
 80082f8:	0800bc88 	.word	0x0800bc88
 80082fc:	0800bc94 	.word	0x0800bc94
 8008300:	0800bca0 	.word	0x0800bca0
        TimerStop( &RxTimeoutTimer );
 8008304:	4828      	ldr	r0, [pc, #160]	; (80083a8 <RadioIrqProcess+0x3b4>)
 8008306:	f002 ffc3 	bl	800b290 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 800830a:	4b28      	ldr	r3, [pc, #160]	; (80083ac <RadioIrqProcess+0x3b8>)
 800830c:	785b      	ldrb	r3, [r3, #1]
 800830e:	f083 0301 	eor.w	r3, r3, #1
 8008312:	b2db      	uxtb	r3, r3
 8008314:	2b00      	cmp	r3, #0
 8008316:	d002      	beq.n	800831e <RadioIrqProcess+0x32a>
            SUBGRF_SetStandby( STDBY_RC );
 8008318:	2000      	movs	r0, #0
 800831a:	f000 fe0b 	bl	8008f34 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800831e:	4b24      	ldr	r3, [pc, #144]	; (80083b0 <RadioIrqProcess+0x3bc>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d039      	beq.n	800839a <RadioIrqProcess+0x3a6>
 8008326:	4b22      	ldr	r3, [pc, #136]	; (80083b0 <RadioIrqProcess+0x3bc>)
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d034      	beq.n	800839a <RadioIrqProcess+0x3a6>
            RadioEvents->RxTimeout( );
 8008330:	4b1f      	ldr	r3, [pc, #124]	; (80083b0 <RadioIrqProcess+0x3bc>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	68db      	ldr	r3, [r3, #12]
 8008336:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8008338:	4b1e      	ldr	r3, [pc, #120]	; (80083b4 <RadioIrqProcess+0x3c0>)
 800833a:	2201      	movs	r2, #1
 800833c:	2100      	movs	r1, #0
 800833e:	2002      	movs	r0, #2
 8008340:	f003 f99e 	bl	800b680 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8008344:	e029      	b.n	800839a <RadioIrqProcess+0x3a6>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8008346:	4b1c      	ldr	r3, [pc, #112]	; (80083b8 <RadioIrqProcess+0x3c4>)
 8008348:	2201      	movs	r2, #1
 800834a:	2100      	movs	r1, #0
 800834c:	2002      	movs	r0, #2
 800834e:	f003 f997 	bl	800b680 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8008352:	4b16      	ldr	r3, [pc, #88]	; (80083ac <RadioIrqProcess+0x3b8>)
 8008354:	785b      	ldrb	r3, [r3, #1]
 8008356:	f083 0301 	eor.w	r3, r3, #1
 800835a:	b2db      	uxtb	r3, r3
 800835c:	2b00      	cmp	r3, #0
 800835e:	d002      	beq.n	8008366 <RadioIrqProcess+0x372>
            SUBGRF_SetStandby( STDBY_RC );
 8008360:	2000      	movs	r0, #0
 8008362:	f000 fde7 	bl	8008f34 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8008366:	4b12      	ldr	r3, [pc, #72]	; (80083b0 <RadioIrqProcess+0x3bc>)
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d017      	beq.n	800839e <RadioIrqProcess+0x3aa>
 800836e:	4b10      	ldr	r3, [pc, #64]	; (80083b0 <RadioIrqProcess+0x3bc>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	691b      	ldr	r3, [r3, #16]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d012      	beq.n	800839e <RadioIrqProcess+0x3aa>
            RadioEvents->RxError( );
 8008378:	4b0d      	ldr	r3, [pc, #52]	; (80083b0 <RadioIrqProcess+0x3bc>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	691b      	ldr	r3, [r3, #16]
 800837e:	4798      	blx	r3
        break;
 8008380:	e00d      	b.n	800839e <RadioIrqProcess+0x3aa>
        break;
 8008382:	bf00      	nop
 8008384:	e00c      	b.n	80083a0 <RadioIrqProcess+0x3ac>
        break;
 8008386:	bf00      	nop
 8008388:	e00a      	b.n	80083a0 <RadioIrqProcess+0x3ac>
        break;
 800838a:	bf00      	nop
 800838c:	e008      	b.n	80083a0 <RadioIrqProcess+0x3ac>
        break;
 800838e:	bf00      	nop
 8008390:	e006      	b.n	80083a0 <RadioIrqProcess+0x3ac>
        break;
 8008392:	bf00      	nop
 8008394:	e004      	b.n	80083a0 <RadioIrqProcess+0x3ac>
        break;
 8008396:	bf00      	nop
 8008398:	e002      	b.n	80083a0 <RadioIrqProcess+0x3ac>
        break;
 800839a:	bf00      	nop
 800839c:	e000      	b.n	80083a0 <RadioIrqProcess+0x3ac>
        break;
 800839e:	bf00      	nop
  }
}
 80083a0:	bf00      	nop
 80083a2:	370c      	adds	r7, #12
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd90      	pop	{r4, r7, pc}
 80083a8:	20000908 	.word	0x20000908
 80083ac:	20000898 	.word	0x20000898
 80083b0:	20000148 	.word	0x20000148
 80083b4:	0800bcac 	.word	0x0800bcac
 80083b8:	0800bcb8 	.word	0x0800bcb8

080083bc <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80083c0:	4b09      	ldr	r3, [pc, #36]	; (80083e8 <RadioTxPrbs+0x2c>)
 80083c2:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80083c6:	2101      	movs	r1, #1
 80083c8:	4618      	mov	r0, r3
 80083ca:	f001 fbb5 	bl	8009b38 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_PKTCTL1A, 0x2d );  // sel mode prbs9 instead of preamble
 80083ce:	4b07      	ldr	r3, [pc, #28]	; (80083ec <RadioTxPrbs+0x30>)
 80083d0:	212d      	movs	r1, #45	; 0x2d
 80083d2:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80083d6:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 80083d8:	f000 fe6f 	bl	80090ba <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80083dc:	4804      	ldr	r0, [pc, #16]	; (80083f0 <RadioTxPrbs+0x34>)
 80083de:	f000 fdc5 	bl	8008f6c <SUBGRF_SetTx>
}
 80083e2:	bf00      	nop
 80083e4:	bd80      	pop	{r7, pc}
 80083e6:	bf00      	nop
 80083e8:	20000898 	.word	0x20000898
 80083ec:	08007e03 	.word	0x08007e03
 80083f0:	000fffff 	.word	0x000fffff

080083f4 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	4603      	mov	r3, r0
 80083fc:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 80083fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008402:	4618      	mov	r0, r3
 8008404:	f001 fbc0 	bl	8009b88 <SUBGRF_SetRfTxPower>
 8008408:	4603      	mov	r3, r0
 800840a:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 800840c:	7bfb      	ldrb	r3, [r7, #15]
 800840e:	2101      	movs	r1, #1
 8008410:	4618      	mov	r0, r3
 8008412:	f001 fb91 	bl	8009b38 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8008416:	f000 fe47 	bl	80090a8 <SUBGRF_SetTxContinuousWave>
}
 800841a:	bf00      	nop
 800841c:	3710      	adds	r7, #16
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <payload_integration>:

static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8008422:	b480      	push	{r7}
 8008424:	b089      	sub	sp, #36	; 0x24
 8008426:	af00      	add	r7, sp, #0
 8008428:	60f8      	str	r0, [r7, #12]
 800842a:	60b9      	str	r1, [r7, #8]
 800842c:	4613      	mov	r3, r2
 800842e:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 8008430:	2300      	movs	r3, #0
 8008432:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int i = 0;
 8008434:	2300      	movs	r3, #0
 8008436:	61bb      	str	r3, [r7, #24]

    for (i = 0; i < size; i++)
 8008438:	2300      	movs	r3, #0
 800843a:	61bb      	str	r3, [r7, #24]
 800843c:	e011      	b.n	8008462 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 800843e:	69bb      	ldr	r3, [r7, #24]
 8008440:	68ba      	ldr	r2, [r7, #8]
 8008442:	4413      	add	r3, r2
 8008444:	781a      	ldrb	r2, [r3, #0]
 8008446:	69bb      	ldr	r3, [r7, #24]
 8008448:	68b9      	ldr	r1, [r7, #8]
 800844a:	440b      	add	r3, r1
 800844c:	43d2      	mvns	r2, r2
 800844e:	b2d2      	uxtb	r2, r2
 8008450:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 8008452:	69bb      	ldr	r3, [r7, #24]
 8008454:	68fa      	ldr	r2, [r7, #12]
 8008456:	4413      	add	r3, r2
 8008458:	2200      	movs	r2, #0
 800845a:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < size; i++)
 800845c:	69bb      	ldr	r3, [r7, #24]
 800845e:	3301      	adds	r3, #1
 8008460:	61bb      	str	r3, [r7, #24]
 8008462:	79fb      	ldrb	r3, [r7, #7]
 8008464:	69ba      	ldr	r2, [r7, #24]
 8008466:	429a      	cmp	r2, r3
 8008468:	dbe9      	blt.n	800843e <payload_integration+0x1c>
    }

    for (i = 0; i < (size * 8); i++)
 800846a:	2300      	movs	r3, #0
 800846c:	61bb      	str	r3, [r7, #24]
 800846e:	e049      	b.n	8008504 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 8008470:	69bb      	ldr	r3, [r7, #24]
 8008472:	425a      	negs	r2, r3
 8008474:	f003 0307 	and.w	r3, r3, #7
 8008478:	f002 0207 	and.w	r2, r2, #7
 800847c:	bf58      	it	pl
 800847e:	4253      	negpl	r3, r2
 8008480:	b2db      	uxtb	r3, r3
 8008482:	f1c3 0307 	rsb	r3, r3, #7
 8008486:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 8008488:	69bb      	ldr	r3, [r7, #24]
 800848a:	2b00      	cmp	r3, #0
 800848c:	da00      	bge.n	8008490 <payload_integration+0x6e>
 800848e:	3307      	adds	r3, #7
 8008490:	10db      	asrs	r3, r3, #3
 8008492:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8008494:	69bb      	ldr	r3, [r7, #24]
 8008496:	3301      	adds	r3, #1
 8008498:	425a      	negs	r2, r3
 800849a:	f003 0307 	and.w	r3, r3, #7
 800849e:	f002 0207 	and.w	r2, r2, #7
 80084a2:	bf58      	it	pl
 80084a4:	4253      	negpl	r3, r2
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	f1c3 0307 	rsb	r3, r3, #7
 80084ac:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	3301      	adds	r3, #1
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	da00      	bge.n	80084b8 <payload_integration+0x96>
 80084b6:	3307      	adds	r3, #7
 80084b8:	10db      	asrs	r3, r3, #3
 80084ba:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 80084bc:	7dbb      	ldrb	r3, [r7, #22]
 80084be:	68ba      	ldr	r2, [r7, #8]
 80084c0:	4413      	add	r3, r2
 80084c2:	781b      	ldrb	r3, [r3, #0]
 80084c4:	461a      	mov	r2, r3
 80084c6:	7dfb      	ldrb	r3, [r7, #23]
 80084c8:	fa42 f303 	asr.w	r3, r2, r3
 80084cc:	b2db      	uxtb	r3, r3
 80084ce:	f003 0301 	and.w	r3, r3, #1
 80084d2:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 80084d4:	7ffa      	ldrb	r2, [r7, #31]
 80084d6:	7cfb      	ldrb	r3, [r7, #19]
 80084d8:	4053      	eors	r3, r2
 80084da:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 80084dc:	7d3b      	ldrb	r3, [r7, #20]
 80084de:	68fa      	ldr	r2, [r7, #12]
 80084e0:	4413      	add	r3, r2
 80084e2:	781b      	ldrb	r3, [r3, #0]
 80084e4:	b25a      	sxtb	r2, r3
 80084e6:	7ff9      	ldrb	r1, [r7, #31]
 80084e8:	7d7b      	ldrb	r3, [r7, #21]
 80084ea:	fa01 f303 	lsl.w	r3, r1, r3
 80084ee:	b25b      	sxtb	r3, r3
 80084f0:	4313      	orrs	r3, r2
 80084f2:	b259      	sxtb	r1, r3
 80084f4:	7d3b      	ldrb	r3, [r7, #20]
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	4413      	add	r3, r2
 80084fa:	b2ca      	uxtb	r2, r1
 80084fc:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < (size * 8); i++)
 80084fe:	69bb      	ldr	r3, [r7, #24]
 8008500:	3301      	adds	r3, #1
 8008502:	61bb      	str	r3, [r7, #24]
 8008504:	79fb      	ldrb	r3, [r7, #7]
 8008506:	00db      	lsls	r3, r3, #3
 8008508:	69ba      	ldr	r2, [r7, #24]
 800850a:	429a      	cmp	r2, r3
 800850c:	dbb0      	blt.n	8008470 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 800850e:	7ffb      	ldrb	r3, [r7, #31]
 8008510:	01db      	lsls	r3, r3, #7
 8008512:	b25a      	sxtb	r2, r3
 8008514:	7ffb      	ldrb	r3, [r7, #31]
 8008516:	019b      	lsls	r3, r3, #6
 8008518:	b25b      	sxtb	r3, r3
 800851a:	4313      	orrs	r3, r2
 800851c:	b25b      	sxtb	r3, r3
 800851e:	7ffa      	ldrb	r2, [r7, #31]
 8008520:	2a00      	cmp	r2, #0
 8008522:	d101      	bne.n	8008528 <payload_integration+0x106>
 8008524:	2220      	movs	r2, #32
 8008526:	e000      	b.n	800852a <payload_integration+0x108>
 8008528:	2200      	movs	r2, #0
 800852a:	4313      	orrs	r3, r2
 800852c:	b259      	sxtb	r1, r3
 800852e:	79fb      	ldrb	r3, [r7, #7]
 8008530:	68fa      	ldr	r2, [r7, #12]
 8008532:	4413      	add	r3, r2
 8008534:	b2ca      	uxtb	r2, r1
 8008536:	701a      	strb	r2, [r3, #0]
}
 8008538:	bf00      	nop
 800853a:	3724      	adds	r7, #36	; 0x24
 800853c:	46bd      	mov	sp, r7
 800853e:	bc80      	pop	{r7}
 8008540:	4770      	bx	lr
	...

08008544 <RadioSetRxGenericConfig>:

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b08c      	sub	sp, #48	; 0x30
 8008548:	af00      	add	r7, sp, #0
 800854a:	60b9      	str	r1, [r7, #8]
 800854c:	607a      	str	r2, [r7, #4]
 800854e:	603b      	str	r3, [r7, #0]
 8008550:	4603      	mov	r3, r0
 8008552:	73fb      	strb	r3, [r7, #15]
    int32_t status = 0;
 8008554:	2300      	movs	r3, #0
 8008556:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t syncword[8] = {0};
 8008558:	2300      	movs	r3, #0
 800855a:	61fb      	str	r3, [r7, #28]
 800855c:	2300      	movs	r3, #0
 800855e:	623b      	str	r3, [r7, #32]
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8008560:	f001 fccf 	bl	8009f02 <RFW_DeInit>

    if( rxContinuous != 0 )
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d001      	beq.n	800856e <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 800856a:	2300      	movs	r3, #0
 800856c:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2b00      	cmp	r3, #0
 8008572:	bf14      	ite	ne
 8008574:	2301      	movne	r3, #1
 8008576:	2300      	moveq	r3, #0
 8008578:	b2da      	uxtb	r2, r3
 800857a:	4ba9      	ldr	r3, [pc, #676]	; (8008820 <RadioSetRxGenericConfig+0x2dc>)
 800857c:	705a      	strb	r2, [r3, #1]

    switch( modem )
 800857e:	7bfb      	ldrb	r3, [r7, #15]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d003      	beq.n	800858c <RadioSetRxGenericConfig+0x48>
 8008584:	2b01      	cmp	r3, #1
 8008586:	f000 80e8 	beq.w	800875a <RadioSetRxGenericConfig+0x216>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 800858a:	e1a0      	b.n	80088ce <RadioSetRxGenericConfig+0x38a>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d003      	beq.n	800859c <RadioSetRxGenericConfig+0x58>
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	691b      	ldr	r3, [r3, #16]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d102      	bne.n	80085a2 <RadioSetRxGenericConfig+0x5e>
            return -1;
 800859c:	f04f 33ff 	mov.w	r3, #4294967295
 80085a0:	e196      	b.n	80088d0 <RadioSetRxGenericConfig+0x38c>
        if( config->fsk.SyncWordLength > 8 )
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	7d5b      	ldrb	r3, [r3, #21]
 80085a6:	2b08      	cmp	r3, #8
 80085a8:	d902      	bls.n	80085b0 <RadioSetRxGenericConfig+0x6c>
            return -1;
 80085aa:	f04f 33ff 	mov.w	r3, #4294967295
 80085ae:	e18f      	b.n	80088d0 <RadioSetRxGenericConfig+0x38c>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 80085b0:	2300      	movs	r3, #0
 80085b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80085b4:	e00d      	b.n	80085d2 <RadioSetRxGenericConfig+0x8e>
                syncword[i] = config->fsk.SyncWord[i];
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	699a      	ldr	r2, [r3, #24]
 80085ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085bc:	4413      	add	r3, r2
 80085be:	7819      	ldrb	r1, [r3, #0]
 80085c0:	f107 021c 	add.w	r2, r7, #28
 80085c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085c6:	4413      	add	r3, r2
 80085c8:	460a      	mov	r2, r1
 80085ca:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 80085cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ce:	3301      	adds	r3, #1
 80085d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	7d5b      	ldrb	r3, [r3, #21]
 80085d6:	461a      	mov	r2, r3
 80085d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085da:	4293      	cmp	r3, r2
 80085dc:	dbeb      	blt.n	80085b6 <RadioSetRxGenericConfig+0x72>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	bf14      	ite	ne
 80085e6:	2301      	movne	r3, #1
 80085e8:	2300      	moveq	r3, #0
 80085ea:	b2db      	uxtb	r3, r3
 80085ec:	4618      	mov	r0, r3
 80085ee:	f000 fd6d 	bl	80090cc <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80085f2:	4b8b      	ldr	r3, [pc, #556]	; (8008820 <RadioSetRxGenericConfig+0x2dc>)
 80085f4:	2200      	movs	r2, #0
 80085f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	68db      	ldr	r3, [r3, #12]
 80085fe:	4a88      	ldr	r2, [pc, #544]	; (8008820 <RadioSetRxGenericConfig+0x2dc>)
 8008600:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	791a      	ldrb	r2, [r3, #4]
 8008606:	4b86      	ldr	r3, [pc, #536]	; (8008820 <RadioSetRxGenericConfig+0x2dc>)
 8008608:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	689b      	ldr	r3, [r3, #8]
 8008610:	4618      	mov	r0, r3
 8008612:	f001 fba7 	bl	8009d64 <SUBGRF_GetFskBandwidthRegValue>
 8008616:	4603      	mov	r3, r0
 8008618:	461a      	mov	r2, r3
 800861a:	4b81      	ldr	r3, [pc, #516]	; (8008820 <RadioSetRxGenericConfig+0x2dc>)
 800861c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8008620:	4b7f      	ldr	r3, [pc, #508]	; (8008820 <RadioSetRxGenericConfig+0x2dc>)
 8008622:	2200      	movs	r2, #0
 8008624:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	691b      	ldr	r3, [r3, #16]
 800862a:	b29b      	uxth	r3, r3
 800862c:	00db      	lsls	r3, r3, #3
 800862e:	b29a      	uxth	r2, r3
 8008630:	4b7b      	ldr	r3, [pc, #492]	; (8008820 <RadioSetRxGenericConfig+0x2dc>)
 8008632:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	7d1a      	ldrb	r2, [r3, #20]
 8008638:	4b79      	ldr	r3, [pc, #484]	; (8008820 <RadioSetRxGenericConfig+0x2dc>)
 800863a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	7d5b      	ldrb	r3, [r3, #21]
 8008640:	00db      	lsls	r3, r3, #3
 8008642:	b2da      	uxtb	r2, r3
 8008644:	4b76      	ldr	r3, [pc, #472]	; (8008820 <RadioSetRxGenericConfig+0x2dc>)
 8008646:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800864e:	4b74      	ldr	r3, [pc, #464]	; (8008820 <RadioSetRxGenericConfig+0x2dc>)
 8008650:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8008652:	68bb      	ldr	r3, [r7, #8]
 8008654:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008658:	2b00      	cmp	r3, #0
 800865a:	d105      	bne.n	8008668 <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	69db      	ldr	r3, [r3, #28]
 8008660:	b2da      	uxtb	r2, r3
 8008662:	4b6f      	ldr	r3, [pc, #444]	; (8008820 <RadioSetRxGenericConfig+0x2dc>)
 8008664:	759a      	strb	r2, [r3, #22]
 8008666:	e00b      	b.n	8008680 <RadioSetRxGenericConfig+0x13c>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800866e:	2b02      	cmp	r3, #2
 8008670:	d103      	bne.n	800867a <RadioSetRxGenericConfig+0x136>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8008672:	4b6b      	ldr	r3, [pc, #428]	; (8008820 <RadioSetRxGenericConfig+0x2dc>)
 8008674:	22ff      	movs	r2, #255	; 0xff
 8008676:	759a      	strb	r2, [r3, #22]
 8008678:	e002      	b.n	8008680 <RadioSetRxGenericConfig+0x13c>
          SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 800867a:	4b69      	ldr	r3, [pc, #420]	; (8008820 <RadioSetRxGenericConfig+0x2dc>)
 800867c:	22ff      	movs	r2, #255	; 0xff
 800867e:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8008686:	2b02      	cmp	r3, #2
 8008688:	d004      	beq.n	8008694 <RadioSetRxGenericConfig+0x150>
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008690:	2b02      	cmp	r3, #2
 8008692:	d12d      	bne.n	80086f0 <RadioSetRxGenericConfig+0x1ac>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800869a:	2bf1      	cmp	r3, #241	; 0xf1
 800869c:	d00c      	beq.n	80086b8 <RadioSetRxGenericConfig+0x174>
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80086a4:	2bf2      	cmp	r3, #242	; 0xf2
 80086a6:	d007      	beq.n	80086b8 <RadioSetRxGenericConfig+0x174>
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80086ae:	2b01      	cmp	r3, #1
 80086b0:	d002      	beq.n	80086b8 <RadioSetRxGenericConfig+0x174>
            return -1;
 80086b2:	f04f 33ff 	mov.w	r3, #4294967295
 80086b6:	e10b      	b.n	80088d0 <RadioSetRxGenericConfig+0x38c>
          ConfigGeneric.rtx = CONFIG_RX;
 80086b8:	2300      	movs	r3, #0
 80086ba:	763b      	strb	r3, [r7, #24]
          ConfigGeneric.RxConfig = config;
 80086bc:	68bb      	ldr	r3, [r7, #8]
 80086be:	617b      	str	r3, [r7, #20]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 80086c0:	4b58      	ldr	r3, [pc, #352]	; (8008824 <RadioSetRxGenericConfig+0x2e0>)
 80086c2:	6819      	ldr	r1, [r3, #0]
 80086c4:	f107 0310 	add.w	r3, r7, #16
 80086c8:	4a57      	ldr	r2, [pc, #348]	; (8008828 <RadioSetRxGenericConfig+0x2e4>)
 80086ca:	4618      	mov	r0, r3
 80086cc:	f001 fc0c 	bl	8009ee8 <RFW_Init>
 80086d0:	4603      	mov	r3, r0
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d002      	beq.n	80086dc <RadioSetRxGenericConfig+0x198>
            return -1;
 80086d6:	f04f 33ff 	mov.w	r3, #4294967295
 80086da:	e0f9      	b.n	80088d0 <RadioSetRxGenericConfig+0x38c>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80086dc:	4b50      	ldr	r3, [pc, #320]	; (8008820 <RadioSetRxGenericConfig+0x2dc>)
 80086de:	2200      	movs	r2, #0
 80086e0:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80086e2:	4b4f      	ldr	r3, [pc, #316]	; (8008820 <RadioSetRxGenericConfig+0x2dc>)
 80086e4:	2201      	movs	r2, #1
 80086e6:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80086e8:	4b4d      	ldr	r3, [pc, #308]	; (8008820 <RadioSetRxGenericConfig+0x2dc>)
 80086ea:	2200      	movs	r2, #0
 80086ec:	755a      	strb	r2, [r3, #21]
        {
 80086ee:	e00e      	b.n	800870e <RadioSetRxGenericConfig+0x1ca>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 80086f6:	4b4a      	ldr	r3, [pc, #296]	; (8008820 <RadioSetRxGenericConfig+0x2dc>)
 80086f8:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80086fa:	68bb      	ldr	r3, [r7, #8]
 80086fc:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8008700:	4b47      	ldr	r3, [pc, #284]	; (8008820 <RadioSetRxGenericConfig+0x2dc>)
 8008702:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 800870a:	4b45      	ldr	r3, [pc, #276]	; (8008820 <RadioSetRxGenericConfig+0x2dc>)
 800870c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800870e:	f7ff fa92 	bl	8007c36 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8008712:	2000      	movs	r0, #0
 8008714:	f7fe fc24 	bl	8006f60 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008718:	4844      	ldr	r0, [pc, #272]	; (800882c <RadioSetRxGenericConfig+0x2e8>)
 800871a:	f000 ff05 	bl	8009528 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800871e:	4844      	ldr	r0, [pc, #272]	; (8008830 <RadioSetRxGenericConfig+0x2ec>)
 8008720:	f000 ffce 	bl	80096c0 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008724:	f107 031c 	add.w	r3, r7, #28
 8008728:	4618      	mov	r0, r3
 800872a:	f000 fb08 	bl	8008d3e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	8c1b      	ldrh	r3, [r3, #32]
 8008732:	4618      	mov	r0, r3
 8008734:	f000 fb52 	bl	8008ddc <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800873c:	4618      	mov	r0, r3
 800873e:	f000 fb2d 	bl	8008d9c <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8008748:	fb02 f203 	mul.w	r2, r2, r3
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	68db      	ldr	r3, [r3, #12]
 8008750:	fbb2 f3f3 	udiv	r3, r2, r3
 8008754:	4a32      	ldr	r2, [pc, #200]	; (8008820 <RadioSetRxGenericConfig+0x2dc>)
 8008756:	6093      	str	r3, [r2, #8]
        break;
 8008758:	e0b9      	b.n	80088ce <RadioSetRxGenericConfig+0x38a>
        if( config->lora.PreambleLen == 0 )
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800875e:	2b00      	cmp	r3, #0
 8008760:	d102      	bne.n	8008768 <RadioSetRxGenericConfig+0x224>
            return -1;
 8008762:	f04f 33ff 	mov.w	r3, #4294967295
 8008766:	e0b3      	b.n	80088d0 <RadioSetRxGenericConfig+0x38c>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800876e:	2b01      	cmp	r3, #1
 8008770:	d104      	bne.n	800877c <RadioSetRxGenericConfig+0x238>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8008772:	68bb      	ldr	r3, [r7, #8]
 8008774:	69db      	ldr	r3, [r3, #28]
 8008776:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800877a:	e002      	b.n	8008782 <RadioSetRxGenericConfig+0x23e>
            MaxPayloadLength = 0xFF;
 800877c:	23ff      	movs	r3, #255	; 0xff
 800877e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008786:	2b00      	cmp	r3, #0
 8008788:	bf14      	ite	ne
 800878a:	2301      	movne	r3, #1
 800878c:	2300      	moveq	r3, #0
 800878e:	b2db      	uxtb	r3, r3
 8008790:	4618      	mov	r0, r3
 8008792:	f000 fc9b 	bl	80090cc <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	b2db      	uxtb	r3, r3
 800879a:	4618      	mov	r0, r3
 800879c:	f000 fca5 	bl	80090ea <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80087a0:	4b1f      	ldr	r3, [pc, #124]	; (8008820 <RadioSetRxGenericConfig+0x2dc>)
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80087ae:	4b1c      	ldr	r3, [pc, #112]	; (8008820 <RadioSetRxGenericConfig+0x2dc>)
 80087b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80087b4:	68bb      	ldr	r3, [r7, #8]
 80087b6:	f893 2031 	ldrb.w	r2, [r3, #49]	; 0x31
 80087ba:	4b19      	ldr	r3, [pc, #100]	; (8008820 <RadioSetRxGenericConfig+0x2dc>)
 80087bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 80087c6:	4b16      	ldr	r3, [pc, #88]	; (8008820 <RadioSetRxGenericConfig+0x2dc>)
 80087c8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80087d2:	2b02      	cmp	r3, #2
 80087d4:	d010      	beq.n	80087f8 <RadioSetRxGenericConfig+0x2b4>
 80087d6:	2b02      	cmp	r3, #2
 80087d8:	dc2c      	bgt.n	8008834 <RadioSetRxGenericConfig+0x2f0>
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d002      	beq.n	80087e4 <RadioSetRxGenericConfig+0x2a0>
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d005      	beq.n	80087ee <RadioSetRxGenericConfig+0x2aa>
            break;
 80087e2:	e027      	b.n	8008834 <RadioSetRxGenericConfig+0x2f0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80087e4:	4b0e      	ldr	r3, [pc, #56]	; (8008820 <RadioSetRxGenericConfig+0x2dc>)
 80087e6:	2200      	movs	r2, #0
 80087e8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80087ec:	e023      	b.n	8008836 <RadioSetRxGenericConfig+0x2f2>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80087ee:	4b0c      	ldr	r3, [pc, #48]	; (8008820 <RadioSetRxGenericConfig+0x2dc>)
 80087f0:	2201      	movs	r2, #1
 80087f2:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 80087f6:	e01e      	b.n	8008836 <RadioSetRxGenericConfig+0x2f2>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80087fe:	2b0b      	cmp	r3, #11
 8008800:	d004      	beq.n	800880c <RadioSetRxGenericConfig+0x2c8>
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008808:	2b0c      	cmp	r3, #12
 800880a:	d104      	bne.n	8008816 <RadioSetRxGenericConfig+0x2d2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 800880c:	4b04      	ldr	r3, [pc, #16]	; (8008820 <RadioSetRxGenericConfig+0x2dc>)
 800880e:	2201      	movs	r2, #1
 8008810:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008814:	e00f      	b.n	8008836 <RadioSetRxGenericConfig+0x2f2>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008816:	4b02      	ldr	r3, [pc, #8]	; (8008820 <RadioSetRxGenericConfig+0x2dc>)
 8008818:	2200      	movs	r2, #0
 800881a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 800881e:	e00a      	b.n	8008836 <RadioSetRxGenericConfig+0x2f2>
 8008820:	20000898 	.word	0x20000898
 8008824:	20000148 	.word	0x20000148
 8008828:	20000908 	.word	0x20000908
 800882c:	200008d0 	.word	0x200008d0
 8008830:	200008a6 	.word	0x200008a6
            break;
 8008834:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008836:	4b28      	ldr	r3, [pc, #160]	; (80088d8 <RadioSetRxGenericConfig+0x394>)
 8008838:	2201      	movs	r2, #1
 800883a:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8008840:	4b25      	ldr	r3, [pc, #148]	; (80088d8 <RadioSetRxGenericConfig+0x394>)
 8008842:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	f893 2036 	ldrb.w	r2, [r3, #54]	; 0x36
 800884a:	4b23      	ldr	r3, [pc, #140]	; (80088d8 <RadioSetRxGenericConfig+0x394>)
 800884c:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 800884e:	4a22      	ldr	r2, [pc, #136]	; (80088d8 <RadioSetRxGenericConfig+0x394>)
 8008850:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008854:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800885c:	4b1e      	ldr	r3, [pc, #120]	; (80088d8 <RadioSetRxGenericConfig+0x394>)
 800885e:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8008868:	4b1b      	ldr	r3, [pc, #108]	; (80088d8 <RadioSetRxGenericConfig+0x394>)
 800886a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 800886e:	f7ff f9e2 	bl	8007c36 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8008872:	2001      	movs	r0, #1
 8008874:	f7fe fb74 	bl	8006f60 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008878:	4818      	ldr	r0, [pc, #96]	; (80088dc <RadioSetRxGenericConfig+0x398>)
 800887a:	f000 fe55 	bl	8009528 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800887e:	4818      	ldr	r0, [pc, #96]	; (80088e0 <RadioSetRxGenericConfig+0x39c>)
 8008880:	f000 ff1e 	bl	80096c0 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8008884:	4b14      	ldr	r3, [pc, #80]	; (80088d8 <RadioSetRxGenericConfig+0x394>)
 8008886:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800888a:	2b01      	cmp	r3, #1
 800888c:	d10d      	bne.n	80088aa <RadioSetRxGenericConfig+0x366>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) & ~( 1 << 2 ) );
 800888e:	f240 7036 	movw	r0, #1846	; 0x736
 8008892:	f001 f871 	bl	8009978 <SUBGRF_ReadRegister>
 8008896:	4603      	mov	r3, r0
 8008898:	f023 0304 	bic.w	r3, r3, #4
 800889c:	b2db      	uxtb	r3, r3
 800889e:	4619      	mov	r1, r3
 80088a0:	f240 7036 	movw	r0, #1846	; 0x736
 80088a4:	f001 f854 	bl	8009950 <SUBGRF_WriteRegister>
 80088a8:	e00c      	b.n	80088c4 <RadioSetRxGenericConfig+0x380>
            SUBGRF_WriteRegister( 0x0736, SUBGRF_ReadRegister( 0x0736 ) | ( 1 << 2 ) );
 80088aa:	f240 7036 	movw	r0, #1846	; 0x736
 80088ae:	f001 f863 	bl	8009978 <SUBGRF_ReadRegister>
 80088b2:	4603      	mov	r3, r0
 80088b4:	f043 0304 	orr.w	r3, r3, #4
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	4619      	mov	r1, r3
 80088bc:	f240 7036 	movw	r0, #1846	; 0x736
 80088c0:	f001 f846 	bl	8009950 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 80088c4:	4b04      	ldr	r3, [pc, #16]	; (80088d8 <RadioSetRxGenericConfig+0x394>)
 80088c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80088ca:	609a      	str	r2, [r3, #8]
        break;
 80088cc:	bf00      	nop
    }
    return status;
 80088ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3730      	adds	r7, #48	; 0x30
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	20000898 	.word	0x20000898
 80088dc:	200008d0 	.word	0x200008d0
 80088e0:	200008a6 	.word	0x200008a6

080088e4 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b08a      	sub	sp, #40	; 0x28
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	60b9      	str	r1, [r7, #8]
 80088ec:	607b      	str	r3, [r7, #4]
 80088ee:	4603      	mov	r3, r0
 80088f0:	73fb      	strb	r3, [r7, #15]
 80088f2:	4613      	mov	r3, r2
 80088f4:	73bb      	strb	r3, [r7, #14]
    uint8_t syncword[8] = {0};
 80088f6:	2300      	movs	r3, #0
 80088f8:	61fb      	str	r3, [r7, #28]
 80088fa:	2300      	movs	r3, #0
 80088fc:	623b      	str	r3, [r7, #32]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80088fe:	f001 fb00 	bl	8009f02 <RFW_DeInit>
    switch( modem )
 8008902:	7bfb      	ldrb	r3, [r7, #15]
 8008904:	2b02      	cmp	r3, #2
 8008906:	f000 8144 	beq.w	8008b92 <RadioSetTxGenericConfig+0x2ae>
 800890a:	2b02      	cmp	r3, #2
 800890c:	f300 8160 	bgt.w	8008bd0 <RadioSetTxGenericConfig+0x2ec>
 8008910:	2b00      	cmp	r3, #0
 8008912:	d003      	beq.n	800891c <RadioSetTxGenericConfig+0x38>
 8008914:	2b01      	cmp	r3, #1
 8008916:	f000 80b7 	beq.w	8008a88 <RadioSetTxGenericConfig+0x1a4>
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
        break;
    default:
        break;
 800891a:	e159      	b.n	8008bd0 <RadioSetTxGenericConfig+0x2ec>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 800891c:	68bb      	ldr	r3, [r7, #8]
 800891e:	689b      	ldr	r3, [r3, #8]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d003      	beq.n	800892c <RadioSetTxGenericConfig+0x48>
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	691b      	ldr	r3, [r3, #16]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d102      	bne.n	8008932 <RadioSetTxGenericConfig+0x4e>
            return -1;
 800892c:	f04f 33ff 	mov.w	r3, #4294967295
 8008930:	e163      	b.n	8008bfa <RadioSetTxGenericConfig+0x316>
        if( config->fsk.SyncWordLength > 8 )
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	7d1b      	ldrb	r3, [r3, #20]
 8008936:	2b08      	cmp	r3, #8
 8008938:	d902      	bls.n	8008940 <RadioSetTxGenericConfig+0x5c>
            return -1;
 800893a:	f04f 33ff 	mov.w	r3, #4294967295
 800893e:	e15c      	b.n	8008bfa <RadioSetTxGenericConfig+0x316>
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 8008940:	2300      	movs	r3, #0
 8008942:	627b      	str	r3, [r7, #36]	; 0x24
 8008944:	e00d      	b.n	8008962 <RadioSetTxGenericConfig+0x7e>
                syncword[i] = config->fsk.SyncWord[i];
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	699a      	ldr	r2, [r3, #24]
 800894a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800894c:	4413      	add	r3, r2
 800894e:	7819      	ldrb	r1, [r3, #0]
 8008950:	f107 021c 	add.w	r2, r7, #28
 8008954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008956:	4413      	add	r3, r2
 8008958:	460a      	mov	r2, r1
 800895a:	701a      	strb	r2, [r3, #0]
            for(int i = 0; i < config->fsk.SyncWordLength; i++)
 800895c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895e:	3301      	adds	r3, #1
 8008960:	627b      	str	r3, [r7, #36]	; 0x24
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	7d1b      	ldrb	r3, [r3, #20]
 8008966:	461a      	mov	r2, r3
 8008968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800896a:	4293      	cmp	r3, r2
 800896c:	dbeb      	blt.n	8008946 <RadioSetTxGenericConfig+0x62>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 800896e:	4ba5      	ldr	r3, [pc, #660]	; (8008c04 <RadioSetTxGenericConfig+0x320>)
 8008970:	2200      	movs	r2, #0
 8008972:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	4aa2      	ldr	r2, [pc, #648]	; (8008c04 <RadioSetTxGenericConfig+0x320>)
 800897c:	63d3      	str	r3, [r2, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	781a      	ldrb	r2, [r3, #0]
 8008982:	4ba0      	ldr	r3, [pc, #640]	; (8008c04 <RadioSetTxGenericConfig+0x320>)
 8008984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	685b      	ldr	r3, [r3, #4]
 800898c:	4618      	mov	r0, r3
 800898e:	f001 f9e9 	bl	8009d64 <SUBGRF_GetFskBandwidthRegValue>
 8008992:	4603      	mov	r3, r0
 8008994:	461a      	mov	r2, r3
 8008996:	4b9b      	ldr	r3, [pc, #620]	; (8008c04 <RadioSetTxGenericConfig+0x320>)
 8008998:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	4a98      	ldr	r2, [pc, #608]	; (8008c04 <RadioSetTxGenericConfig+0x320>)
 80089a2:	6413      	str	r3, [r2, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80089a4:	4b97      	ldr	r3, [pc, #604]	; (8008c04 <RadioSetTxGenericConfig+0x320>)
 80089a6:	2200      	movs	r2, #0
 80089a8:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	691b      	ldr	r3, [r3, #16]
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	00db      	lsls	r3, r3, #3
 80089b2:	b29a      	uxth	r2, r3
 80089b4:	4b93      	ldr	r3, [pc, #588]	; (8008c04 <RadioSetTxGenericConfig+0x320>)
 80089b6:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 80089b8:	4b92      	ldr	r3, [pc, #584]	; (8008c04 <RadioSetTxGenericConfig+0x320>)
 80089ba:	2204      	movs	r2, #4
 80089bc:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	7d1b      	ldrb	r3, [r3, #20]
 80089c2:	00db      	lsls	r3, r3, #3
 80089c4:	b2da      	uxtb	r2, r3
 80089c6:	4b8f      	ldr	r3, [pc, #572]	; (8008c04 <RadioSetTxGenericConfig+0x320>)
 80089c8:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 80089ca:	4b8e      	ldr	r3, [pc, #568]	; (8008c04 <RadioSetTxGenericConfig+0x320>)
 80089cc:	2200      	movs	r2, #0
 80089ce:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80089d6:	2b02      	cmp	r3, #2
 80089d8:	d003      	beq.n	80089e2 <RadioSetTxGenericConfig+0xfe>
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	7f9b      	ldrb	r3, [r3, #30]
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d12a      	bne.n	8008a38 <RadioSetTxGenericConfig+0x154>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	7fdb      	ldrb	r3, [r3, #31]
 80089e6:	2bf1      	cmp	r3, #241	; 0xf1
 80089e8:	d00a      	beq.n	8008a00 <RadioSetTxGenericConfig+0x11c>
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	7fdb      	ldrb	r3, [r3, #31]
 80089ee:	2bf2      	cmp	r3, #242	; 0xf2
 80089f0:	d006      	beq.n	8008a00 <RadioSetTxGenericConfig+0x11c>
 80089f2:	68bb      	ldr	r3, [r7, #8]
 80089f4:	7fdb      	ldrb	r3, [r3, #31]
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d002      	beq.n	8008a00 <RadioSetTxGenericConfig+0x11c>
                return -1;
 80089fa:	f04f 33ff 	mov.w	r3, #4294967295
 80089fe:	e0fc      	b.n	8008bfa <RadioSetTxGenericConfig+0x316>
            ConfigGeneric.rtx = CONFIG_TX;
 8008a00:	2301      	movs	r3, #1
 8008a02:	763b      	strb	r3, [r7, #24]
            ConfigGeneric.TxConfig = config;
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	613b      	str	r3, [r7, #16]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8008a08:	4b7f      	ldr	r3, [pc, #508]	; (8008c08 <RadioSetTxGenericConfig+0x324>)
 8008a0a:	6819      	ldr	r1, [r3, #0]
 8008a0c:	f107 0310 	add.w	r3, r7, #16
 8008a10:	4a7e      	ldr	r2, [pc, #504]	; (8008c0c <RadioSetTxGenericConfig+0x328>)
 8008a12:	4618      	mov	r0, r3
 8008a14:	f001 fa68 	bl	8009ee8 <RFW_Init>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d002      	beq.n	8008a24 <RadioSetTxGenericConfig+0x140>
              return -1;
 8008a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a22:	e0ea      	b.n	8008bfa <RadioSetTxGenericConfig+0x316>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8008a24:	4b77      	ldr	r3, [pc, #476]	; (8008c04 <RadioSetTxGenericConfig+0x320>)
 8008a26:	2200      	movs	r2, #0
 8008a28:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 8008a2a:	4b76      	ldr	r3, [pc, #472]	; (8008c04 <RadioSetTxGenericConfig+0x320>)
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8008a30:	4b74      	ldr	r3, [pc, #464]	; (8008c04 <RadioSetTxGenericConfig+0x320>)
 8008a32:	2200      	movs	r2, #0
 8008a34:	755a      	strb	r2, [r3, #21]
        {
 8008a36:	e00c      	b.n	8008a52 <RadioSetTxGenericConfig+0x16e>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	7fda      	ldrb	r2, [r3, #31]
 8008a3c:	4b71      	ldr	r3, [pc, #452]	; (8008c04 <RadioSetTxGenericConfig+0x320>)
 8008a3e:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8008a46:	4b6f      	ldr	r3, [pc, #444]	; (8008c04 <RadioSetTxGenericConfig+0x320>)
 8008a48:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	7f9a      	ldrb	r2, [r3, #30]
 8008a4e:	4b6d      	ldr	r3, [pc, #436]	; (8008c04 <RadioSetTxGenericConfig+0x320>)
 8008a50:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8008a52:	f7ff f8f0 	bl	8007c36 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8008a56:	2000      	movs	r0, #0
 8008a58:	f7fe fa82 	bl	8006f60 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008a5c:	486c      	ldr	r0, [pc, #432]	; (8008c10 <RadioSetTxGenericConfig+0x32c>)
 8008a5e:	f000 fd63 	bl	8009528 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008a62:	486c      	ldr	r0, [pc, #432]	; (8008c14 <RadioSetTxGenericConfig+0x330>)
 8008a64:	f000 fe2c 	bl	80096c0 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8008a68:	f107 031c 	add.w	r3, r7, #28
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f000 f966 	bl	8008d3e <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	8b9b      	ldrh	r3, [r3, #28]
 8008a76:	4618      	mov	r0, r3
 8008a78:	f000 f9b0 	bl	8008ddc <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	8c1b      	ldrh	r3, [r3, #32]
 8008a80:	4618      	mov	r0, r3
 8008a82:	f000 f98b 	bl	8008d9c <SUBGRF_SetCrcPolynomial>
        break;
 8008a86:	e0a4      	b.n	8008bd2 <RadioSetTxGenericConfig+0x2ee>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8008a88:	4b5e      	ldr	r3, [pc, #376]	; (8008c04 <RadioSetTxGenericConfig+0x320>)
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8008a96:	4b5b      	ldr	r3, [pc, #364]	; (8008c04 <RadioSetTxGenericConfig+0x320>)
 8008a98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8008aa2:	4b58      	ldr	r3, [pc, #352]	; (8008c04 <RadioSetTxGenericConfig+0x320>)
 8008aa4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8008aae:	4b55      	ldr	r3, [pc, #340]	; (8008c04 <RadioSetTxGenericConfig+0x320>)
 8008ab0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8008aba:	2b02      	cmp	r3, #2
 8008abc:	d010      	beq.n	8008ae0 <RadioSetTxGenericConfig+0x1fc>
 8008abe:	2b02      	cmp	r3, #2
 8008ac0:	dc22      	bgt.n	8008b08 <RadioSetTxGenericConfig+0x224>
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d002      	beq.n	8008acc <RadioSetTxGenericConfig+0x1e8>
 8008ac6:	2b01      	cmp	r3, #1
 8008ac8:	d005      	beq.n	8008ad6 <RadioSetTxGenericConfig+0x1f2>
            break;
 8008aca:	e01d      	b.n	8008b08 <RadioSetTxGenericConfig+0x224>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008acc:	4b4d      	ldr	r3, [pc, #308]	; (8008c04 <RadioSetTxGenericConfig+0x320>)
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008ad4:	e019      	b.n	8008b0a <RadioSetTxGenericConfig+0x226>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008ad6:	4b4b      	ldr	r3, [pc, #300]	; (8008c04 <RadioSetTxGenericConfig+0x320>)
 8008ad8:	2201      	movs	r2, #1
 8008ada:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008ade:	e014      	b.n	8008b0a <RadioSetTxGenericConfig+0x226>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008ae6:	2b0b      	cmp	r3, #11
 8008ae8:	d004      	beq.n	8008af4 <RadioSetTxGenericConfig+0x210>
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008af0:	2b0c      	cmp	r3, #12
 8008af2:	d104      	bne.n	8008afe <RadioSetTxGenericConfig+0x21a>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8008af4:	4b43      	ldr	r3, [pc, #268]	; (8008c04 <RadioSetTxGenericConfig+0x320>)
 8008af6:	2201      	movs	r2, #1
 8008af8:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008afc:	e005      	b.n	8008b0a <RadioSetTxGenericConfig+0x226>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8008afe:	4b41      	ldr	r3, [pc, #260]	; (8008c04 <RadioSetTxGenericConfig+0x320>)
 8008b00:	2200      	movs	r2, #0
 8008b02:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8008b06:	e000      	b.n	8008b0a <RadioSetTxGenericConfig+0x226>
            break;
 8008b08:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8008b0a:	4b3e      	ldr	r3, [pc, #248]	; (8008c04 <RadioSetTxGenericConfig+0x320>)
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b14:	4b3b      	ldr	r3, [pc, #236]	; (8008c04 <RadioSetTxGenericConfig+0x320>)
 8008b16:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8008b1e:	4b39      	ldr	r3, [pc, #228]	; (8008c04 <RadioSetTxGenericConfig+0x320>)
 8008b20:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8008b28:	4b36      	ldr	r3, [pc, #216]	; (8008c04 <RadioSetTxGenericConfig+0x320>)
 8008b2a:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8008b34:	4b33      	ldr	r3, [pc, #204]	; (8008c04 <RadioSetTxGenericConfig+0x320>)
 8008b36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        RadioStandby( );
 8008b3a:	f7ff f87c 	bl	8007c36 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8008b3e:	2001      	movs	r0, #1
 8008b40:	f7fe fa0e 	bl	8006f60 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008b44:	4832      	ldr	r0, [pc, #200]	; (8008c10 <RadioSetTxGenericConfig+0x32c>)
 8008b46:	f000 fcef 	bl	8009528 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8008b4a:	4832      	ldr	r0, [pc, #200]	; (8008c14 <RadioSetTxGenericConfig+0x330>)
 8008b4c:	f000 fdb8 	bl	80096c0 <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8008b50:	4b2c      	ldr	r3, [pc, #176]	; (8008c04 <RadioSetTxGenericConfig+0x320>)
 8008b52:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008b56:	2b06      	cmp	r3, #6
 8008b58:	d10d      	bne.n	8008b76 <RadioSetTxGenericConfig+0x292>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) & ~( 1 << 2 ) );
 8008b5a:	f640 0089 	movw	r0, #2185	; 0x889
 8008b5e:	f000 ff0b 	bl	8009978 <SUBGRF_ReadRegister>
 8008b62:	4603      	mov	r3, r0
 8008b64:	f023 0304 	bic.w	r3, r3, #4
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	4619      	mov	r1, r3
 8008b6c:	f640 0089 	movw	r0, #2185	; 0x889
 8008b70:	f000 feee 	bl	8009950 <SUBGRF_WriteRegister>
        break;
 8008b74:	e02d      	b.n	8008bd2 <RadioSetTxGenericConfig+0x2ee>
            SUBGRF_WriteRegister( 0x0889, SUBGRF_ReadRegister( 0x0889 ) | ( 1 << 2 ) );
 8008b76:	f640 0089 	movw	r0, #2185	; 0x889
 8008b7a:	f000 fefd 	bl	8009978 <SUBGRF_ReadRegister>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	f043 0304 	orr.w	r3, r3, #4
 8008b84:	b2db      	uxtb	r3, r3
 8008b86:	4619      	mov	r1, r3
 8008b88:	f640 0089 	movw	r0, #2185	; 0x889
 8008b8c:	f000 fee0 	bl	8009950 <SUBGRF_WriteRegister>
        break;
 8008b90:	e01f      	b.n	8008bd2 <RadioSetTxGenericConfig+0x2ee>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d004      	beq.n	8008ba4 <RadioSetTxGenericConfig+0x2c0>
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ba2:	d902      	bls.n	8008baa <RadioSetTxGenericConfig+0x2c6>
            return -1;
 8008ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ba8:	e027      	b.n	8008bfa <RadioSetTxGenericConfig+0x316>
        RadioSetModem( MODEM_BPSK );
 8008baa:	2002      	movs	r0, #2
 8008bac:	f7fe f9d8 	bl	8006f60 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8008bb0:	4b14      	ldr	r3, [pc, #80]	; (8008c04 <RadioSetTxGenericConfig+0x320>)
 8008bb2:	2202      	movs	r2, #2
 8008bb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bbc:	4a11      	ldr	r2, [pc, #68]	; (8008c04 <RadioSetTxGenericConfig+0x320>)
 8008bbe:	6493      	str	r3, [r2, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8008bc0:	4b10      	ldr	r3, [pc, #64]	; (8008c04 <RadioSetTxGenericConfig+0x320>)
 8008bc2:	2216      	movs	r2, #22
 8008bc4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8008bc8:	4811      	ldr	r0, [pc, #68]	; (8008c10 <RadioSetTxGenericConfig+0x32c>)
 8008bca:	f000 fcad 	bl	8009528 <SUBGRF_SetModulationParams>
        break;
 8008bce:	e000      	b.n	8008bd2 <RadioSetTxGenericConfig+0x2ee>
        break;
 8008bd0:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8008bd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f000 ffd6 	bl	8009b88 <SUBGRF_SetRfTxPower>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	461a      	mov	r2, r3
 8008be0:	4b08      	ldr	r3, [pc, #32]	; (8008c04 <RadioSetTxGenericConfig+0x320>)
 8008be2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8008be6:	4b07      	ldr	r3, [pc, #28]	; (8008c04 <RadioSetTxGenericConfig+0x320>)
 8008be8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008bec:	4618      	mov	r0, r3
 8008bee:	f001 f99c 	bl	8009f2a <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8008bf2:	4a04      	ldr	r2, [pc, #16]	; (8008c04 <RadioSetTxGenericConfig+0x320>)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6053      	str	r3, [r2, #4]
    return 0;
 8008bf8:	2300      	movs	r3, #0
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3728      	adds	r7, #40	; 0x28
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	20000898 	.word	0x20000898
 8008c08:	20000148 	.word	0x20000148
 8008c0c:	200008f0 	.word	0x200008f0
 8008c10:	200008d0 	.word	0x200008d0
 8008c14:	200008a6 	.word	0x200008a6

08008c18 <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8008c18:	b580      	push	{r7, lr}
 8008c1a:	b084      	sub	sp, #16
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d002      	beq.n	8008c2c <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8008c26:	4a1b      	ldr	r2, [pc, #108]	; (8008c94 <SUBGRF_Init+0x7c>)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8008c2c:	f7f7 fd26 	bl	800067c <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8008c30:	2002      	movs	r0, #2
 8008c32:	f001 f875 	bl	8009d20 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8008c36:	4b18      	ldr	r3, [pc, #96]	; (8008c98 <SUBGRF_Init+0x80>)
 8008c38:	2200      	movs	r2, #0
 8008c3a:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8008c3c:	2000      	movs	r0, #0
 8008c3e:	f000 f979 	bl	8008f34 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8008c42:	f001 fd4e 	bl	800a6e2 <RBI_IsTCXO>
 8008c46:	4603      	mov	r3, r0
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d10f      	bne.n	8008c6c <SUBGRF_Init+0x54>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8008c4c:	f44f 7120 	mov.w	r1, #640	; 0x280
 8008c50:	2001      	movs	r0, #1
 8008c52:	f000 fb79 	bl	8009348 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8008c56:	2100      	movs	r1, #0
 8008c58:	f640 1011 	movw	r0, #2321	; 0x911
 8008c5c:	f000 fe78 	bl	8009950 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8008c60:	237f      	movs	r3, #127	; 0x7f
 8008c62:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8008c64:	7b38      	ldrb	r0, [r7, #12]
 8008c66:	f000 fa86 	bl	8009176 <SUBGRF_Calibrate>
 8008c6a:	e009      	b.n	8008c80 <SUBGRF_Init+0x68>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8008c6c:	2120      	movs	r1, #32
 8008c6e:	f640 1011 	movw	r0, #2321	; 0x911
 8008c72:	f000 fe6d 	bl	8009950 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8008c76:	2120      	movs	r1, #32
 8008c78:	f640 1012 	movw	r0, #2322	; 0x912
 8008c7c:	f000 fe68 	bl	8009950 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 8008c80:	f001 fca8 	bl	800a5d4 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8008c84:	4b05      	ldr	r3, [pc, #20]	; (8008c9c <SUBGRF_Init+0x84>)
 8008c86:	2201      	movs	r2, #1
 8008c88:	701a      	strb	r2, [r3, #0]
}
 8008c8a:	bf00      	nop
 8008c8c:	3710      	adds	r7, #16
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop
 8008c94:	20000158 	.word	0x20000158
 8008c98:	20000154 	.word	0x20000154
 8008c9c:	2000014c 	.word	0x2000014c

08008ca0 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	af00      	add	r7, sp, #0
    return OperatingMode;
 8008ca4:	4b02      	ldr	r3, [pc, #8]	; (8008cb0 <SUBGRF_GetOperatingMode+0x10>)
 8008ca6:	781b      	ldrb	r3, [r3, #0]
}
 8008ca8:	4618      	mov	r0, r3
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bc80      	pop	{r7}
 8008cae:	4770      	bx	lr
 8008cb0:	2000014c 	.word	0x2000014c

08008cb4 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	460b      	mov	r3, r1
 8008cbe:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8008cc0:	78fb      	ldrb	r3, [r7, #3]
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	6879      	ldr	r1, [r7, #4]
 8008cc6:	2000      	movs	r0, #0
 8008cc8:	f000 feae 	bl	8009a28 <SUBGRF_WriteBuffer>
}
 8008ccc:	bf00      	nop
 8008cce:	3708      	adds	r7, #8
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	bd80      	pop	{r7, pc}

08008cd4 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b086      	sub	sp, #24
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	60b9      	str	r1, [r7, #8]
 8008cde:	4613      	mov	r3, r2
 8008ce0:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8008ce6:	f107 0317 	add.w	r3, r7, #23
 8008cea:	4619      	mov	r1, r3
 8008cec:	68b8      	ldr	r0, [r7, #8]
 8008cee:	f000 fdb1 	bl	8009854 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	79fa      	ldrb	r2, [r7, #7]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d201      	bcs.n	8008d00 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e007      	b.n	8008d10 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8008d00:	7df8      	ldrb	r0, [r7, #23]
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	781b      	ldrb	r3, [r3, #0]
 8008d06:	461a      	mov	r2, r3
 8008d08:	68f9      	ldr	r1, [r7, #12]
 8008d0a:	f000 feaf 	bl	8009a6c <SUBGRF_ReadBuffer>

    return 0;
 8008d0e:	2300      	movs	r3, #0
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	3718      	adds	r7, #24
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}

08008d18 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b084      	sub	sp, #16
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	60f8      	str	r0, [r7, #12]
 8008d20:	460b      	mov	r3, r1
 8008d22:	607a      	str	r2, [r7, #4]
 8008d24:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8008d26:	7afb      	ldrb	r3, [r7, #11]
 8008d28:	4619      	mov	r1, r3
 8008d2a:	68f8      	ldr	r0, [r7, #12]
 8008d2c:	f7ff ffc2 	bl	8008cb4 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8008d30:	6878      	ldr	r0, [r7, #4]
 8008d32:	f000 f91b 	bl	8008f6c <SUBGRF_SetTx>
}
 8008d36:	bf00      	nop
 8008d38:	3710      	adds	r7, #16
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	bd80      	pop	{r7, pc}

08008d3e <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8008d3e:	b580      	push	{r7, lr}
 8008d40:	b082      	sub	sp, #8
 8008d42:	af00      	add	r7, sp, #0
 8008d44:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8008d46:	2208      	movs	r2, #8
 8008d48:	6879      	ldr	r1, [r7, #4]
 8008d4a:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 8008d4e:	f000 fe27 	bl	80099a0 <SUBGRF_WriteRegisters>
    return 0;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3708      	adds	r7, #8
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b084      	sub	sp, #16
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	4603      	mov	r3, r0
 8008d64:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8008d66:	88fb      	ldrh	r3, [r7, #6]
 8008d68:	0a1b      	lsrs	r3, r3, #8
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	b2db      	uxtb	r3, r3
 8008d6e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8008d70:	88fb      	ldrh	r3, [r7, #6]
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8008d76:	f000 fb67 	bl	8009448 <SUBGRF_GetPacketType>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d108      	bne.n	8008d92 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8008d80:	f107 030c 	add.w	r3, r7, #12
 8008d84:	2202      	movs	r2, #2
 8008d86:	4619      	mov	r1, r3
 8008d88:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8008d8c:	f000 fe08 	bl	80099a0 <SUBGRF_WriteRegisters>
            break;
 8008d90:	e000      	b.n	8008d94 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8008d92:	bf00      	nop
    }
}
 8008d94:	bf00      	nop
 8008d96:	3710      	adds	r7, #16
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	4603      	mov	r3, r0
 8008da4:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8008da6:	88fb      	ldrh	r3, [r7, #6]
 8008da8:	0a1b      	lsrs	r3, r3, #8
 8008daa:	b29b      	uxth	r3, r3
 8008dac:	b2db      	uxtb	r3, r3
 8008dae:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8008db0:	88fb      	ldrh	r3, [r7, #6]
 8008db2:	b2db      	uxtb	r3, r3
 8008db4:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8008db6:	f000 fb47 	bl	8009448 <SUBGRF_GetPacketType>
 8008dba:	4603      	mov	r3, r0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d108      	bne.n	8008dd2 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8008dc0:	f107 030c 	add.w	r3, r7, #12
 8008dc4:	2202      	movs	r2, #2
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	f240 60be 	movw	r0, #1726	; 0x6be
 8008dcc:	f000 fde8 	bl	80099a0 <SUBGRF_WriteRegisters>
            break;
 8008dd0:	e000      	b.n	8008dd4 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8008dd2:	bf00      	nop
    }
}
 8008dd4:	bf00      	nop
 8008dd6:	3710      	adds	r7, #16
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b084      	sub	sp, #16
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	4603      	mov	r3, r0
 8008de4:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8008de6:	2300      	movs	r3, #0
 8008de8:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8008dea:	f000 fb2d 	bl	8009448 <SUBGRF_GetPacketType>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d121      	bne.n	8008e38 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8008df4:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8008df8:	f000 fdbe 	bl	8009978 <SUBGRF_ReadRegister>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	f023 0301 	bic.w	r3, r3, #1
 8008e02:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8008e04:	88fb      	ldrh	r3, [r7, #6]
 8008e06:	0a1b      	lsrs	r3, r3, #8
 8008e08:	b29b      	uxth	r3, r3
 8008e0a:	b25b      	sxtb	r3, r3
 8008e0c:	f003 0301 	and.w	r3, r3, #1
 8008e10:	b25a      	sxtb	r2, r3
 8008e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e16:	4313      	orrs	r3, r2
 8008e18:	b25b      	sxtb	r3, r3
 8008e1a:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8008e1c:	7bfb      	ldrb	r3, [r7, #15]
 8008e1e:	4619      	mov	r1, r3
 8008e20:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8008e24:	f000 fd94 	bl	8009950 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8008e28:	88fb      	ldrh	r3, [r7, #6]
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	f240 60b9 	movw	r0, #1721	; 0x6b9
 8008e32:	f000 fd8d 	bl	8009950 <SUBGRF_WriteRegister>
            break;
 8008e36:	e000      	b.n	8008e3a <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8008e38:	bf00      	nop
    }
}
 8008e3a:	bf00      	nop
 8008e3c:	3710      	adds	r7, #16
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}

08008e42 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8008e42:	b580      	push	{r7, lr}
 8008e44:	b082      	sub	sp, #8
 8008e46:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8008e50:	2300      	movs	r3, #0
 8008e52:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8008e54:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8008e58:	f000 fd8e 	bl	8009978 <SUBGRF_ReadRegister>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8008e60:	79fb      	ldrb	r3, [r7, #7]
 8008e62:	f023 0301 	bic.w	r3, r3, #1
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	4619      	mov	r1, r3
 8008e6a:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8008e6e:	f000 fd6f 	bl	8009950 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8008e72:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8008e76:	f000 fd7f 	bl	8009978 <SUBGRF_ReadRegister>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8008e7e:	79bb      	ldrb	r3, [r7, #6]
 8008e80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e84:	b2db      	uxtb	r3, r3
 8008e86:	4619      	mov	r1, r3
 8008e88:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8008e8c:	f000 fd60 	bl	8009950 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8008e90:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8008e94:	f000 f88a 	bl	8008fac <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8008e98:	463b      	mov	r3, r7
 8008e9a:	2204      	movs	r2, #4
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	f640 0019 	movw	r0, #2073	; 0x819
 8008ea2:	f000 fd9f 	bl	80099e4 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8008ea6:	2000      	movs	r0, #0
 8008ea8:	f000 f844 	bl	8008f34 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8008eac:	79fb      	ldrb	r3, [r7, #7]
 8008eae:	4619      	mov	r1, r3
 8008eb0:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8008eb4:	f000 fd4c 	bl	8009950 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8008eb8:	79bb      	ldrb	r3, [r7, #6]
 8008eba:	4619      	mov	r1, r3
 8008ebc:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8008ec0:	f000 fd46 	bl	8009950 <SUBGRF_WriteRegister>

    return number;
 8008ec4:	683b      	ldr	r3, [r7, #0]
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3708      	adds	r7, #8
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
	...

08008ed0 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8008ed8:	2000      	movs	r0, #0
 8008eda:	f001 fbad 	bl	800a638 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8008ede:	2002      	movs	r0, #2
 8008ee0:	f000 ff1e 	bl	8009d20 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8008ee4:	793b      	ldrb	r3, [r7, #4]
 8008ee6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008eea:	b2db      	uxtb	r3, r3
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8008ef0:	793b      	ldrb	r3, [r7, #4]
 8008ef2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008ef6:	b2db      	uxtb	r3, r3
 8008ef8:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8008efa:	b25b      	sxtb	r3, r3
 8008efc:	4313      	orrs	r3, r2
 8008efe:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8008f00:	793b      	ldrb	r3, [r7, #4]
 8008f02:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008f06:	b2db      	uxtb	r3, r3
 8008f08:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	b25b      	sxtb	r3, r3
 8008f0e:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8008f10:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8008f12:	f107 030f 	add.w	r3, r7, #15
 8008f16:	2201      	movs	r2, #1
 8008f18:	4619      	mov	r1, r3
 8008f1a:	2084      	movs	r0, #132	; 0x84
 8008f1c:	f000 fdc8 	bl	8009ab0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8008f20:	4b03      	ldr	r3, [pc, #12]	; (8008f30 <SUBGRF_SetSleep+0x60>)
 8008f22:	2200      	movs	r2, #0
 8008f24:	701a      	strb	r2, [r3, #0]
}
 8008f26:	bf00      	nop
 8008f28:	3710      	adds	r7, #16
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	2000014c 	.word	0x2000014c

08008f34 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b082      	sub	sp, #8
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8008f3e:	1dfb      	adds	r3, r7, #7
 8008f40:	2201      	movs	r2, #1
 8008f42:	4619      	mov	r1, r3
 8008f44:	2080      	movs	r0, #128	; 0x80
 8008f46:	f000 fdb3 	bl	8009ab0 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8008f4a:	79fb      	ldrb	r3, [r7, #7]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d103      	bne.n	8008f58 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8008f50:	4b05      	ldr	r3, [pc, #20]	; (8008f68 <SUBGRF_SetStandby+0x34>)
 8008f52:	2201      	movs	r2, #1
 8008f54:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8008f56:	e002      	b.n	8008f5e <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8008f58:	4b03      	ldr	r3, [pc, #12]	; (8008f68 <SUBGRF_SetStandby+0x34>)
 8008f5a:	2202      	movs	r2, #2
 8008f5c:	701a      	strb	r2, [r3, #0]
}
 8008f5e:	bf00      	nop
 8008f60:	3708      	adds	r7, #8
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop
 8008f68:	2000014c 	.word	0x2000014c

08008f6c <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b084      	sub	sp, #16
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8008f74:	4b0c      	ldr	r3, [pc, #48]	; (8008fa8 <SUBGRF_SetTx+0x3c>)
 8008f76:	2204      	movs	r2, #4
 8008f78:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	0c1b      	lsrs	r3, r3, #16
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	0a1b      	lsrs	r3, r3, #8
 8008f86:	b2db      	uxtb	r3, r3
 8008f88:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8008f90:	f107 030c 	add.w	r3, r7, #12
 8008f94:	2203      	movs	r2, #3
 8008f96:	4619      	mov	r1, r3
 8008f98:	2083      	movs	r0, #131	; 0x83
 8008f9a:	f000 fd89 	bl	8009ab0 <SUBGRF_WriteCommand>
}
 8008f9e:	bf00      	nop
 8008fa0:	3710      	adds	r7, #16
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	bf00      	nop
 8008fa8:	2000014c 	.word	0x2000014c

08008fac <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8008fb4:	4b0c      	ldr	r3, [pc, #48]	; (8008fe8 <SUBGRF_SetRx+0x3c>)
 8008fb6:	2205      	movs	r2, #5
 8008fb8:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	0c1b      	lsrs	r3, r3, #16
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	0a1b      	lsrs	r3, r3, #8
 8008fc6:	b2db      	uxtb	r3, r3
 8008fc8:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	b2db      	uxtb	r3, r3
 8008fce:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8008fd0:	f107 030c 	add.w	r3, r7, #12
 8008fd4:	2203      	movs	r2, #3
 8008fd6:	4619      	mov	r1, r3
 8008fd8:	2082      	movs	r0, #130	; 0x82
 8008fda:	f000 fd69 	bl	8009ab0 <SUBGRF_WriteCommand>
}
 8008fde:	bf00      	nop
 8008fe0:	3710      	adds	r7, #16
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	2000014c 	.word	0x2000014c

08008fec <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8008ff4:	4b0e      	ldr	r3, [pc, #56]	; (8009030 <SUBGRF_SetRxBoosted+0x44>)
 8008ff6:	2205      	movs	r2, #5
 8008ff8:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8008ffa:	2197      	movs	r1, #151	; 0x97
 8008ffc:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8009000:	f000 fca6 	bl	8009950 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	0c1b      	lsrs	r3, r3, #16
 8009008:	b2db      	uxtb	r3, r3
 800900a:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	0a1b      	lsrs	r3, r3, #8
 8009010:	b2db      	uxtb	r3, r3
 8009012:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	b2db      	uxtb	r3, r3
 8009018:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800901a:	f107 030c 	add.w	r3, r7, #12
 800901e:	2203      	movs	r2, #3
 8009020:	4619      	mov	r1, r3
 8009022:	2082      	movs	r0, #130	; 0x82
 8009024:	f000 fd44 	bl	8009ab0 <SUBGRF_WriteCommand>
}
 8009028:	bf00      	nop
 800902a:	3710      	adds	r7, #16
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}
 8009030:	2000014c 	.word	0x2000014c

08009034 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	0c1b      	lsrs	r3, r3, #16
 8009042:	b2db      	uxtb	r3, r3
 8009044:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	0a1b      	lsrs	r3, r3, #8
 800904a:	b2db      	uxtb	r3, r3
 800904c:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	b2db      	uxtb	r3, r3
 8009052:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	0c1b      	lsrs	r3, r3, #16
 8009058:	b2db      	uxtb	r3, r3
 800905a:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	0a1b      	lsrs	r3, r3, #8
 8009060:	b2db      	uxtb	r3, r3
 8009062:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	b2db      	uxtb	r3, r3
 8009068:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 800906a:	f107 0308 	add.w	r3, r7, #8
 800906e:	2206      	movs	r2, #6
 8009070:	4619      	mov	r1, r3
 8009072:	2094      	movs	r0, #148	; 0x94
 8009074:	f000 fd1c 	bl	8009ab0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8009078:	4b03      	ldr	r3, [pc, #12]	; (8009088 <SUBGRF_SetRxDutyCycle+0x54>)
 800907a:	2206      	movs	r2, #6
 800907c:	701a      	strb	r2, [r3, #0]
}
 800907e:	bf00      	nop
 8009080:	3710      	adds	r7, #16
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	bf00      	nop
 8009088:	2000014c 	.word	0x2000014c

0800908c <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 800908c:	b580      	push	{r7, lr}
 800908e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8009090:	2200      	movs	r2, #0
 8009092:	2100      	movs	r1, #0
 8009094:	20c5      	movs	r0, #197	; 0xc5
 8009096:	f000 fd0b 	bl	8009ab0 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800909a:	4b02      	ldr	r3, [pc, #8]	; (80090a4 <SUBGRF_SetCad+0x18>)
 800909c:	2207      	movs	r2, #7
 800909e:	701a      	strb	r2, [r3, #0]
}
 80090a0:	bf00      	nop
 80090a2:	bd80      	pop	{r7, pc}
 80090a4:	2000014c 	.word	0x2000014c

080090a8 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 80090ac:	2200      	movs	r2, #0
 80090ae:	2100      	movs	r1, #0
 80090b0:	20d1      	movs	r0, #209	; 0xd1
 80090b2:	f000 fcfd 	bl	8009ab0 <SUBGRF_WriteCommand>
}
 80090b6:	bf00      	nop
 80090b8:	bd80      	pop	{r7, pc}

080090ba <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 80090ba:	b580      	push	{r7, lr}
 80090bc:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 80090be:	2200      	movs	r2, #0
 80090c0:	2100      	movs	r1, #0
 80090c2:	20d2      	movs	r0, #210	; 0xd2
 80090c4:	f000 fcf4 	bl	8009ab0 <SUBGRF_WriteCommand>
}
 80090c8:	bf00      	nop
 80090ca:	bd80      	pop	{r7, pc}

080090cc <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b082      	sub	sp, #8
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	4603      	mov	r3, r0
 80090d4:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 80090d6:	1dfb      	adds	r3, r7, #7
 80090d8:	2201      	movs	r2, #1
 80090da:	4619      	mov	r1, r3
 80090dc:	209f      	movs	r0, #159	; 0x9f
 80090de:	f000 fce7 	bl	8009ab0 <SUBGRF_WriteCommand>
}
 80090e2:	bf00      	nop
 80090e4:	3708      	adds	r7, #8
 80090e6:	46bd      	mov	sp, r7
 80090e8:	bd80      	pop	{r7, pc}

080090ea <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b084      	sub	sp, #16
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	4603      	mov	r3, r0
 80090f2:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 80090f4:	1dfb      	adds	r3, r7, #7
 80090f6:	2201      	movs	r2, #1
 80090f8:	4619      	mov	r1, r3
 80090fa:	20a0      	movs	r0, #160	; 0xa0
 80090fc:	f000 fcd8 	bl	8009ab0 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8009100:	79fb      	ldrb	r3, [r7, #7]
 8009102:	2b3f      	cmp	r3, #63	; 0x3f
 8009104:	d91c      	bls.n	8009140 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8009106:	79fb      	ldrb	r3, [r7, #7]
 8009108:	085b      	lsrs	r3, r3, #1
 800910a:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 800910c:	2300      	movs	r3, #0
 800910e:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8009110:	2300      	movs	r3, #0
 8009112:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8009114:	e005      	b.n	8009122 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8009116:	7bfb      	ldrb	r3, [r7, #15]
 8009118:	089b      	lsrs	r3, r3, #2
 800911a:	73fb      	strb	r3, [r7, #15]
            exp++;
 800911c:	7bbb      	ldrb	r3, [r7, #14]
 800911e:	3301      	adds	r3, #1
 8009120:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8009122:	7bfb      	ldrb	r3, [r7, #15]
 8009124:	2b1f      	cmp	r3, #31
 8009126:	d8f6      	bhi.n	8009116 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8009128:	7bfb      	ldrb	r3, [r7, #15]
 800912a:	00db      	lsls	r3, r3, #3
 800912c:	b2da      	uxtb	r2, r3
 800912e:	7bbb      	ldrb	r3, [r7, #14]
 8009130:	4413      	add	r3, r2
 8009132:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8009134:	7b7b      	ldrb	r3, [r7, #13]
 8009136:	4619      	mov	r1, r3
 8009138:	f240 7006 	movw	r0, #1798	; 0x706
 800913c:	f000 fc08 	bl	8009950 <SUBGRF_WriteRegister>
    }
}
 8009140:	bf00      	nop
 8009142:	3710      	adds	r7, #16
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 800914e:	f001 facf 	bl	800a6f0 <RBI_IsDCDC>
 8009152:	4603      	mov	r3, r0
 8009154:	2b01      	cmp	r3, #1
 8009156:	d102      	bne.n	800915e <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8009158:	2301      	movs	r3, #1
 800915a:	71fb      	strb	r3, [r7, #7]
 800915c:	e001      	b.n	8009162 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 800915e:	2300      	movs	r3, #0
 8009160:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8009162:	1dfb      	adds	r3, r7, #7
 8009164:	2201      	movs	r2, #1
 8009166:	4619      	mov	r1, r3
 8009168:	2096      	movs	r0, #150	; 0x96
 800916a:	f000 fca1 	bl	8009ab0 <SUBGRF_WriteCommand>
}
 800916e:	bf00      	nop
 8009170:	3708      	adds	r7, #8
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}

08009176 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8009176:	b580      	push	{r7, lr}
 8009178:	b084      	sub	sp, #16
 800917a:	af00      	add	r7, sp, #0
 800917c:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 800917e:	793b      	ldrb	r3, [r7, #4]
 8009180:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8009184:	b2db      	uxtb	r3, r3
 8009186:	019b      	lsls	r3, r3, #6
 8009188:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 800918a:	793b      	ldrb	r3, [r7, #4]
 800918c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8009190:	b2db      	uxtb	r3, r3
 8009192:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8009194:	b25b      	sxtb	r3, r3
 8009196:	4313      	orrs	r3, r2
 8009198:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 800919a:	793b      	ldrb	r3, [r7, #4]
 800919c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80091a4:	b25b      	sxtb	r3, r3
 80091a6:	4313      	orrs	r3, r2
 80091a8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80091aa:	793b      	ldrb	r3, [r7, #4]
 80091ac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80091b4:	b25b      	sxtb	r3, r3
 80091b6:	4313      	orrs	r3, r2
 80091b8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80091ba:	793b      	ldrb	r3, [r7, #4]
 80091bc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80091c0:	b2db      	uxtb	r3, r3
 80091c2:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80091c4:	b25b      	sxtb	r3, r3
 80091c6:	4313      	orrs	r3, r2
 80091c8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80091ca:	793b      	ldrb	r3, [r7, #4]
 80091cc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80091d0:	b2db      	uxtb	r3, r3
 80091d2:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80091d4:	b25b      	sxtb	r3, r3
 80091d6:	4313      	orrs	r3, r2
 80091d8:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 80091da:	793b      	ldrb	r3, [r7, #4]
 80091dc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80091e4:	4313      	orrs	r3, r2
 80091e6:	b25b      	sxtb	r3, r3
 80091e8:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80091ea:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 80091ec:	f107 030f 	add.w	r3, r7, #15
 80091f0:	2201      	movs	r2, #1
 80091f2:	4619      	mov	r1, r3
 80091f4:	2089      	movs	r0, #137	; 0x89
 80091f6:	f000 fc5b 	bl	8009ab0 <SUBGRF_WriteCommand>
}
 80091fa:	bf00      	nop
 80091fc:	3710      	adds	r7, #16
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
	...

08009204 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b084      	sub	sp, #16
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	4a1b      	ldr	r2, [pc, #108]	; (800927c <SUBGRF_CalibrateImage+0x78>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d904      	bls.n	800921e <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 8009214:	23e1      	movs	r3, #225	; 0xe1
 8009216:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 8009218:	23e9      	movs	r3, #233	; 0xe9
 800921a:	737b      	strb	r3, [r7, #13]
 800921c:	e022      	b.n	8009264 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	4a17      	ldr	r2, [pc, #92]	; (8009280 <SUBGRF_CalibrateImage+0x7c>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d904      	bls.n	8009230 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 8009226:	23d7      	movs	r3, #215	; 0xd7
 8009228:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 800922a:	23db      	movs	r3, #219	; 0xdb
 800922c:	737b      	strb	r3, [r7, #13]
 800922e:	e019      	b.n	8009264 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	4a14      	ldr	r2, [pc, #80]	; (8009284 <SUBGRF_CalibrateImage+0x80>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d904      	bls.n	8009242 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 8009238:	23c1      	movs	r3, #193	; 0xc1
 800923a:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 800923c:	23c5      	movs	r3, #197	; 0xc5
 800923e:	737b      	strb	r3, [r7, #13]
 8009240:	e010      	b.n	8009264 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	4a10      	ldr	r2, [pc, #64]	; (8009288 <SUBGRF_CalibrateImage+0x84>)
 8009246:	4293      	cmp	r3, r2
 8009248:	d904      	bls.n	8009254 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 800924a:	2375      	movs	r3, #117	; 0x75
 800924c:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 800924e:	2381      	movs	r3, #129	; 0x81
 8009250:	737b      	strb	r3, [r7, #13]
 8009252:	e007      	b.n	8009264 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	4a0d      	ldr	r2, [pc, #52]	; (800928c <SUBGRF_CalibrateImage+0x88>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d903      	bls.n	8009264 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 800925c:	236b      	movs	r3, #107	; 0x6b
 800925e:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8009260:	236f      	movs	r3, #111	; 0x6f
 8009262:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8009264:	f107 030c 	add.w	r3, r7, #12
 8009268:	2202      	movs	r2, #2
 800926a:	4619      	mov	r1, r3
 800926c:	2098      	movs	r0, #152	; 0x98
 800926e:	f000 fc1f 	bl	8009ab0 <SUBGRF_WriteCommand>
}
 8009272:	bf00      	nop
 8009274:	3710      	adds	r7, #16
 8009276:	46bd      	mov	sp, r7
 8009278:	bd80      	pop	{r7, pc}
 800927a:	bf00      	nop
 800927c:	35a4e900 	.word	0x35a4e900
 8009280:	32a9f880 	.word	0x32a9f880
 8009284:	2de54480 	.word	0x2de54480
 8009288:	1b6b0b00 	.word	0x1b6b0b00
 800928c:	1954fc40 	.word	0x1954fc40

08009290 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8009290:	b590      	push	{r4, r7, lr}
 8009292:	b085      	sub	sp, #20
 8009294:	af00      	add	r7, sp, #0
 8009296:	4604      	mov	r4, r0
 8009298:	4608      	mov	r0, r1
 800929a:	4611      	mov	r1, r2
 800929c:	461a      	mov	r2, r3
 800929e:	4623      	mov	r3, r4
 80092a0:	71fb      	strb	r3, [r7, #7]
 80092a2:	4603      	mov	r3, r0
 80092a4:	71bb      	strb	r3, [r7, #6]
 80092a6:	460b      	mov	r3, r1
 80092a8:	717b      	strb	r3, [r7, #5]
 80092aa:	4613      	mov	r3, r2
 80092ac:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 80092ae:	79fb      	ldrb	r3, [r7, #7]
 80092b0:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 80092b2:	79bb      	ldrb	r3, [r7, #6]
 80092b4:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 80092b6:	797b      	ldrb	r3, [r7, #5]
 80092b8:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 80092ba:	793b      	ldrb	r3, [r7, #4]
 80092bc:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80092be:	f107 030c 	add.w	r3, r7, #12
 80092c2:	2204      	movs	r2, #4
 80092c4:	4619      	mov	r1, r3
 80092c6:	2095      	movs	r0, #149	; 0x95
 80092c8:	f000 fbf2 	bl	8009ab0 <SUBGRF_WriteCommand>
}
 80092cc:	bf00      	nop
 80092ce:	3714      	adds	r7, #20
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd90      	pop	{r4, r7, pc}

080092d4 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 80092d4:	b590      	push	{r4, r7, lr}
 80092d6:	b085      	sub	sp, #20
 80092d8:	af00      	add	r7, sp, #0
 80092da:	4604      	mov	r4, r0
 80092dc:	4608      	mov	r0, r1
 80092de:	4611      	mov	r1, r2
 80092e0:	461a      	mov	r2, r3
 80092e2:	4623      	mov	r3, r4
 80092e4:	80fb      	strh	r3, [r7, #6]
 80092e6:	4603      	mov	r3, r0
 80092e8:	80bb      	strh	r3, [r7, #4]
 80092ea:	460b      	mov	r3, r1
 80092ec:	807b      	strh	r3, [r7, #2]
 80092ee:	4613      	mov	r3, r2
 80092f0:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80092f2:	88fb      	ldrh	r3, [r7, #6]
 80092f4:	0a1b      	lsrs	r3, r3, #8
 80092f6:	b29b      	uxth	r3, r3
 80092f8:	b2db      	uxtb	r3, r3
 80092fa:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 80092fc:	88fb      	ldrh	r3, [r7, #6]
 80092fe:	b2db      	uxtb	r3, r3
 8009300:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8009302:	88bb      	ldrh	r3, [r7, #4]
 8009304:	0a1b      	lsrs	r3, r3, #8
 8009306:	b29b      	uxth	r3, r3
 8009308:	b2db      	uxtb	r3, r3
 800930a:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 800930c:	88bb      	ldrh	r3, [r7, #4]
 800930e:	b2db      	uxtb	r3, r3
 8009310:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 8009312:	887b      	ldrh	r3, [r7, #2]
 8009314:	0a1b      	lsrs	r3, r3, #8
 8009316:	b29b      	uxth	r3, r3
 8009318:	b2db      	uxtb	r3, r3
 800931a:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 800931c:	887b      	ldrh	r3, [r7, #2]
 800931e:	b2db      	uxtb	r3, r3
 8009320:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8009322:	883b      	ldrh	r3, [r7, #0]
 8009324:	0a1b      	lsrs	r3, r3, #8
 8009326:	b29b      	uxth	r3, r3
 8009328:	b2db      	uxtb	r3, r3
 800932a:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 800932c:	883b      	ldrh	r3, [r7, #0]
 800932e:	b2db      	uxtb	r3, r3
 8009330:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8009332:	f107 0308 	add.w	r3, r7, #8
 8009336:	2208      	movs	r2, #8
 8009338:	4619      	mov	r1, r3
 800933a:	2008      	movs	r0, #8
 800933c:	f000 fbb8 	bl	8009ab0 <SUBGRF_WriteCommand>
}
 8009340:	bf00      	nop
 8009342:	3714      	adds	r7, #20
 8009344:	46bd      	mov	sp, r7
 8009346:	bd90      	pop	{r4, r7, pc}

08009348 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b084      	sub	sp, #16
 800934c:	af00      	add	r7, sp, #0
 800934e:	4603      	mov	r3, r0
 8009350:	6039      	str	r1, [r7, #0]
 8009352:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 8009354:	79fb      	ldrb	r3, [r7, #7]
 8009356:	f003 0307 	and.w	r3, r3, #7
 800935a:	b2db      	uxtb	r3, r3
 800935c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	0c1b      	lsrs	r3, r3, #16
 8009362:	b2db      	uxtb	r3, r3
 8009364:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	0a1b      	lsrs	r3, r3, #8
 800936a:	b2db      	uxtb	r3, r3
 800936c:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	b2db      	uxtb	r3, r3
 8009372:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8009374:	f107 030c 	add.w	r3, r7, #12
 8009378:	2204      	movs	r2, #4
 800937a:	4619      	mov	r1, r3
 800937c:	2097      	movs	r0, #151	; 0x97
 800937e:	f000 fb97 	bl	8009ab0 <SUBGRF_WriteCommand>
}
 8009382:	bf00      	nop
 8009384:	3710      	adds	r7, #16
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}
	...

0800938c <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 800938c:	b5b0      	push	{r4, r5, r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8009394:	2300      	movs	r3, #0
 8009396:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 8009398:	4b1b      	ldr	r3, [pc, #108]	; (8009408 <SUBGRF_SetRfFrequency+0x7c>)
 800939a:	781b      	ldrb	r3, [r3, #0]
 800939c:	f083 0301 	eor.w	r3, r3, #1
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d005      	beq.n	80093b2 <SUBGRF_SetRfFrequency+0x26>
    {
        SUBGRF_CalibrateImage( frequency );
 80093a6:	6878      	ldr	r0, [r7, #4]
 80093a8:	f7ff ff2c 	bl	8009204 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 80093ac:	4b16      	ldr	r3, [pc, #88]	; (8009408 <SUBGRF_SetRfFrequency+0x7c>)
 80093ae:	2201      	movs	r2, #1
 80093b0:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);   
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	461a      	mov	r2, r3
 80093b6:	f04f 0300 	mov.w	r3, #0
 80093ba:	09d5      	lsrs	r5, r2, #7
 80093bc:	0654      	lsls	r4, r2, #25
 80093be:	4a13      	ldr	r2, [pc, #76]	; (800940c <SUBGRF_SetRfFrequency+0x80>)
 80093c0:	f04f 0300 	mov.w	r3, #0
 80093c4:	4620      	mov	r0, r4
 80093c6:	4629      	mov	r1, r5
 80093c8:	f7f6 fede 	bl	8000188 <__aeabi_uldivmod>
 80093cc:	4602      	mov	r2, r0
 80093ce:	460b      	mov	r3, r1
 80093d0:	4613      	mov	r3, r2
 80093d2:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	0e1b      	lsrs	r3, r3, #24
 80093d8:	b2db      	uxtb	r3, r3
 80093da:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	0c1b      	lsrs	r3, r3, #16
 80093e0:	b2db      	uxtb	r3, r3
 80093e2:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	0a1b      	lsrs	r3, r3, #8
 80093e8:	b2db      	uxtb	r3, r3
 80093ea:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80093f2:	f107 0308 	add.w	r3, r7, #8
 80093f6:	2204      	movs	r2, #4
 80093f8:	4619      	mov	r1, r3
 80093fa:	2086      	movs	r0, #134	; 0x86
 80093fc:	f000 fb58 	bl	8009ab0 <SUBGRF_WriteCommand>
}
 8009400:	bf00      	nop
 8009402:	3710      	adds	r7, #16
 8009404:	46bd      	mov	sp, r7
 8009406:	bdb0      	pop	{r4, r5, r7, pc}
 8009408:	20000154 	.word	0x20000154
 800940c:	01e84800 	.word	0x01e84800

08009410 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b082      	sub	sp, #8
 8009414:	af00      	add	r7, sp, #0
 8009416:	4603      	mov	r3, r0
 8009418:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 800941a:	79fa      	ldrb	r2, [r7, #7]
 800941c:	4b09      	ldr	r3, [pc, #36]	; (8009444 <SUBGRF_SetPacketType+0x34>)
 800941e:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 8009420:	79fb      	ldrb	r3, [r7, #7]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d104      	bne.n	8009430 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8009426:	2100      	movs	r1, #0
 8009428:	f240 60ac 	movw	r0, #1708	; 0x6ac
 800942c:	f000 fa90 	bl	8009950 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8009430:	1dfb      	adds	r3, r7, #7
 8009432:	2201      	movs	r2, #1
 8009434:	4619      	mov	r1, r3
 8009436:	208a      	movs	r0, #138	; 0x8a
 8009438:	f000 fb3a 	bl	8009ab0 <SUBGRF_WriteCommand>
}
 800943c:	bf00      	nop
 800943e:	3708      	adds	r7, #8
 8009440:	46bd      	mov	sp, r7
 8009442:	bd80      	pop	{r7, pc}
 8009444:	2000014d 	.word	0x2000014d

08009448 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 8009448:	b480      	push	{r7}
 800944a:	af00      	add	r7, sp, #0
    return PacketType;
 800944c:	4b02      	ldr	r3, [pc, #8]	; (8009458 <SUBGRF_GetPacketType+0x10>)
 800944e:	781b      	ldrb	r3, [r3, #0]
}
 8009450:	4618      	mov	r0, r3
 8009452:	46bd      	mov	sp, r7
 8009454:	bc80      	pop	{r7}
 8009456:	4770      	bx	lr
 8009458:	2000014d 	.word	0x2000014d

0800945c <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime ) 
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b084      	sub	sp, #16
 8009460:	af00      	add	r7, sp, #0
 8009462:	4603      	mov	r3, r0
 8009464:	71fb      	strb	r3, [r7, #7]
 8009466:	460b      	mov	r3, r1
 8009468:	71bb      	strb	r3, [r7, #6]
 800946a:	4613      	mov	r3, r2
 800946c:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];

    if( paSelect == RFO_LP )
 800946e:	79fb      	ldrb	r3, [r7, #7]
 8009470:	2b01      	cmp	r3, #1
 8009472:	d124      	bne.n	80094be <SUBGRF_SetTxParams+0x62>
    {
        if( power == 15 )
 8009474:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8009478:	2b0f      	cmp	r3, #15
 800947a:	d106      	bne.n	800948a <SUBGRF_SetTxParams+0x2e>
        {
            SUBGRF_SetPaConfig( 0x06, 0x00, 0x01, 0x01 );
 800947c:	2301      	movs	r3, #1
 800947e:	2201      	movs	r2, #1
 8009480:	2100      	movs	r1, #0
 8009482:	2006      	movs	r0, #6
 8009484:	f7ff ff04 	bl	8009290 <SUBGRF_SetPaConfig>
 8009488:	e005      	b.n	8009496 <SUBGRF_SetTxParams+0x3a>
        }
        else
        {
            SUBGRF_SetPaConfig( 0x04, 0x00, 0x01, 0x01 );
 800948a:	2301      	movs	r3, #1
 800948c:	2201      	movs	r2, #1
 800948e:	2100      	movs	r1, #0
 8009490:	2004      	movs	r0, #4
 8009492:	f7ff fefd 	bl	8009290 <SUBGRF_SetPaConfig>
        }
        if( power >= 14 )
 8009496:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800949a:	2b0d      	cmp	r3, #13
 800949c:	dd02      	ble.n	80094a4 <SUBGRF_SetTxParams+0x48>
        {
            power = 14;
 800949e:	230e      	movs	r3, #14
 80094a0:	71bb      	strb	r3, [r7, #6]
 80094a2:	e006      	b.n	80094b2 <SUBGRF_SetTxParams+0x56>
        }
        else if( power < -17 )
 80094a4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80094a8:	f113 0f11 	cmn.w	r3, #17
 80094ac:	da01      	bge.n	80094b2 <SUBGRF_SetTxParams+0x56>
        {
            power = -17;
 80094ae:	23ef      	movs	r3, #239	; 0xef
 80094b0:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x18 ); // current max is 80 mA for the whole device
 80094b2:	2118      	movs	r1, #24
 80094b4:	f640 00e7 	movw	r0, #2279	; 0x8e7
 80094b8:	f000 fa4a 	bl	8009950 <SUBGRF_WriteRegister>
 80094bc:	e025      	b.n	800950a <SUBGRF_SetTxParams+0xae>
    }
    else // rfo_hp
    {
        // WORKAROUND - Better Resistance of the SX1262 Tx to Antenna Mismatch, see DS_SX1261-2_V1.2 datasheet chapter 15.2
        // RegTxClampConfig = @address 0x08D8
        SUBGRF_WriteRegister( REG_TX_CLAMP, SUBGRF_ReadRegister( REG_TX_CLAMP ) | ( 0x0F << 1 ) );
 80094be:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80094c2:	f000 fa59 	bl	8009978 <SUBGRF_ReadRegister>
 80094c6:	4603      	mov	r3, r0
 80094c8:	f043 031e 	orr.w	r3, r3, #30
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	4619      	mov	r1, r3
 80094d0:	f640 00d8 	movw	r0, #2264	; 0x8d8
 80094d4:	f000 fa3c 	bl	8009950 <SUBGRF_WriteRegister>
        // WORKAROUND END

        SUBGRF_SetPaConfig( 0x04, 0x07, 0x00, 0x01 );
 80094d8:	2301      	movs	r3, #1
 80094da:	2200      	movs	r2, #0
 80094dc:	2107      	movs	r1, #7
 80094de:	2004      	movs	r0, #4
 80094e0:	f7ff fed6 	bl	8009290 <SUBGRF_SetPaConfig>
        if( power > 22 )
 80094e4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80094e8:	2b16      	cmp	r3, #22
 80094ea:	dd02      	ble.n	80094f2 <SUBGRF_SetTxParams+0x96>
        {
            power = 22;
 80094ec:	2316      	movs	r3, #22
 80094ee:	71bb      	strb	r3, [r7, #6]
 80094f0:	e006      	b.n	8009500 <SUBGRF_SetTxParams+0xa4>
        }
        else if( power < -9 )
 80094f2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80094f6:	f113 0f09 	cmn.w	r3, #9
 80094fa:	da01      	bge.n	8009500 <SUBGRF_SetTxParams+0xa4>
        {
            power = -9;
 80094fc:	23f7      	movs	r3, #247	; 0xf7
 80094fe:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister( REG_OCP, 0x38 ); // current max 160mA for the whole device
 8009500:	2138      	movs	r1, #56	; 0x38
 8009502:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8009506:	f000 fa23 	bl	8009950 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 800950a:	79bb      	ldrb	r3, [r7, #6]
 800950c:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )rampTime;
 800950e:	797b      	ldrb	r3, [r7, #5]
 8009510:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_TXPARAMS, buf, 2 );
 8009512:	f107 030c 	add.w	r3, r7, #12
 8009516:	2202      	movs	r2, #2
 8009518:	4619      	mov	r1, r3
 800951a:	208e      	movs	r0, #142	; 0x8e
 800951c:	f000 fac8 	bl	8009ab0 <SUBGRF_WriteCommand>
}
 8009520:	bf00      	nop
 8009522:	3710      	adds	r7, #16
 8009524:	46bd      	mov	sp, r7
 8009526:	bd80      	pop	{r7, pc}

08009528 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 8009528:	b5b0      	push	{r4, r5, r7, lr}
 800952a:	b086      	sub	sp, #24
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 8009530:	2300      	movs	r3, #0
 8009532:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8009534:	4a5e      	ldr	r2, [pc, #376]	; (80096b0 <SUBGRF_SetModulationParams+0x188>)
 8009536:	f107 0308 	add.w	r3, r7, #8
 800953a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800953e:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	781a      	ldrb	r2, [r3, #0]
 8009546:	4b5b      	ldr	r3, [pc, #364]	; (80096b4 <SUBGRF_SetModulationParams+0x18c>)
 8009548:	781b      	ldrb	r3, [r3, #0]
 800954a:	429a      	cmp	r2, r3
 800954c:	d004      	beq.n	8009558 <SUBGRF_SetModulationParams+0x30>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	4618      	mov	r0, r3
 8009554:	f7ff ff5c 	bl	8009410 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	2b03      	cmp	r3, #3
 800955e:	f200 80a2 	bhi.w	80096a6 <SUBGRF_SetModulationParams+0x17e>
 8009562:	a201      	add	r2, pc, #4	; (adr r2, 8009568 <SUBGRF_SetModulationParams+0x40>)
 8009564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009568:	08009579 	.word	0x08009579
 800956c:	08009635 	.word	0x08009635
 8009570:	080095f7 	.word	0x080095f7
 8009574:	08009663 	.word	0x08009663
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 8009578:	2308      	movs	r3, #8
 800957a:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	4a4d      	ldr	r2, [pc, #308]	; (80096b8 <SUBGRF_SetModulationParams+0x190>)
 8009582:	fbb2 f3f3 	udiv	r3, r2, r3
 8009586:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	0c1b      	lsrs	r3, r3, #16
 800958c:	b2db      	uxtb	r3, r3
 800958e:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8009590:	697b      	ldr	r3, [r7, #20]
 8009592:	0a1b      	lsrs	r3, r3, #8
 8009594:	b2db      	uxtb	r3, r3
 8009596:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009598:	697b      	ldr	r3, [r7, #20]
 800959a:	b2db      	uxtb	r3, r3
 800959c:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	7b1b      	ldrb	r3, [r3, #12]
 80095a2:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	7b5b      	ldrb	r3, [r3, #13]
 80095a8:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	461a      	mov	r2, r3
 80095b0:	f04f 0300 	mov.w	r3, #0
 80095b4:	09d5      	lsrs	r5, r2, #7
 80095b6:	0654      	lsls	r4, r2, #25
 80095b8:	4a40      	ldr	r2, [pc, #256]	; (80096bc <SUBGRF_SetModulationParams+0x194>)
 80095ba:	f04f 0300 	mov.w	r3, #0
 80095be:	4620      	mov	r0, r4
 80095c0:	4629      	mov	r1, r5
 80095c2:	f7f6 fde1 	bl	8000188 <__aeabi_uldivmod>
 80095c6:	4602      	mov	r2, r0
 80095c8:	460b      	mov	r3, r1
 80095ca:	4613      	mov	r3, r2
 80095cc:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	0c1b      	lsrs	r3, r3, #16
 80095d2:	b2db      	uxtb	r3, r3
 80095d4:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 80095d6:	697b      	ldr	r3, [r7, #20]
 80095d8:	0a1b      	lsrs	r3, r3, #8
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 80095de:	697b      	ldr	r3, [r7, #20]
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80095e4:	7cfb      	ldrb	r3, [r7, #19]
 80095e6:	b29a      	uxth	r2, r3
 80095e8:	f107 0308 	add.w	r3, r7, #8
 80095ec:	4619      	mov	r1, r3
 80095ee:	208b      	movs	r0, #139	; 0x8b
 80095f0:	f000 fa5e 	bl	8009ab0 <SUBGRF_WriteCommand>
        break;
 80095f4:	e058      	b.n	80096a8 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_BPSK:
        n = 4;
 80095f6:	2304      	movs	r3, #4
 80095f8:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	691b      	ldr	r3, [r3, #16]
 80095fe:	4a2e      	ldr	r2, [pc, #184]	; (80096b8 <SUBGRF_SetModulationParams+0x190>)
 8009600:	fbb2 f3f3 	udiv	r3, r2, r3
 8009604:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	0c1b      	lsrs	r3, r3, #16
 800960a:	b2db      	uxtb	r3, r3
 800960c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	0a1b      	lsrs	r3, r3, #8
 8009612:	b2db      	uxtb	r3, r3
 8009614:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009616:	697b      	ldr	r3, [r7, #20]
 8009618:	b2db      	uxtb	r3, r3
 800961a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	7d1b      	ldrb	r3, [r3, #20]
 8009620:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009622:	7cfb      	ldrb	r3, [r7, #19]
 8009624:	b29a      	uxth	r2, r3
 8009626:	f107 0308 	add.w	r3, r7, #8
 800962a:	4619      	mov	r1, r3
 800962c:	208b      	movs	r0, #139	; 0x8b
 800962e:	f000 fa3f 	bl	8009ab0 <SUBGRF_WriteCommand>
        break;
 8009632:	e039      	b.n	80096a8 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_LORA:
        n = 4;
 8009634:	2304      	movs	r3, #4
 8009636:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	7e1b      	ldrb	r3, [r3, #24]
 800963c:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	7e5b      	ldrb	r3, [r3, #25]
 8009642:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	7e9b      	ldrb	r3, [r3, #26]
 8009648:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	7edb      	ldrb	r3, [r3, #27]
 800964e:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009650:	7cfb      	ldrb	r3, [r7, #19]
 8009652:	b29a      	uxth	r2, r3
 8009654:	f107 0308 	add.w	r3, r7, #8
 8009658:	4619      	mov	r1, r3
 800965a:	208b      	movs	r0, #139	; 0x8b
 800965c:	f000 fa28 	bl	8009ab0 <SUBGRF_WriteCommand>

        break;
 8009660:	e022      	b.n	80096a8 <SUBGRF_SetModulationParams+0x180>
    case PACKET_TYPE_GMSK:
        n = 5;
 8009662:	2305      	movs	r3, #5
 8009664:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	685b      	ldr	r3, [r3, #4]
 800966a:	4a13      	ldr	r2, [pc, #76]	; (80096b8 <SUBGRF_SetModulationParams+0x190>)
 800966c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009670:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	0c1b      	lsrs	r3, r3, #16
 8009676:	b2db      	uxtb	r3, r3
 8009678:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	0a1b      	lsrs	r3, r3, #8
 800967e:	b2db      	uxtb	r3, r3
 8009680:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	b2db      	uxtb	r3, r3
 8009686:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	7b1b      	ldrb	r3, [r3, #12]
 800968c:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	7b5b      	ldrb	r3, [r3, #13]
 8009692:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8009694:	7cfb      	ldrb	r3, [r7, #19]
 8009696:	b29a      	uxth	r2, r3
 8009698:	f107 0308 	add.w	r3, r7, #8
 800969c:	4619      	mov	r1, r3
 800969e:	208b      	movs	r0, #139	; 0x8b
 80096a0:	f000 fa06 	bl	8009ab0 <SUBGRF_WriteCommand>
        break;
 80096a4:	e000      	b.n	80096a8 <SUBGRF_SetModulationParams+0x180>
    default:
    case PACKET_TYPE_NONE:
      break;
 80096a6:	bf00      	nop
    }
}
 80096a8:	bf00      	nop
 80096aa:	3718      	adds	r7, #24
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bdb0      	pop	{r4, r5, r7, pc}
 80096b0:	0800bcc8 	.word	0x0800bcc8
 80096b4:	2000014d 	.word	0x2000014d
 80096b8:	3d090000 	.word	0x3d090000
 80096bc:	01e84800 	.word	0x01e84800

080096c0 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b086      	sub	sp, #24
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 80096c8:	2300      	movs	r3, #0
 80096ca:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80096cc:	4a48      	ldr	r2, [pc, #288]	; (80097f0 <SUBGRF_SetPacketParams+0x130>)
 80096ce:	f107 030c 	add.w	r3, r7, #12
 80096d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80096d4:	c303      	stmia	r3!, {r0, r1}
 80096d6:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	781a      	ldrb	r2, [r3, #0]
 80096dc:	4b45      	ldr	r3, [pc, #276]	; (80097f4 <SUBGRF_SetPacketParams+0x134>)
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d004      	beq.n	80096ee <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	781b      	ldrb	r3, [r3, #0]
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7ff fe91 	bl	8009410 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	2b03      	cmp	r3, #3
 80096f4:	d878      	bhi.n	80097e8 <SUBGRF_SetPacketParams+0x128>
 80096f6:	a201      	add	r2, pc, #4	; (adr r2, 80096fc <SUBGRF_SetPacketParams+0x3c>)
 80096f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096fc:	0800970d 	.word	0x0800970d
 8009700:	0800979d 	.word	0x0800979d
 8009704:	08009791 	.word	0x08009791
 8009708:	0800970d 	.word	0x0800970d
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	7a5b      	ldrb	r3, [r3, #9]
 8009710:	2bf1      	cmp	r3, #241	; 0xf1
 8009712:	d10a      	bne.n	800972a <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8009714:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8009718:	f7ff fb20 	bl	8008d5c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 800971c:	f248 0005 	movw	r0, #32773	; 0x8005
 8009720:	f7ff fb3c 	bl	8008d9c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8009724:	2302      	movs	r3, #2
 8009726:	75bb      	strb	r3, [r7, #22]
 8009728:	e011      	b.n	800974e <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	7a5b      	ldrb	r3, [r3, #9]
 800972e:	2bf2      	cmp	r3, #242	; 0xf2
 8009730:	d10a      	bne.n	8009748 <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8009732:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8009736:	f7ff fb11 	bl	8008d5c <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 800973a:	f241 0021 	movw	r0, #4129	; 0x1021
 800973e:	f7ff fb2d 	bl	8008d9c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8009742:	2306      	movs	r3, #6
 8009744:	75bb      	strb	r3, [r7, #22]
 8009746:	e002      	b.n	800974e <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	7a5b      	ldrb	r3, [r3, #9]
 800974c:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 800974e:	2309      	movs	r3, #9
 8009750:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	885b      	ldrh	r3, [r3, #2]
 8009756:	0a1b      	lsrs	r3, r3, #8
 8009758:	b29b      	uxth	r3, r3
 800975a:	b2db      	uxtb	r3, r3
 800975c:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	885b      	ldrh	r3, [r3, #2]
 8009762:	b2db      	uxtb	r3, r3
 8009764:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	791b      	ldrb	r3, [r3, #4]
 800976a:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	795b      	ldrb	r3, [r3, #5]
 8009770:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	799b      	ldrb	r3, [r3, #6]
 8009776:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	79db      	ldrb	r3, [r3, #7]
 800977c:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	7a1b      	ldrb	r3, [r3, #8]
 8009782:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8009784:	7dbb      	ldrb	r3, [r7, #22]
 8009786:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	7a9b      	ldrb	r3, [r3, #10]
 800978c:	753b      	strb	r3, [r7, #20]
        break;
 800978e:	e022      	b.n	80097d6 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8009790:	2301      	movs	r3, #1
 8009792:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	7b1b      	ldrb	r3, [r3, #12]
 8009798:	733b      	strb	r3, [r7, #12]
        break;
 800979a:	e01c      	b.n	80097d6 <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 800979c:	2306      	movs	r3, #6
 800979e:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	89db      	ldrh	r3, [r3, #14]
 80097a4:	0a1b      	lsrs	r3, r3, #8
 80097a6:	b29b      	uxth	r3, r3
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	89db      	ldrh	r3, [r3, #14]
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	7c1a      	ldrb	r2, [r3, #16]
 80097b8:	4b0f      	ldr	r3, [pc, #60]	; (80097f8 <SUBGRF_SetPacketParams+0x138>)
 80097ba:	4611      	mov	r1, r2
 80097bc:	7019      	strb	r1, [r3, #0]
 80097be:	4613      	mov	r3, r2
 80097c0:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	7c5b      	ldrb	r3, [r3, #17]
 80097c6:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	7c9b      	ldrb	r3, [r3, #18]
 80097cc:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	7cdb      	ldrb	r3, [r3, #19]
 80097d2:	747b      	strb	r3, [r7, #17]
        break;
 80097d4:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 80097d6:	7dfb      	ldrb	r3, [r7, #23]
 80097d8:	b29a      	uxth	r2, r3
 80097da:	f107 030c 	add.w	r3, r7, #12
 80097de:	4619      	mov	r1, r3
 80097e0:	208c      	movs	r0, #140	; 0x8c
 80097e2:	f000 f965 	bl	8009ab0 <SUBGRF_WriteCommand>
 80097e6:	e000      	b.n	80097ea <SUBGRF_SetPacketParams+0x12a>
        return;
 80097e8:	bf00      	nop
}
 80097ea:	3718      	adds	r7, #24
 80097ec:	46bd      	mov	sp, r7
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	0800bcd0 	.word	0x0800bcd0
 80097f4:	2000014d 	.word	0x2000014d
 80097f8:	2000014e 	.word	0x2000014e

080097fc <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b084      	sub	sp, #16
 8009800:	af00      	add	r7, sp, #0
 8009802:	4603      	mov	r3, r0
 8009804:	460a      	mov	r2, r1
 8009806:	71fb      	strb	r3, [r7, #7]
 8009808:	4613      	mov	r3, r2
 800980a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 800980c:	79fb      	ldrb	r3, [r7, #7]
 800980e:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8009810:	79bb      	ldrb	r3, [r7, #6]
 8009812:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8009814:	f107 030c 	add.w	r3, r7, #12
 8009818:	2202      	movs	r2, #2
 800981a:	4619      	mov	r1, r3
 800981c:	208f      	movs	r0, #143	; 0x8f
 800981e:	f000 f947 	bl	8009ab0 <SUBGRF_WriteCommand>
}
 8009822:	bf00      	nop
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}

0800982a <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 800982a:	b580      	push	{r7, lr}
 800982c:	b082      	sub	sp, #8
 800982e:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 8009830:	2300      	movs	r3, #0
 8009832:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8009834:	1d3b      	adds	r3, r7, #4
 8009836:	2201      	movs	r2, #1
 8009838:	4619      	mov	r1, r3
 800983a:	2015      	movs	r0, #21
 800983c:	f000 f95a 	bl	8009af4 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8009840:	793b      	ldrb	r3, [r7, #4]
 8009842:	425b      	negs	r3, r3
 8009844:	105b      	asrs	r3, r3, #1
 8009846:	71fb      	strb	r3, [r7, #7]
    return rssi;
 8009848:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800984c:	4618      	mov	r0, r3
 800984e:	3708      	adds	r7, #8
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}

08009854 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b084      	sub	sp, #16
 8009858:	af00      	add	r7, sp, #0
 800985a:	6078      	str	r0, [r7, #4]
 800985c:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 800985e:	f107 030c 	add.w	r3, r7, #12
 8009862:	2202      	movs	r2, #2
 8009864:	4619      	mov	r1, r3
 8009866:	2013      	movs	r0, #19
 8009868:	f000 f944 	bl	8009af4 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 800986c:	f7ff fdec 	bl	8009448 <SUBGRF_GetPacketType>
 8009870:	4603      	mov	r3, r0
 8009872:	2b01      	cmp	r3, #1
 8009874:	d10d      	bne.n	8009892 <SUBGRF_GetRxBufferStatus+0x3e>
 8009876:	4b0c      	ldr	r3, [pc, #48]	; (80098a8 <SUBGRF_GetRxBufferStatus+0x54>)
 8009878:	781b      	ldrb	r3, [r3, #0]
 800987a:	b2db      	uxtb	r3, r3
 800987c:	2b01      	cmp	r3, #1
 800987e:	d108      	bne.n	8009892 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8009880:	f240 7002 	movw	r0, #1794	; 0x702
 8009884:	f000 f878 	bl	8009978 <SUBGRF_ReadRegister>
 8009888:	4603      	mov	r3, r0
 800988a:	461a      	mov	r2, r3
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	701a      	strb	r2, [r3, #0]
 8009890:	e002      	b.n	8009898 <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8009892:	7b3a      	ldrb	r2, [r7, #12]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 8009898:	7b7a      	ldrb	r2, [r7, #13]
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	701a      	strb	r2, [r3, #0]
}
 800989e:	bf00      	nop
 80098a0:	3710      	adds	r7, #16
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}
 80098a6:	bf00      	nop
 80098a8:	2000014e 	.word	0x2000014e

080098ac <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 80098b4:	f107 030c 	add.w	r3, r7, #12
 80098b8:	2203      	movs	r2, #3
 80098ba:	4619      	mov	r1, r3
 80098bc:	2014      	movs	r0, #20
 80098be:	f000 f919 	bl	8009af4 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 80098c2:	f7ff fdc1 	bl	8009448 <SUBGRF_GetPacketType>
 80098c6:	4603      	mov	r3, r0
 80098c8:	461a      	mov	r2, r3
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d002      	beq.n	80098dc <SUBGRF_GetPacketStatus+0x30>
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	d013      	beq.n	8009902 <SUBGRF_GetPacketStatus+0x56>
 80098da:	e02a      	b.n	8009932 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 80098dc:	7b3a      	ldrb	r2, [r7, #12]
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 80098e2:	7b7b      	ldrb	r3, [r7, #13]
 80098e4:	425b      	negs	r3, r3
 80098e6:	105b      	asrs	r3, r3, #1
 80098e8:	b25a      	sxtb	r2, r3
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 80098ee:	7bbb      	ldrb	r3, [r7, #14]
 80098f0:	425b      	negs	r3, r3
 80098f2:	105b      	asrs	r3, r3, #1
 80098f4:	b25a      	sxtb	r2, r3
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2200      	movs	r2, #0
 80098fe:	609a      	str	r2, [r3, #8]
            break;
 8009900:	e020      	b.n	8009944 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8009902:	7b3b      	ldrb	r3, [r7, #12]
 8009904:	425b      	negs	r3, r3
 8009906:	105b      	asrs	r3, r3, #1
 8009908:	b25a      	sxtb	r2, r3
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 800990e:	7b7b      	ldrb	r3, [r7, #13]
 8009910:	b25b      	sxtb	r3, r3
 8009912:	3302      	adds	r3, #2
 8009914:	109b      	asrs	r3, r3, #2
 8009916:	b25a      	sxtb	r2, r3
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 800991c:	7bbb      	ldrb	r3, [r7, #14]
 800991e:	425b      	negs	r3, r3
 8009920:	105b      	asrs	r3, r3, #1
 8009922:	b25a      	sxtb	r2, r3
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8009928:	4b08      	ldr	r3, [pc, #32]	; (800994c <SUBGRF_GetPacketStatus+0xa0>)
 800992a:	681a      	ldr	r2, [r3, #0]
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	611a      	str	r2, [r3, #16]
            break;
 8009930:	e008      	b.n	8009944 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8009932:	2214      	movs	r2, #20
 8009934:	2100      	movs	r1, #0
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f000 ff88 	bl	800a84c <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	220f      	movs	r2, #15
 8009940:	701a      	strb	r2, [r3, #0]
            break;
 8009942:	bf00      	nop
    }
}
 8009944:	bf00      	nop
 8009946:	3710      	adds	r7, #16
 8009948:	46bd      	mov	sp, r7
 800994a:	bd80      	pop	{r7, pc}
 800994c:	20000150 	.word	0x20000150

08009950 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
 8009956:	4603      	mov	r3, r0
 8009958:	460a      	mov	r2, r1
 800995a:	80fb      	strh	r3, [r7, #6]
 800995c:	4613      	mov	r3, r2
 800995e:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8009960:	1d7a      	adds	r2, r7, #5
 8009962:	88f9      	ldrh	r1, [r7, #6]
 8009964:	2301      	movs	r3, #1
 8009966:	4803      	ldr	r0, [pc, #12]	; (8009974 <SUBGRF_WriteRegister+0x24>)
 8009968:	f7fa fd8e 	bl	8004488 <HAL_SUBGHZ_WriteRegisters>
}
 800996c:	bf00      	nop
 800996e:	3708      	adds	r7, #8
 8009970:	46bd      	mov	sp, r7
 8009972:	bd80      	pop	{r7, pc}
 8009974:	20000760 	.word	0x20000760

08009978 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b084      	sub	sp, #16
 800997c:	af00      	add	r7, sp, #0
 800997e:	4603      	mov	r3, r0
 8009980:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8009982:	f107 020f 	add.w	r2, r7, #15
 8009986:	88f9      	ldrh	r1, [r7, #6]
 8009988:	2301      	movs	r3, #1
 800998a:	4804      	ldr	r0, [pc, #16]	; (800999c <SUBGRF_ReadRegister+0x24>)
 800998c:	f7fa fddb 	bl	8004546 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8009990:	7bfb      	ldrb	r3, [r7, #15]
}
 8009992:	4618      	mov	r0, r3
 8009994:	3710      	adds	r7, #16
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	20000760 	.word	0x20000760

080099a0 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b086      	sub	sp, #24
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	4603      	mov	r3, r0
 80099a8:	6039      	str	r1, [r7, #0]
 80099aa:	80fb      	strh	r3, [r7, #6]
 80099ac:	4613      	mov	r3, r2
 80099ae:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099b0:	f3ef 8310 	mrs	r3, PRIMASK
 80099b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80099b6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80099b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80099ba:	b672      	cpsid	i
}
 80099bc:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 80099be:	88bb      	ldrh	r3, [r7, #4]
 80099c0:	88f9      	ldrh	r1, [r7, #6]
 80099c2:	683a      	ldr	r2, [r7, #0]
 80099c4:	4806      	ldr	r0, [pc, #24]	; (80099e0 <SUBGRF_WriteRegisters+0x40>)
 80099c6:	f7fa fd5f 	bl	8004488 <HAL_SUBGHZ_WriteRegisters>
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	f383 8810 	msr	PRIMASK, r3
}
 80099d4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80099d6:	bf00      	nop
 80099d8:	3718      	adds	r7, #24
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop
 80099e0:	20000760 	.word	0x20000760

080099e4 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b086      	sub	sp, #24
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	4603      	mov	r3, r0
 80099ec:	6039      	str	r1, [r7, #0]
 80099ee:	80fb      	strh	r3, [r7, #6]
 80099f0:	4613      	mov	r3, r2
 80099f2:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80099f4:	f3ef 8310 	mrs	r3, PRIMASK
 80099f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80099fa:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80099fc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80099fe:	b672      	cpsid	i
}
 8009a00:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8009a02:	88bb      	ldrh	r3, [r7, #4]
 8009a04:	88f9      	ldrh	r1, [r7, #6]
 8009a06:	683a      	ldr	r2, [r7, #0]
 8009a08:	4806      	ldr	r0, [pc, #24]	; (8009a24 <SUBGRF_ReadRegisters+0x40>)
 8009a0a:	f7fa fd9c 	bl	8004546 <HAL_SUBGHZ_ReadRegisters>
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a12:	693b      	ldr	r3, [r7, #16]
 8009a14:	f383 8810 	msr	PRIMASK, r3
}
 8009a18:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009a1a:	bf00      	nop
 8009a1c:	3718      	adds	r7, #24
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop
 8009a24:	20000760 	.word	0x20000760

08009a28 <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b086      	sub	sp, #24
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	4603      	mov	r3, r0
 8009a30:	6039      	str	r1, [r7, #0]
 8009a32:	71fb      	strb	r3, [r7, #7]
 8009a34:	4613      	mov	r3, r2
 8009a36:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a38:	f3ef 8310 	mrs	r3, PRIMASK
 8009a3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8009a3e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009a40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009a42:	b672      	cpsid	i
}
 8009a44:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8009a46:	79bb      	ldrb	r3, [r7, #6]
 8009a48:	b29b      	uxth	r3, r3
 8009a4a:	79f9      	ldrb	r1, [r7, #7]
 8009a4c:	683a      	ldr	r2, [r7, #0]
 8009a4e:	4806      	ldr	r0, [pc, #24]	; (8009a68 <SUBGRF_WriteBuffer+0x40>)
 8009a50:	f7fa fe8d 	bl	800476e <HAL_SUBGHZ_WriteBuffer>
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a58:	693b      	ldr	r3, [r7, #16]
 8009a5a:	f383 8810 	msr	PRIMASK, r3
}
 8009a5e:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009a60:	bf00      	nop
 8009a62:	3718      	adds	r7, #24
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}
 8009a68:	20000760 	.word	0x20000760

08009a6c <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b086      	sub	sp, #24
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	4603      	mov	r3, r0
 8009a74:	6039      	str	r1, [r7, #0]
 8009a76:	71fb      	strb	r3, [r7, #7]
 8009a78:	4613      	mov	r3, r2
 8009a7a:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a7c:	f3ef 8310 	mrs	r3, PRIMASK
 8009a80:	60fb      	str	r3, [r7, #12]
  return(result);
 8009a82:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009a84:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009a86:	b672      	cpsid	i
}
 8009a88:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8009a8a:	79bb      	ldrb	r3, [r7, #6]
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	79f9      	ldrb	r1, [r7, #7]
 8009a90:	683a      	ldr	r2, [r7, #0]
 8009a92:	4806      	ldr	r0, [pc, #24]	; (8009aac <SUBGRF_ReadBuffer+0x40>)
 8009a94:	f7fa febe 	bl	8004814 <HAL_SUBGHZ_ReadBuffer>
 8009a98:	697b      	ldr	r3, [r7, #20]
 8009a9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a9c:	693b      	ldr	r3, [r7, #16]
 8009a9e:	f383 8810 	msr	PRIMASK, r3
}
 8009aa2:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009aa4:	bf00      	nop
 8009aa6:	3718      	adds	r7, #24
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}
 8009aac:	20000760 	.word	0x20000760

08009ab0 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b086      	sub	sp, #24
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	6039      	str	r1, [r7, #0]
 8009aba:	71fb      	strb	r3, [r7, #7]
 8009abc:	4613      	mov	r3, r2
 8009abe:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009ac0:	f3ef 8310 	mrs	r3, PRIMASK
 8009ac4:	60fb      	str	r3, [r7, #12]
  return(result);
 8009ac6:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009ac8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009aca:	b672      	cpsid	i
}
 8009acc:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8009ace:	88bb      	ldrh	r3, [r7, #4]
 8009ad0:	79f9      	ldrb	r1, [r7, #7]
 8009ad2:	683a      	ldr	r2, [r7, #0]
 8009ad4:	4806      	ldr	r0, [pc, #24]	; (8009af0 <SUBGRF_WriteCommand+0x40>)
 8009ad6:	f7fa fd97 	bl	8004608 <HAL_SUBGHZ_ExecSetCmd>
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ade:	693b      	ldr	r3, [r7, #16]
 8009ae0:	f383 8810 	msr	PRIMASK, r3
}
 8009ae4:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009ae6:	bf00      	nop
 8009ae8:	3718      	adds	r7, #24
 8009aea:	46bd      	mov	sp, r7
 8009aec:	bd80      	pop	{r7, pc}
 8009aee:	bf00      	nop
 8009af0:	20000760 	.word	0x20000760

08009af4 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b086      	sub	sp, #24
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	4603      	mov	r3, r0
 8009afc:	6039      	str	r1, [r7, #0]
 8009afe:	71fb      	strb	r3, [r7, #7]
 8009b00:	4613      	mov	r3, r2
 8009b02:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b04:	f3ef 8310 	mrs	r3, PRIMASK
 8009b08:	60fb      	str	r3, [r7, #12]
  return(result);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8009b0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b0e:	b672      	cpsid	i
}
 8009b10:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8009b12:	88bb      	ldrh	r3, [r7, #4]
 8009b14:	79f9      	ldrb	r1, [r7, #7]
 8009b16:	683a      	ldr	r2, [r7, #0]
 8009b18:	4806      	ldr	r0, [pc, #24]	; (8009b34 <SUBGRF_ReadCommand+0x40>)
 8009b1a:	f7fa fdd4 	bl	80046c6 <HAL_SUBGHZ_ExecGetCmd>
 8009b1e:	697b      	ldr	r3, [r7, #20]
 8009b20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b22:	693b      	ldr	r3, [r7, #16]
 8009b24:	f383 8810 	msr	PRIMASK, r3
}
 8009b28:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8009b2a:	bf00      	nop
 8009b2c:	3718      	adds	r7, #24
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	20000760 	.word	0x20000760

08009b38 <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	4603      	mov	r3, r0
 8009b40:	460a      	mov	r2, r1
 8009b42:	71fb      	strb	r3, [r7, #7]
 8009b44:	4613      	mov	r3, r2
 8009b46:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8009b4c:	79bb      	ldrb	r3, [r7, #6]
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d10d      	bne.n	8009b6e <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8009b52:	79fb      	ldrb	r3, [r7, #7]
 8009b54:	2b01      	cmp	r3, #1
 8009b56:	d104      	bne.n	8009b62 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8009b58:	2302      	movs	r3, #2
 8009b5a:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8009b5c:	2004      	movs	r0, #4
 8009b5e:	f000 f8df 	bl	8009d20 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8009b62:	79fb      	ldrb	r3, [r7, #7]
 8009b64:	2b02      	cmp	r3, #2
 8009b66:	d107      	bne.n	8009b78 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8009b68:	2303      	movs	r3, #3
 8009b6a:	73fb      	strb	r3, [r7, #15]
 8009b6c:	e004      	b.n	8009b78 <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8009b6e:	79bb      	ldrb	r3, [r7, #6]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d101      	bne.n	8009b78 <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8009b74:	2301      	movs	r3, #1
 8009b76:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8009b78:	7bfb      	ldrb	r3, [r7, #15]
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	f000 fd5c 	bl	800a638 <RBI_ConfigRFSwitch>
}
 8009b80:	bf00      	nop
 8009b82:	3710      	adds	r7, #16
 8009b84:	46bd      	mov	sp, r7
 8009b86:	bd80      	pop	{r7, pc}

08009b88 <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power ) 
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b084      	sub	sp, #16
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	4603      	mov	r3, r0
 8009b90:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8009b92:	2301      	movs	r3, #1
 8009b94:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8009b96:	f000 fd9d 	bl	800a6d4 <RBI_GetTxConfig>
 8009b9a:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	2b02      	cmp	r3, #2
 8009ba0:	d016      	beq.n	8009bd0 <SUBGRF_SetRfTxPower+0x48>
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	2b02      	cmp	r3, #2
 8009ba6:	dc16      	bgt.n	8009bd6 <SUBGRF_SetRfTxPower+0x4e>
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d003      	beq.n	8009bb6 <SUBGRF_SetRfTxPower+0x2e>
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d00a      	beq.n	8009bca <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8009bb4:	e00f      	b.n	8009bd6 <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8009bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bba:	2b0f      	cmp	r3, #15
 8009bbc:	dd02      	ble.n	8009bc4 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8009bbe:	2302      	movs	r3, #2
 8009bc0:	73fb      	strb	r3, [r7, #15]
            break;
 8009bc2:	e009      	b.n	8009bd8 <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8009bc4:	2301      	movs	r3, #1
 8009bc6:	73fb      	strb	r3, [r7, #15]
            break;
 8009bc8:	e006      	b.n	8009bd8 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8009bca:	2301      	movs	r3, #1
 8009bcc:	73fb      	strb	r3, [r7, #15]
            break;
 8009bce:	e003      	b.n	8009bd8 <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8009bd0:	2302      	movs	r3, #2
 8009bd2:	73fb      	strb	r3, [r7, #15]
            break;
 8009bd4:	e000      	b.n	8009bd8 <SUBGRF_SetRfTxPower+0x50>
            break;
 8009bd6:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8009bd8:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8009bdc:	7bfb      	ldrb	r3, [r7, #15]
 8009bde:	2202      	movs	r2, #2
 8009be0:	4618      	mov	r0, r3
 8009be2:	f7ff fc3b 	bl	800945c <SUBGRF_SetTxParams>

    return paSelect;
 8009be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009be8:	4618      	mov	r0, r3
 8009bea:	3710      	adds	r7, #16
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}

08009bf0 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8009bf4:	230a      	movs	r3, #10
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bc80      	pop	{r7}
 8009bfc:	4770      	bx	lr
	...

08009c00 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */ 
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b082      	sub	sp, #8
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8009c08:	4b03      	ldr	r3, [pc, #12]	; (8009c18 <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	2001      	movs	r0, #1
 8009c0e:	4798      	blx	r3
}
 8009c10:	bf00      	nop
 8009c12:	3708      	adds	r7, #8
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}
 8009c18:	20000158 	.word	0x20000158

08009c1c <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b082      	sub	sp, #8
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8009c24:	4b03      	ldr	r3, [pc, #12]	; (8009c34 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	2002      	movs	r0, #2
 8009c2a:	4798      	blx	r3
}
 8009c2c:	bf00      	nop
 8009c2e:	3708      	adds	r7, #8
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}
 8009c34:	20000158 	.word	0x20000158

08009c38 <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b082      	sub	sp, #8
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8009c40:	4b03      	ldr	r3, [pc, #12]	; (8009c50 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	2040      	movs	r0, #64	; 0x40
 8009c46:	4798      	blx	r3
}
 8009c48:	bf00      	nop
 8009c4a:	3708      	adds	r7, #8
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	bd80      	pop	{r7, pc}
 8009c50:	20000158 	.word	0x20000158

08009c54 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8009c60:	78fb      	ldrb	r3, [r7, #3]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d002      	beq.n	8009c6c <HAL_SUBGHZ_CADStatusCallback+0x18>
 8009c66:	2b01      	cmp	r3, #1
 8009c68:	d005      	beq.n	8009c76 <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8009c6a:	e00a      	b.n	8009c82 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8009c6c:	4b07      	ldr	r3, [pc, #28]	; (8009c8c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	2080      	movs	r0, #128	; 0x80
 8009c72:	4798      	blx	r3
            break;
 8009c74:	e005      	b.n	8009c82 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8009c76:	4b05      	ldr	r3, [pc, #20]	; (8009c8c <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f44f 7080 	mov.w	r0, #256	; 0x100
 8009c7e:	4798      	blx	r3
            break;
 8009c80:	bf00      	nop
    }
}
 8009c82:	bf00      	nop
 8009c84:	3708      	adds	r7, #8
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	20000158 	.word	0x20000158

08009c90 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b082      	sub	sp, #8
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8009c98:	4b04      	ldr	r3, [pc, #16]	; (8009cac <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009ca0:	4798      	blx	r3
}
 8009ca2:	bf00      	nop
 8009ca4:	3708      	adds	r7, #8
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}
 8009caa:	bf00      	nop
 8009cac:	20000158 	.word	0x20000158

08009cb0 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b082      	sub	sp, #8
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8009cb8:	4b03      	ldr	r3, [pc, #12]	; (8009cc8 <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	2020      	movs	r0, #32
 8009cbe:	4798      	blx	r3
}
 8009cc0:	bf00      	nop
 8009cc2:	3708      	adds	r7, #8
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}
 8009cc8:	20000158 	.word	0x20000158

08009ccc <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b082      	sub	sp, #8
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8009cd4:	4b03      	ldr	r3, [pc, #12]	; (8009ce4 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2004      	movs	r0, #4
 8009cda:	4798      	blx	r3
}
 8009cdc:	bf00      	nop
 8009cde:	3708      	adds	r7, #8
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	bd80      	pop	{r7, pc}
 8009ce4:	20000158 	.word	0x20000158

08009ce8 <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8009cf0:	4b03      	ldr	r3, [pc, #12]	; (8009d00 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	2008      	movs	r0, #8
 8009cf6:	4798      	blx	r3
}
 8009cf8:	bf00      	nop
 8009cfa:	3708      	adds	r7, #8
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}
 8009d00:	20000158 	.word	0x20000158

08009d04 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b082      	sub	sp, #8
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8009d0c:	4b03      	ldr	r3, [pc, #12]	; (8009d1c <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	2010      	movs	r0, #16
 8009d12:	4798      	blx	r3
}
 8009d14:	bf00      	nop
 8009d16:	3708      	adds	r7, #8
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}
 8009d1c:	20000158 	.word	0x20000158

08009d20 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b084      	sub	sp, #16
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	4603      	mov	r3, r0
 8009d28:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8009d2a:	f000 fce1 	bl	800a6f0 <RBI_IsDCDC>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	2b01      	cmp	r3, #1
 8009d32:	d112      	bne.n	8009d5a <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8009d34:	f640 1023 	movw	r0, #2339	; 0x923
 8009d38:	f7ff fe1e 	bl	8009978 <SUBGRF_ReadRegister>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8009d40:	7bfb      	ldrb	r3, [r7, #15]
 8009d42:	f023 0306 	bic.w	r3, r3, #6
 8009d46:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8009d48:	7bfa      	ldrb	r2, [r7, #15]
 8009d4a:	79fb      	ldrb	r3, [r7, #7]
 8009d4c:	4313      	orrs	r3, r2
 8009d4e:	b2db      	uxtb	r3, r3
 8009d50:	4619      	mov	r1, r3
 8009d52:	f640 1023 	movw	r0, #2339	; 0x923
 8009d56:	f7ff fdfb 	bl	8009950 <SUBGRF_WriteRegister>
  }
}
 8009d5a:	bf00      	nop
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
	...

08009d64 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8009d64:	b480      	push	{r7}
 8009d66:	b085      	sub	sp, #20
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d101      	bne.n	8009d76 <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 8009d72:	231f      	movs	r3, #31
 8009d74:	e016      	b.n	8009da4 <SUBGRF_GetFskBandwidthRegValue+0x40>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8009d76:	2300      	movs	r3, #0
 8009d78:	73fb      	strb	r3, [r7, #15]
 8009d7a:	e00f      	b.n	8009d9c <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8009d7c:	7bfb      	ldrb	r3, [r7, #15]
 8009d7e:	4a0c      	ldr	r2, [pc, #48]	; (8009db0 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8009d80:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	429a      	cmp	r2, r3
 8009d88:	d205      	bcs.n	8009d96 <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 8009d8a:	7bfb      	ldrb	r3, [r7, #15]
 8009d8c:	4a08      	ldr	r2, [pc, #32]	; (8009db0 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8009d8e:	00db      	lsls	r3, r3, #3
 8009d90:	4413      	add	r3, r2
 8009d92:	791b      	ldrb	r3, [r3, #4]
 8009d94:	e006      	b.n	8009da4 <SUBGRF_GetFskBandwidthRegValue+0x40>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8009d96:	7bfb      	ldrb	r3, [r7, #15]
 8009d98:	3301      	adds	r3, #1
 8009d9a:	73fb      	strb	r3, [r7, #15]
 8009d9c:	7bfb      	ldrb	r3, [r7, #15]
 8009d9e:	2b15      	cmp	r3, #21
 8009da0:	d9ec      	bls.n	8009d7c <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 8009da2:	e7fe      	b.n	8009da2 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3714      	adds	r7, #20
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bc80      	pop	{r7}
 8009dac:	4770      	bx	lr
 8009dae:	bf00      	nop
 8009db0:	0800c07c 	.word	0x0800c07c

08009db4 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b08a      	sub	sp, #40	; 0x28
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 8009dbe:	4b36      	ldr	r3, [pc, #216]	; (8009e98 <SUBGRF_GetCFO+0xe4>)
 8009dc0:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSEL ));
 8009dc2:	f640 0007 	movw	r0, #2055	; 0x807
 8009dc6:	f7ff fdd7 	bl	8009978 <SUBGRF_ReadRegister>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8009dce:	7ffb      	ldrb	r3, [r7, #31]
 8009dd0:	08db      	lsrs	r3, r3, #3
 8009dd2:	b2db      	uxtb	r3, r3
 8009dd4:	f003 0303 	and.w	r3, r3, #3
 8009dd8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009ddc:	4413      	add	r3, r2
 8009dde:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8009de2:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8009de4:	7ffb      	ldrb	r3, [r7, #31]
 8009de6:	f003 0307 	and.w	r3, r3, #7
 8009dea:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8009dec:	7fba      	ldrb	r2, [r7, #30]
 8009dee:	7f7b      	ldrb	r3, [r7, #29]
 8009df0:	3b01      	subs	r3, #1
 8009df2:	fa02 f303 	lsl.w	r3, r2, r3
 8009df6:	461a      	mov	r2, r3
 8009df8:	4b28      	ldr	r3, [pc, #160]	; (8009e9c <SUBGRF_GetCFO+0xe8>)
 8009dfa:	fbb3 f3f2 	udiv	r3, r3, r2
 8009dfe:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 8009e00:	69ba      	ldr	r2, [r7, #24]
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8009e08:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8009e10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e14:	697a      	ldr	r2, [r7, #20]
 8009e16:	fb02 f303 	mul.w	r3, r2, r3
 8009e1a:	2b07      	cmp	r3, #7
 8009e1c:	d802      	bhi.n	8009e24 <SUBGRF_GetCFO+0x70>
  {
    interp = 2;
 8009e1e:	2302      	movs	r3, #2
 8009e20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  if (cf_osr * interp < 4)
 8009e24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009e28:	697a      	ldr	r2, [r7, #20]
 8009e2a:	fb02 f303 	mul.w	r3, r2, r3
 8009e2e:	2b03      	cmp	r3, #3
 8009e30:	d802      	bhi.n	8009e38 <SUBGRF_GetCFO+0x84>
  {
    interp = 4;
 8009e32:	2304      	movs	r3, #4
 8009e34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8009e38:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8009e3c:	69bb      	ldr	r3, [r7, #24]
 8009e3e:	fb02 f303 	mul.w	r3, r2, r3
 8009e42:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_CFO_H ) & 0xF ) << 8;
 8009e44:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 8009e48:	f7ff fd96 	bl	8009978 <SUBGRF_ReadRegister>
 8009e4c:	4603      	mov	r3, r0
 8009e4e:	021b      	lsls	r3, r3, #8
 8009e50:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009e54:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_CFO_L );
 8009e56:	f240 60b1 	movw	r0, #1713	; 0x6b1
 8009e5a:	f7ff fd8d 	bl	8009978 <SUBGRF_ReadRegister>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	461a      	mov	r2, r3
 8009e62:	6a3b      	ldr	r3, [r7, #32]
 8009e64:	4313      	orrs	r3, r2
 8009e66:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8009e68:	6a3b      	ldr	r3, [r7, #32]
 8009e6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d005      	beq.n	8009e7e <SUBGRF_GetCFO+0xca>
  {
    cfo_bin |= 0xFFFFF000;
 8009e72:	6a3b      	ldr	r3, [r7, #32]
 8009e74:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8009e78:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8009e7c:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	095b      	lsrs	r3, r3, #5
 8009e82:	6a3a      	ldr	r2, [r7, #32]
 8009e84:	fb02 f303 	mul.w	r3, r2, r3
 8009e88:	11da      	asrs	r2, r3, #7
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	601a      	str	r2, [r3, #0]
}
 8009e8e:	bf00      	nop
 8009e90:	3728      	adds	r7, #40	; 0x28
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	0c0a0804 	.word	0x0c0a0804
 8009e9c:	01e84800 	.word	0x01e84800

08009ea0 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 8009ea0:	b480      	push	{r7}
 8009ea2:	b087      	sub	sp, #28
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	4603      	mov	r3, r0
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	607a      	str	r2, [r7, #4]
 8009eac:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 8009eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8009eb6:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8009eb8:	697b      	ldr	r3, [r7, #20]
}
 8009eba:	4618      	mov	r0, r3
 8009ebc:	371c      	adds	r7, #28
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bc80      	pop	{r7}
 8009ec2:	4770      	bx	lr

08009ec4 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b087      	sub	sp, #28
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	4603      	mov	r3, r0
 8009ecc:	60b9      	str	r1, [r7, #8]
 8009ece:	607a      	str	r2, [r7, #4]
 8009ed0:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 8009ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8009eda:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8009edc:	697b      	ldr	r3, [r7, #20]
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	371c      	adds	r7, #28
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bc80      	pop	{r7}
 8009ee6:	4770      	bx	lr

08009ee8 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b085      	sub	sp, #20
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	60b9      	str	r1, [r7, #8]
 8009ef2:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 8009ef4:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3714      	adds	r7, #20
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bc80      	pop	{r7}
 8009f00:	4770      	bx	lr

08009f02 <RFW_DeInit>:

void RFW_DeInit( void)
{
 8009f02:	b480      	push	{r7}
 8009f04:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 8009f06:	bf00      	nop
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bc80      	pop	{r7}
 8009f0c:	4770      	bx	lr

08009f0e <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 8009f0e:	b480      	push	{r7}
 8009f10:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 8009f12:	2300      	movs	r3, #0
#endif
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bc80      	pop	{r7}
 8009f1a:	4770      	bx	lr

08009f1c <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 8009f20:	2300      	movs	r3, #0
#endif
}
 8009f22:	4618      	mov	r0, r3
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bc80      	pop	{r7}
 8009f28:	4770      	bx	lr

08009f2a <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 8009f2a:	b480      	push	{r7}
 8009f2c:	b083      	sub	sp, #12
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	4603      	mov	r3, r0
 8009f32:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8009f34:	bf00      	nop
 8009f36:	370c      	adds	r7, #12
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bc80      	pop	{r7}
 8009f3c:	4770      	bx	lr

08009f3e <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 8009f3e:	b480      	push	{r7}
 8009f40:	b087      	sub	sp, #28
 8009f42:	af00      	add	r7, sp, #0
 8009f44:	60f8      	str	r0, [r7, #12]
 8009f46:	460b      	mov	r3, r1
 8009f48:	607a      	str	r2, [r7, #4]
 8009f4a:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 8009f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8009f50:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;
    
    status= 0;
  }
#endif
  return status;
 8009f52:	697b      	ldr	r3, [r7, #20]
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	371c      	adds	r7, #28
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bc80      	pop	{r7}
 8009f5c:	4770      	bx	lr

08009f5e <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8009f5e:	b480      	push	{r7}
 8009f60:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;
  
  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 8009f62:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8009f66:	4618      	mov	r0, r3
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bc80      	pop	{r7}
 8009f6c:	4770      	bx	lr

08009f6e <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 8009f6e:	b480      	push	{r7}
 8009f70:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_PKTCTL1A);
  SUBGRF_WriteRegister(SUBGHZ_PKTCTL1A, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_RTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 8009f72:	bf00      	nop
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bc80      	pop	{r7}
 8009f78:	4770      	bx	lr

08009f7a <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8009f7a:	b480      	push	{r7}
 8009f7c:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8009f7e:	bf00      	nop
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bc80      	pop	{r7}
 8009f84:	4770      	bx	lr

08009f86 <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 8009f86:	b480      	push	{r7}
 8009f88:	b083      	sub	sp, #12
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8009f90:	bf00      	nop
 8009f92:	370c      	adds	r7, #12
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bc80      	pop	{r7}
 8009f98:	4770      	bx	lr

08009f9a <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 8009f9a:	b580      	push	{r7, lr}
 8009f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 8009f9e:	f7f6 fe29 	bl	8000bf4 <SystemApp_Init>
  SubghzApp_Init();
 8009fa2:	f000 f80b 	bl	8009fbc <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 8009fa6:	bf00      	nop
 8009fa8:	bd80      	pop	{r7, pc}

08009faa <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 8009faa:	b580      	push	{r7, lr}
 8009fac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8009fae:	f04f 30ff 	mov.w	r0, #4294967295
 8009fb2:	f000 ff43 	bl	800ae3c <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_2 */

  /* USER CODE END MX_SubGHz_Phy_Process_2 */
}
 8009fb6:	bf00      	nop
 8009fb8:	bd80      	pop	{r7, pc}
	...

08009fbc <SubghzApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SubghzApp_Init(void)
{
 8009fbc:	b590      	push	{r4, r7, lr}
 8009fbe:	b08b      	sub	sp, #44	; 0x2c
 8009fc0:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE BEGIN SubghzApp_Init_1 */
		  APP_LOG(TS_OFF, VLEVEL_M, "\n\rPING PONG\n\r");
 8009fc2:	4b5b      	ldr	r3, [pc, #364]	; (800a130 <SubghzApp_Init+0x174>)
 8009fc4:	2200      	movs	r2, #0
 8009fc6:	2100      	movs	r1, #0
 8009fc8:	2002      	movs	r0, #2
 8009fca:	f001 fb59 	bl	800b680 <UTIL_ADV_TRACE_COND_FSend>
		  /* Print APP version*/
		  APP_LOG(TS_OFF, VLEVEL_M, "APP_VERSION= V%X.%X.%X\r\n",
 8009fce:	2300      	movs	r3, #0
 8009fd0:	9302      	str	r3, [sp, #8]
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	9301      	str	r3, [sp, #4]
 8009fd6:	2301      	movs	r3, #1
 8009fd8:	9300      	str	r3, [sp, #0]
 8009fda:	4b56      	ldr	r3, [pc, #344]	; (800a134 <SubghzApp_Init+0x178>)
 8009fdc:	2200      	movs	r2, #0
 8009fde:	2100      	movs	r1, #0
 8009fe0:	2002      	movs	r0, #2
 8009fe2:	f001 fb4d 	bl	800b680 <UTIL_ADV_TRACE_COND_FSend>
				  (uint8_t)(__APP_VERSION >> __APP_VERSION_MAIN_SHIFT),
				  (uint8_t)(__APP_VERSION >> __APP_VERSION_SUB1_SHIFT),
				  (uint8_t)(__APP_VERSION >> __APP_VERSION_SUB2_SHIFT));

		  /* Led Timers*/
		  UTIL_TIMER_Create(&timerLed, 0xFFFFFFFFU, UTIL_TIMER_ONESHOT, OnledEvent, NULL);
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	9300      	str	r3, [sp, #0]
 8009fea:	4b53      	ldr	r3, [pc, #332]	; (800a138 <SubghzApp_Init+0x17c>)
 8009fec:	2200      	movs	r2, #0
 8009fee:	f04f 31ff 	mov.w	r1, #4294967295
 8009ff2:	4852      	ldr	r0, [pc, #328]	; (800a13c <SubghzApp_Init+0x180>)
 8009ff4:	f001 f8a8 	bl	800b148 <UTIL_TIMER_Create>
		  UTIL_TIMER_SetPeriod(&timerLed, LED_PERIOD_MS);
 8009ff8:	21c8      	movs	r1, #200	; 0xc8
 8009ffa:	4850      	ldr	r0, [pc, #320]	; (800a13c <SubghzApp_Init+0x180>)
 8009ffc:	f001 f9b8 	bl	800b370 <UTIL_TIMER_SetPeriod>
		  UTIL_TIMER_Start(&timerLed);
 800a000:	484e      	ldr	r0, [pc, #312]	; (800a13c <SubghzApp_Init+0x180>)
 800a002:	f001 f8d7 	bl	800b1b4 <UTIL_TIMER_Start>
  /* USER CODE END SubghzApp_Init_1 */

  /* Radio initialization */
  RadioEvents.TxDone = OnTxDone;
 800a006:	4b4e      	ldr	r3, [pc, #312]	; (800a140 <SubghzApp_Init+0x184>)
 800a008:	4a4e      	ldr	r2, [pc, #312]	; (800a144 <SubghzApp_Init+0x188>)
 800a00a:	601a      	str	r2, [r3, #0]
  RadioEvents.RxDone = OnRxDone;
 800a00c:	4b4c      	ldr	r3, [pc, #304]	; (800a140 <SubghzApp_Init+0x184>)
 800a00e:	4a4e      	ldr	r2, [pc, #312]	; (800a148 <SubghzApp_Init+0x18c>)
 800a010:	609a      	str	r2, [r3, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 800a012:	4b4b      	ldr	r3, [pc, #300]	; (800a140 <SubghzApp_Init+0x184>)
 800a014:	4a4d      	ldr	r2, [pc, #308]	; (800a14c <SubghzApp_Init+0x190>)
 800a016:	605a      	str	r2, [r3, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 800a018:	4b49      	ldr	r3, [pc, #292]	; (800a140 <SubghzApp_Init+0x184>)
 800a01a:	4a4d      	ldr	r2, [pc, #308]	; (800a150 <SubghzApp_Init+0x194>)
 800a01c:	60da      	str	r2, [r3, #12]
  RadioEvents.RxError = OnRxError;
 800a01e:	4b48      	ldr	r3, [pc, #288]	; (800a140 <SubghzApp_Init+0x184>)
 800a020:	4a4c      	ldr	r2, [pc, #304]	; (800a154 <SubghzApp_Init+0x198>)
 800a022:	611a      	str	r2, [r3, #16]

  Radio.Init(&RadioEvents);
 800a024:	4b4c      	ldr	r3, [pc, #304]	; (800a158 <SubghzApp_Init+0x19c>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4845      	ldr	r0, [pc, #276]	; (800a140 <SubghzApp_Init+0x184>)
 800a02a:	4798      	blx	r3

  /* USER CODE BEGIN SubghzApp_Init_2 */

		  /* Radio Set frequency */
		  Radio.SetChannel(RF_FREQUENCY);
 800a02c:	4b4a      	ldr	r3, [pc, #296]	; (800a158 <SubghzApp_Init+0x19c>)
 800a02e:	68db      	ldr	r3, [r3, #12]
 800a030:	484a      	ldr	r0, [pc, #296]	; (800a15c <SubghzApp_Init+0x1a0>)
 800a032:	4798      	blx	r3

		  /* Radio configuration */
		#if ((USE_MODEM_LORA == 1) && (USE_MODEM_FSK == 0))
		  APP_LOG(TS_OFF, VLEVEL_M, "---------------\n\r");
 800a034:	4b4a      	ldr	r3, [pc, #296]	; (800a160 <SubghzApp_Init+0x1a4>)
 800a036:	2200      	movs	r2, #0
 800a038:	2100      	movs	r1, #0
 800a03a:	2002      	movs	r0, #2
 800a03c:	f001 fb20 	bl	800b680 <UTIL_ADV_TRACE_COND_FSend>
		  APP_LOG(TS_OFF, VLEVEL_M, "LORA_MODULATION\n\r");
 800a040:	4b48      	ldr	r3, [pc, #288]	; (800a164 <SubghzApp_Init+0x1a8>)
 800a042:	2200      	movs	r2, #0
 800a044:	2100      	movs	r1, #0
 800a046:	2002      	movs	r0, #2
 800a048:	f001 fb1a 	bl	800b680 <UTIL_ADV_TRACE_COND_FSend>
		  APP_LOG(TS_OFF, VLEVEL_M, "LORA_BW=%d kHz\n\r", (1 << LORA_BANDWIDTH) * 125);
 800a04c:	237d      	movs	r3, #125	; 0x7d
 800a04e:	9300      	str	r3, [sp, #0]
 800a050:	4b45      	ldr	r3, [pc, #276]	; (800a168 <SubghzApp_Init+0x1ac>)
 800a052:	2200      	movs	r2, #0
 800a054:	2100      	movs	r1, #0
 800a056:	2002      	movs	r0, #2
 800a058:	f001 fb12 	bl	800b680 <UTIL_ADV_TRACE_COND_FSend>
		  APP_LOG(TS_OFF, VLEVEL_M, "LORA_SF=%d\n\r", LORA_SPREADING_FACTOR);
 800a05c:	2307      	movs	r3, #7
 800a05e:	9300      	str	r3, [sp, #0]
 800a060:	4b42      	ldr	r3, [pc, #264]	; (800a16c <SubghzApp_Init+0x1b0>)
 800a062:	2200      	movs	r2, #0
 800a064:	2100      	movs	r1, #0
 800a066:	2002      	movs	r0, #2
 800a068:	f001 fb0a 	bl	800b680 <UTIL_ADV_TRACE_COND_FSend>

		  Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 800a06c:	4b3a      	ldr	r3, [pc, #232]	; (800a158 <SubghzApp_Init+0x19c>)
 800a06e:	69dc      	ldr	r4, [r3, #28]
 800a070:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800a074:	9308      	str	r3, [sp, #32]
 800a076:	2300      	movs	r3, #0
 800a078:	9307      	str	r3, [sp, #28]
 800a07a:	2300      	movs	r3, #0
 800a07c:	9306      	str	r3, [sp, #24]
 800a07e:	2300      	movs	r3, #0
 800a080:	9305      	str	r3, [sp, #20]
 800a082:	2301      	movs	r3, #1
 800a084:	9304      	str	r3, [sp, #16]
 800a086:	2300      	movs	r3, #0
 800a088:	9303      	str	r3, [sp, #12]
 800a08a:	2308      	movs	r3, #8
 800a08c:	9302      	str	r3, [sp, #8]
 800a08e:	2301      	movs	r3, #1
 800a090:	9301      	str	r3, [sp, #4]
 800a092:	2307      	movs	r3, #7
 800a094:	9300      	str	r3, [sp, #0]
 800a096:	2300      	movs	r3, #0
 800a098:	2200      	movs	r2, #0
 800a09a:	2114      	movs	r1, #20
 800a09c:	2001      	movs	r0, #1
 800a09e:	47a0      	blx	r4
							LORA_SPREADING_FACTOR, LORA_CODINGRATE,
							LORA_PREAMBLE_LENGTH, LORA_FIX_LENGTH_PAYLOAD_ON,
							true, 0, 0, LORA_IQ_INVERSION_ON, TX_TIMEOUT_VALUE);

		  Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 800a0a0:	4b2d      	ldr	r3, [pc, #180]	; (800a158 <SubghzApp_Init+0x19c>)
 800a0a2:	699c      	ldr	r4, [r3, #24]
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	9309      	str	r3, [sp, #36]	; 0x24
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	9308      	str	r3, [sp, #32]
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	9307      	str	r3, [sp, #28]
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	9306      	str	r3, [sp, #24]
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	9305      	str	r3, [sp, #20]
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	9304      	str	r3, [sp, #16]
 800a0bc:	2300      	movs	r3, #0
 800a0be:	9303      	str	r3, [sp, #12]
 800a0c0:	2305      	movs	r3, #5
 800a0c2:	9302      	str	r3, [sp, #8]
 800a0c4:	2308      	movs	r3, #8
 800a0c6:	9301      	str	r3, [sp, #4]
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	9300      	str	r3, [sp, #0]
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	2207      	movs	r2, #7
 800a0d0:	2100      	movs	r1, #0
 800a0d2:	2001      	movs	r0, #1
 800a0d4:	47a0      	blx	r4
							LORA_CODINGRATE, 0, LORA_PREAMBLE_LENGTH,
							LORA_SYMBOL_TIMEOUT, LORA_FIX_LENGTH_PAYLOAD_ON,
							0, true, 0, 0, LORA_IQ_INVERSION_ON, true);

		  Radio.SetMaxPayloadLength(MODEM_LORA, MAX_APP_BUFFER_SIZE);
 800a0d6:	4b20      	ldr	r3, [pc, #128]	; (800a158 <SubghzApp_Init+0x19c>)
 800a0d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0da:	21ff      	movs	r1, #255	; 0xff
 800a0dc:	2001      	movs	r0, #1
 800a0de:	4798      	blx	r3
		#else
		#error "Please define a modulation in the subghz_phy_app.h file."
		#endif /* USE_MODEM_LORA | USE_MODEM_FSK */

		  /*calculate random delay for synchronization*/
		  random_delay = (Radio.Random()) >> 22; /*10bits random e.g. from 0 to 1023 ms*/
 800a0e0:	4b1d      	ldr	r3, [pc, #116]	; (800a158 <SubghzApp_Init+0x19c>)
 800a0e2:	695b      	ldr	r3, [r3, #20]
 800a0e4:	4798      	blx	r3
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	0d9b      	lsrs	r3, r3, #22
 800a0ea:	461a      	mov	r2, r3
 800a0ec:	4b20      	ldr	r3, [pc, #128]	; (800a170 <SubghzApp_Init+0x1b4>)
 800a0ee:	601a      	str	r2, [r3, #0]
		  /*fills tx buffer*/
		  memset(BufferTx, 0x0, MAX_APP_BUFFER_SIZE);
 800a0f0:	22ff      	movs	r2, #255	; 0xff
 800a0f2:	2100      	movs	r1, #0
 800a0f4:	481f      	ldr	r0, [pc, #124]	; (800a174 <SubghzApp_Init+0x1b8>)
 800a0f6:	f001 fd6f 	bl	800bbd8 <memset>

		  APP_LOG(TS_ON, VLEVEL_L, "rand=%d\n\r", random_delay);
 800a0fa:	4b1d      	ldr	r3, [pc, #116]	; (800a170 <SubghzApp_Init+0x1b4>)
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	9300      	str	r3, [sp, #0]
 800a100:	4b1d      	ldr	r3, [pc, #116]	; (800a178 <SubghzApp_Init+0x1bc>)
 800a102:	2201      	movs	r2, #1
 800a104:	2100      	movs	r1, #0
 800a106:	2001      	movs	r0, #1
 800a108:	f001 faba 	bl	800b680 <UTIL_ADV_TRACE_COND_FSend>
		  /*starts reception*/
		  Radio.Rx(RX_TIMEOUT_VALUE + random_delay);
 800a10c:	4b12      	ldr	r3, [pc, #72]	; (800a158 <SubghzApp_Init+0x19c>)
 800a10e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a110:	4a17      	ldr	r2, [pc, #92]	; (800a170 <SubghzApp_Init+0x1b4>)
 800a112:	6812      	ldr	r2, [r2, #0]
 800a114:	f602 32b8 	addw	r2, r2, #3000	; 0xbb8
 800a118:	4610      	mov	r0, r2
 800a11a:	4798      	blx	r3
		  /*register task to to be run in while(1) after Radio IT*/
		  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), UTIL_SEQ_RFU, PingPong_Process);
 800a11c:	4a17      	ldr	r2, [pc, #92]	; (800a17c <SubghzApp_Init+0x1c0>)
 800a11e:	2100      	movs	r1, #0
 800a120:	2001      	movs	r0, #1
 800a122:	f000 ff6f 	bl	800b004 <UTIL_SEQ_RegTask>

  /* USER CODE END SubghzApp_Init_2 */
}
 800a126:	bf00      	nop
 800a128:	3704      	adds	r7, #4
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd90      	pop	{r4, r7, pc}
 800a12e:	bf00      	nop
 800a130:	0800bcdc 	.word	0x0800bcdc
 800a134:	0800bcec 	.word	0x0800bcec
 800a138:	0800a5a5 	.word	0x0800a5a5
 800a13c:	20000380 	.word	0x20000380
 800a140:	2000015c 	.word	0x2000015c
 800a144:	0800a181 	.word	0x0800a181
 800a148:	0800a1ad 	.word	0x0800a1ad
 800a14c:	0800a2c1 	.word	0x0800a2c1
 800a150:	0800a2ed 	.word	0x0800a2ed
 800a154:	0800a319 	.word	0x0800a319
 800a158:	0800bff4 	.word	0x0800bff4
 800a15c:	33bca100 	.word	0x33bca100
 800a160:	0800bd08 	.word	0x0800bd08
 800a164:	0800bd1c 	.word	0x0800bd1c
 800a168:	0800bd30 	.word	0x0800bd30
 800a16c:	0800bd44 	.word	0x0800bd44
 800a170:	20000398 	.word	0x20000398
 800a174:	2000027c 	.word	0x2000027c
 800a178:	0800bd54 	.word	0x0800bd54
 800a17c:	0800a345 	.word	0x0800a345

0800a180 <OnTxDone>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void OnTxDone(void)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxDone */
	  APP_LOG(TS_ON, VLEVEL_L, "OnTxDone\n\r");
 800a184:	4b07      	ldr	r3, [pc, #28]	; (800a1a4 <OnTxDone+0x24>)
 800a186:	2201      	movs	r2, #1
 800a188:	2100      	movs	r1, #0
 800a18a:	2001      	movs	r0, #1
 800a18c:	f001 fa78 	bl	800b680 <UTIL_ADV_TRACE_COND_FSend>
	  /* Update the State of the FSM*/
	  State = TX;
 800a190:	4b05      	ldr	r3, [pc, #20]	; (800a1a8 <OnTxDone+0x28>)
 800a192:	2203      	movs	r2, #3
 800a194:	701a      	strb	r2, [r3, #0]
	  /* Run PingPong process in background*/
	  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800a196:	2100      	movs	r1, #0
 800a198:	2001      	movs	r0, #1
 800a19a:	f000 ff55 	bl	800b048 <UTIL_SEQ_SetTask>
  /* USER CODE END OnTxDone */
}
 800a19e:	bf00      	nop
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	0800bd60 	.word	0x0800bd60
 800a1a8:	20000178 	.word	0x20000178

0800a1ac <OnRxDone>:

static void OnRxDone(uint8_t *payload, uint16_t size, int16_t rssi, int8_t LoraSnr_FskCfo)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b088      	sub	sp, #32
 800a1b0:	af02      	add	r7, sp, #8
 800a1b2:	60f8      	str	r0, [r7, #12]
 800a1b4:	4608      	mov	r0, r1
 800a1b6:	4611      	mov	r1, r2
 800a1b8:	461a      	mov	r2, r3
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	817b      	strh	r3, [r7, #10]
 800a1be:	460b      	mov	r3, r1
 800a1c0:	813b      	strh	r3, [r7, #8]
 800a1c2:	4613      	mov	r3, r2
 800a1c4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnRxDone */
	  APP_LOG(TS_ON, VLEVEL_L, "OnRxDone\n\r");
 800a1c6:	4b34      	ldr	r3, [pc, #208]	; (800a298 <OnRxDone+0xec>)
 800a1c8:	2201      	movs	r2, #1
 800a1ca:	2100      	movs	r1, #0
 800a1cc:	2001      	movs	r0, #1
 800a1ce:	f001 fa57 	bl	800b680 <UTIL_ADV_TRACE_COND_FSend>
	#if ((USE_MODEM_LORA == 1) && (USE_MODEM_FSK == 0))
	  APP_LOG(TS_ON, VLEVEL_L, "RssiValue=%d dBm, SnrValue=%ddB\n\r", rssi, LoraSnr_FskCfo);
 800a1d2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800a1d6:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800a1da:	9201      	str	r2, [sp, #4]
 800a1dc:	9300      	str	r3, [sp, #0]
 800a1de:	4b2f      	ldr	r3, [pc, #188]	; (800a29c <OnRxDone+0xf0>)
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	2100      	movs	r1, #0
 800a1e4:	2001      	movs	r0, #1
 800a1e6:	f001 fa4b 	bl	800b680 <UTIL_ADV_TRACE_COND_FSend>
	  /* Record payload Signal to noise ratio in Lora*/
	  SnrValue = LoraSnr_FskCfo;
 800a1ea:	4a2d      	ldr	r2, [pc, #180]	; (800a2a0 <OnRxDone+0xf4>)
 800a1ec:	79fb      	ldrb	r3, [r7, #7]
 800a1ee:	7013      	strb	r3, [r2, #0]
	#if ((USE_MODEM_LORA == 0) && (USE_MODEM_FSK == 1))
	  APP_LOG(TS_ON, VLEVEL_L, "RssiValue=%d dBm, Cfo=%dkHz\n\r", rssi, LoraSnr_FskCfo);
	  SnrValue = 0; /*not applicable in GFSK*/
	#endif /* USE_MODEM_LORA | USE_MODEM_FSK */
	  /* Update the State of the FSM*/
	  State = RX;
 800a1f0:	4b2c      	ldr	r3, [pc, #176]	; (800a2a4 <OnRxDone+0xf8>)
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	701a      	strb	r2, [r3, #0]
	  /* Clear BufferRx*/
	  memset(BufferRx, 0, MAX_APP_BUFFER_SIZE);
 800a1f6:	22ff      	movs	r2, #255	; 0xff
 800a1f8:	2100      	movs	r1, #0
 800a1fa:	482b      	ldr	r0, [pc, #172]	; (800a2a8 <OnRxDone+0xfc>)
 800a1fc:	f001 fcec 	bl	800bbd8 <memset>
	  /* Record payload size*/
	  RxBufferSize = size;
 800a200:	4a2a      	ldr	r2, [pc, #168]	; (800a2ac <OnRxDone+0x100>)
 800a202:	897b      	ldrh	r3, [r7, #10]
 800a204:	8013      	strh	r3, [r2, #0]
	  if (RxBufferSize <= MAX_APP_BUFFER_SIZE)
 800a206:	4b29      	ldr	r3, [pc, #164]	; (800a2ac <OnRxDone+0x100>)
 800a208:	881b      	ldrh	r3, [r3, #0]
 800a20a:	2bff      	cmp	r3, #255	; 0xff
 800a20c:	d806      	bhi.n	800a21c <OnRxDone+0x70>
	  {
		memcpy(BufferRx, payload, RxBufferSize);
 800a20e:	4b27      	ldr	r3, [pc, #156]	; (800a2ac <OnRxDone+0x100>)
 800a210:	881b      	ldrh	r3, [r3, #0]
 800a212:	461a      	mov	r2, r3
 800a214:	68f9      	ldr	r1, [r7, #12]
 800a216:	4824      	ldr	r0, [pc, #144]	; (800a2a8 <OnRxDone+0xfc>)
 800a218:	f001 fcd0 	bl	800bbbc <memcpy>
	  }
	  /* Record Received Signal Strength*/
	  RssiValue = rssi;
 800a21c:	893b      	ldrh	r3, [r7, #8]
 800a21e:	b25a      	sxtb	r2, r3
 800a220:	4b23      	ldr	r3, [pc, #140]	; (800a2b0 <OnRxDone+0x104>)
 800a222:	701a      	strb	r2, [r3, #0]
	  /* Record payload content*/
	  APP_LOG(TS_ON, VLEVEL_H, "payload. size=%d \n\r", size);
 800a224:	897b      	ldrh	r3, [r7, #10]
 800a226:	9300      	str	r3, [sp, #0]
 800a228:	4b22      	ldr	r3, [pc, #136]	; (800a2b4 <OnRxDone+0x108>)
 800a22a:	2201      	movs	r2, #1
 800a22c:	2100      	movs	r1, #0
 800a22e:	2003      	movs	r0, #3
 800a230:	f001 fa26 	bl	800b680 <UTIL_ADV_TRACE_COND_FSend>
	  for (int i = 0; i < PAYLOAD_LEN; i++)
 800a234:	2300      	movs	r3, #0
 800a236:	617b      	str	r3, [r7, #20]
 800a238:	e01d      	b.n	800a276 <OnRxDone+0xca>
	  {
		APP_LOG(TS_OFF, VLEVEL_H, "%02X", BufferRx[i]);
 800a23a:	4a1b      	ldr	r2, [pc, #108]	; (800a2a8 <OnRxDone+0xfc>)
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	4413      	add	r3, r2
 800a240:	781b      	ldrb	r3, [r3, #0]
 800a242:	9300      	str	r3, [sp, #0]
 800a244:	4b1c      	ldr	r3, [pc, #112]	; (800a2b8 <OnRxDone+0x10c>)
 800a246:	2200      	movs	r2, #0
 800a248:	2100      	movs	r1, #0
 800a24a:	2003      	movs	r0, #3
 800a24c:	f001 fa18 	bl	800b680 <UTIL_ADV_TRACE_COND_FSend>
		if (i % 16 == 15)
 800a250:	697b      	ldr	r3, [r7, #20]
 800a252:	425a      	negs	r2, r3
 800a254:	f003 030f 	and.w	r3, r3, #15
 800a258:	f002 020f 	and.w	r2, r2, #15
 800a25c:	bf58      	it	pl
 800a25e:	4253      	negpl	r3, r2
 800a260:	2b0f      	cmp	r3, #15
 800a262:	d105      	bne.n	800a270 <OnRxDone+0xc4>
		{
		  APP_LOG(TS_OFF, VLEVEL_H, "\n\r");
 800a264:	4b15      	ldr	r3, [pc, #84]	; (800a2bc <OnRxDone+0x110>)
 800a266:	2200      	movs	r2, #0
 800a268:	2100      	movs	r1, #0
 800a26a:	2003      	movs	r0, #3
 800a26c:	f001 fa08 	bl	800b680 <UTIL_ADV_TRACE_COND_FSend>
	  for (int i = 0; i < PAYLOAD_LEN; i++)
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	3301      	adds	r3, #1
 800a274:	617b      	str	r3, [r7, #20]
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	2b3f      	cmp	r3, #63	; 0x3f
 800a27a:	ddde      	ble.n	800a23a <OnRxDone+0x8e>
		}
	  }
	  APP_LOG(TS_OFF, VLEVEL_H, "\n\r");
 800a27c:	4b0f      	ldr	r3, [pc, #60]	; (800a2bc <OnRxDone+0x110>)
 800a27e:	2200      	movs	r2, #0
 800a280:	2100      	movs	r1, #0
 800a282:	2003      	movs	r0, #3
 800a284:	f001 f9fc 	bl	800b680 <UTIL_ADV_TRACE_COND_FSend>
	  /* Run PingPong process in background*/
	  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800a288:	2100      	movs	r1, #0
 800a28a:	2001      	movs	r0, #1
 800a28c:	f000 fedc 	bl	800b048 <UTIL_SEQ_SetTask>
  /* USER CODE END OnRxDone */
}
 800a290:	bf00      	nop
 800a292:	3718      	adds	r7, #24
 800a294:	46bd      	mov	sp, r7
 800a296:	bd80      	pop	{r7, pc}
 800a298:	0800bd6c 	.word	0x0800bd6c
 800a29c:	0800bd78 	.word	0x0800bd78
 800a2a0:	2000037f 	.word	0x2000037f
 800a2a4:	20000178 	.word	0x20000178
 800a2a8:	2000017c 	.word	0x2000017c
 800a2ac:	2000037c 	.word	0x2000037c
 800a2b0:	2000037e 	.word	0x2000037e
 800a2b4:	0800bd9c 	.word	0x0800bd9c
 800a2b8:	0800bdb0 	.word	0x0800bdb0
 800a2bc:	0800bdb8 	.word	0x0800bdb8

0800a2c0 <OnTxTimeout>:

static void OnTxTimeout(void)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnTxTimeout */
	  APP_LOG(TS_ON, VLEVEL_L, "OnTxTimeout\n\r");
 800a2c4:	4b07      	ldr	r3, [pc, #28]	; (800a2e4 <OnTxTimeout+0x24>)
 800a2c6:	2201      	movs	r2, #1
 800a2c8:	2100      	movs	r1, #0
 800a2ca:	2001      	movs	r0, #1
 800a2cc:	f001 f9d8 	bl	800b680 <UTIL_ADV_TRACE_COND_FSend>
	  /* Update the State of the FSM*/
	  State = TX_TIMEOUT;
 800a2d0:	4b05      	ldr	r3, [pc, #20]	; (800a2e8 <OnTxTimeout+0x28>)
 800a2d2:	2204      	movs	r2, #4
 800a2d4:	701a      	strb	r2, [r3, #0]
	  /* Run PingPong process in background*/
	  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800a2d6:	2100      	movs	r1, #0
 800a2d8:	2001      	movs	r0, #1
 800a2da:	f000 feb5 	bl	800b048 <UTIL_SEQ_SetTask>
  /* USER CODE END OnTxTimeout */
}
 800a2de:	bf00      	nop
 800a2e0:	bd80      	pop	{r7, pc}
 800a2e2:	bf00      	nop
 800a2e4:	0800bdbc 	.word	0x0800bdbc
 800a2e8:	20000178 	.word	0x20000178

0800a2ec <OnRxTimeout>:

static void OnRxTimeout(void)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxTimeout */
	  APP_LOG(TS_ON, VLEVEL_L, "OnRxTimeout\n\r");
 800a2f0:	4b07      	ldr	r3, [pc, #28]	; (800a310 <OnRxTimeout+0x24>)
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	2100      	movs	r1, #0
 800a2f6:	2001      	movs	r0, #1
 800a2f8:	f001 f9c2 	bl	800b680 <UTIL_ADV_TRACE_COND_FSend>
	  /* Update the State of the FSM*/
	  State = RX_TIMEOUT;
 800a2fc:	4b05      	ldr	r3, [pc, #20]	; (800a314 <OnRxTimeout+0x28>)
 800a2fe:	2201      	movs	r2, #1
 800a300:	701a      	strb	r2, [r3, #0]
	  /* Run PingPong process in background*/
	  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800a302:	2100      	movs	r1, #0
 800a304:	2001      	movs	r0, #1
 800a306:	f000 fe9f 	bl	800b048 <UTIL_SEQ_SetTask>
  /* USER CODE END OnRxTimeout */
}
 800a30a:	bf00      	nop
 800a30c:	bd80      	pop	{r7, pc}
 800a30e:	bf00      	nop
 800a310:	0800bdcc 	.word	0x0800bdcc
 800a314:	20000178 	.word	0x20000178

0800a318 <OnRxError>:

static void OnRxError(void)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnRxError */
	  APP_LOG(TS_ON, VLEVEL_L, "OnRxError\n\r");
 800a31c:	4b07      	ldr	r3, [pc, #28]	; (800a33c <OnRxError+0x24>)
 800a31e:	2201      	movs	r2, #1
 800a320:	2100      	movs	r1, #0
 800a322:	2001      	movs	r0, #1
 800a324:	f001 f9ac 	bl	800b680 <UTIL_ADV_TRACE_COND_FSend>
	  /* Update the State of the FSM*/
	  State = RX_ERROR;
 800a328:	4b05      	ldr	r3, [pc, #20]	; (800a340 <OnRxError+0x28>)
 800a32a:	2202      	movs	r2, #2
 800a32c:	701a      	strb	r2, [r3, #0]
	  /* Run PingPong process in background*/
	  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SubGHz_Phy_App_Process), CFG_SEQ_Prio_0);
 800a32e:	2100      	movs	r1, #0
 800a330:	2001      	movs	r0, #1
 800a332:	f000 fe89 	bl	800b048 <UTIL_SEQ_SetTask>
  /* USER CODE END OnRxError */
}
 800a336:	bf00      	nop
 800a338:	bd80      	pop	{r7, pc}
 800a33a:	bf00      	nop
 800a33c:	0800bddc 	.word	0x0800bddc
 800a340:	20000178 	.word	0x20000178

0800a344 <PingPong_Process>:

/* USER CODE BEGIN PrFD */

	static void PingPong_Process(void)
	{
 800a344:	b580      	push	{r7, lr}
 800a346:	af00      	add	r7, sp, #0
	  Radio.Sleep();
 800a348:	4b85      	ldr	r3, [pc, #532]	; (800a560 <PingPong_Process+0x21c>)
 800a34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a34c:	4798      	blx	r3

	  switch (State)
 800a34e:	4b85      	ldr	r3, [pc, #532]	; (800a564 <PingPong_Process+0x220>)
 800a350:	781b      	ldrb	r3, [r3, #0]
 800a352:	2b04      	cmp	r3, #4
 800a354:	f200 80ff 	bhi.w	800a556 <PingPong_Process+0x212>
 800a358:	a201      	add	r2, pc, #4	; (adr r2, 800a360 <PingPong_Process+0x1c>)
 800a35a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a35e:	bf00      	nop
 800a360:	0800a375 	.word	0x0800a375
 800a364:	0800a4e7 	.word	0x0800a4e7
 800a368:	0800a4e7 	.word	0x0800a4e7
 800a36c:	0800a4cf 	.word	0x0800a4cf
 800a370:	0800a53f 	.word	0x0800a53f
	  {
		case RX:

		  if (isMaster == true)
 800a374:	4b7c      	ldr	r3, [pc, #496]	; (800a568 <PingPong_Process+0x224>)
 800a376:	781b      	ldrb	r3, [r3, #0]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d05f      	beq.n	800a43c <PingPong_Process+0xf8>
		  {
			if (RxBufferSize > 0)
 800a37c:	4b7b      	ldr	r3, [pc, #492]	; (800a56c <PingPong_Process+0x228>)
 800a37e:	881b      	ldrh	r3, [r3, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	f000 80ea 	beq.w	800a55a <PingPong_Process+0x216>
			{
			  if (strncmp((const char *)BufferRx, PONG, sizeof(PONG) - 1) == 0)
 800a386:	2204      	movs	r2, #4
 800a388:	4979      	ldr	r1, [pc, #484]	; (800a570 <PingPong_Process+0x22c>)
 800a38a:	487a      	ldr	r0, [pc, #488]	; (800a574 <PingPong_Process+0x230>)
 800a38c:	f001 fc2c 	bl	800bbe8 <strncmp>
 800a390:	4603      	mov	r3, r0
 800a392:	2b00      	cmp	r3, #0
 800a394:	d12c      	bne.n	800a3f0 <PingPong_Process+0xac>
			  {
				UTIL_TIMER_Stop(&timerLed);
 800a396:	4878      	ldr	r0, [pc, #480]	; (800a578 <PingPong_Process+0x234>)
 800a398:	f000 ff7a 	bl	800b290 <UTIL_TIMER_Stop>
				/* switch off green led */
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 0);
 800a39c:	2200      	movs	r2, #0
 800a39e:	2101      	movs	r1, #1
 800a3a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a3a4:	f7f8 f81e 	bl	80023e4 <HAL_GPIO_WritePin>
				/* master toggles red led */
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 800a3a8:	2102      	movs	r1, #2
 800a3aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a3ae:	f7f8 f830 	bl	8002412 <HAL_GPIO_TogglePin>
				/* Add delay between RX and TX */
				HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN);
 800a3b2:	4b6b      	ldr	r3, [pc, #428]	; (800a560 <PingPong_Process+0x21c>)
 800a3b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3b6:	4798      	blx	r3
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	33c8      	adds	r3, #200	; 0xc8
 800a3bc:	4618      	mov	r0, r3
 800a3be:	f7f6 fc94 	bl	8000cea <HAL_Delay>
				/* master sends PING*/
				APP_LOG(TS_ON, VLEVEL_L, "..."
 800a3c2:	4b6e      	ldr	r3, [pc, #440]	; (800a57c <PingPong_Process+0x238>)
 800a3c4:	2201      	movs	r2, #1
 800a3c6:	2100      	movs	r1, #0
 800a3c8:	2001      	movs	r0, #1
 800a3ca:	f001 f959 	bl	800b680 <UTIL_ADV_TRACE_COND_FSend>
						"PING"
						"\n\r");
				APP_LOG(TS_ON, VLEVEL_L, "Master Tx start\n\r");
 800a3ce:	4b6c      	ldr	r3, [pc, #432]	; (800a580 <PingPong_Process+0x23c>)
 800a3d0:	2201      	movs	r2, #1
 800a3d2:	2100      	movs	r1, #0
 800a3d4:	2001      	movs	r0, #1
 800a3d6:	f001 f953 	bl	800b680 <UTIL_ADV_TRACE_COND_FSend>
				memcpy(BufferTx, PING, sizeof(PING) - 1);
 800a3da:	2204      	movs	r2, #4
 800a3dc:	4969      	ldr	r1, [pc, #420]	; (800a584 <PingPong_Process+0x240>)
 800a3de:	486a      	ldr	r0, [pc, #424]	; (800a588 <PingPong_Process+0x244>)
 800a3e0:	f001 fbec 	bl	800bbbc <memcpy>
				Radio.Send(BufferTx, PAYLOAD_LEN);
 800a3e4:	4b5e      	ldr	r3, [pc, #376]	; (800a560 <PingPong_Process+0x21c>)
 800a3e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3e8:	2140      	movs	r1, #64	; 0x40
 800a3ea:	4867      	ldr	r0, [pc, #412]	; (800a588 <PingPong_Process+0x244>)
 800a3ec:	4798      	blx	r3
				APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
				Radio.Rx(RX_TIMEOUT_VALUE);
			  }
			}
		  }
		  break;
 800a3ee:	e0b4      	b.n	800a55a <PingPong_Process+0x216>
			  else if (strncmp((const char *)BufferRx, PING, sizeof(PING) - 1) == 0)
 800a3f0:	2204      	movs	r2, #4
 800a3f2:	4964      	ldr	r1, [pc, #400]	; (800a584 <PingPong_Process+0x240>)
 800a3f4:	485f      	ldr	r0, [pc, #380]	; (800a574 <PingPong_Process+0x230>)
 800a3f6:	f001 fbf7 	bl	800bbe8 <strncmp>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d10e      	bne.n	800a41e <PingPong_Process+0xda>
				isMaster = false;
 800a400:	4b59      	ldr	r3, [pc, #356]	; (800a568 <PingPong_Process+0x224>)
 800a402:	2200      	movs	r2, #0
 800a404:	701a      	strb	r2, [r3, #0]
				APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 800a406:	4b61      	ldr	r3, [pc, #388]	; (800a58c <PingPong_Process+0x248>)
 800a408:	2201      	movs	r2, #1
 800a40a:	2100      	movs	r1, #0
 800a40c:	2001      	movs	r0, #1
 800a40e:	f001 f937 	bl	800b680 <UTIL_ADV_TRACE_COND_FSend>
				Radio.Rx(RX_TIMEOUT_VALUE);
 800a412:	4b53      	ldr	r3, [pc, #332]	; (800a560 <PingPong_Process+0x21c>)
 800a414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a416:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a41a:	4798      	blx	r3
		  break;
 800a41c:	e09d      	b.n	800a55a <PingPong_Process+0x216>
				isMaster = true;
 800a41e:	4b52      	ldr	r3, [pc, #328]	; (800a568 <PingPong_Process+0x224>)
 800a420:	2201      	movs	r2, #1
 800a422:	701a      	strb	r2, [r3, #0]
				APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
 800a424:	4b5a      	ldr	r3, [pc, #360]	; (800a590 <PingPong_Process+0x24c>)
 800a426:	2201      	movs	r2, #1
 800a428:	2100      	movs	r1, #0
 800a42a:	2001      	movs	r0, #1
 800a42c:	f001 f928 	bl	800b680 <UTIL_ADV_TRACE_COND_FSend>
				Radio.Rx(RX_TIMEOUT_VALUE);
 800a430:	4b4b      	ldr	r3, [pc, #300]	; (800a560 <PingPong_Process+0x21c>)
 800a432:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a434:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a438:	4798      	blx	r3
		  break;
 800a43a:	e08e      	b.n	800a55a <PingPong_Process+0x216>
			if (RxBufferSize > 0)
 800a43c:	4b4b      	ldr	r3, [pc, #300]	; (800a56c <PingPong_Process+0x228>)
 800a43e:	881b      	ldrh	r3, [r3, #0]
 800a440:	2b00      	cmp	r3, #0
 800a442:	f000 808a 	beq.w	800a55a <PingPong_Process+0x216>
			  if (strncmp((const char *)BufferRx, PING, sizeof(PING) - 1) == 0)
 800a446:	2204      	movs	r2, #4
 800a448:	494e      	ldr	r1, [pc, #312]	; (800a584 <PingPong_Process+0x240>)
 800a44a:	484a      	ldr	r0, [pc, #296]	; (800a574 <PingPong_Process+0x230>)
 800a44c:	f001 fbcc 	bl	800bbe8 <strncmp>
 800a450:	4603      	mov	r3, r0
 800a452:	2b00      	cmp	r3, #0
 800a454:	d12c      	bne.n	800a4b0 <PingPong_Process+0x16c>
				UTIL_TIMER_Stop(&timerLed);
 800a456:	4848      	ldr	r0, [pc, #288]	; (800a578 <PingPong_Process+0x234>)
 800a458:	f000 ff1a 	bl	800b290 <UTIL_TIMER_Stop>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, 0);
 800a45c:	2200      	movs	r2, #0
 800a45e:	2102      	movs	r1, #2
 800a460:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a464:	f7f7 ffbe 	bl	80023e4 <HAL_GPIO_WritePin>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 800a468:	2101      	movs	r1, #1
 800a46a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a46e:	f7f7 ffd0 	bl	8002412 <HAL_GPIO_TogglePin>
				HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN);
 800a472:	4b3b      	ldr	r3, [pc, #236]	; (800a560 <PingPong_Process+0x21c>)
 800a474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a476:	4798      	blx	r3
 800a478:	4603      	mov	r3, r0
 800a47a:	33c8      	adds	r3, #200	; 0xc8
 800a47c:	4618      	mov	r0, r3
 800a47e:	f7f6 fc34 	bl	8000cea <HAL_Delay>
				APP_LOG(TS_ON, VLEVEL_L, "..."
 800a482:	4b44      	ldr	r3, [pc, #272]	; (800a594 <PingPong_Process+0x250>)
 800a484:	2201      	movs	r2, #1
 800a486:	2100      	movs	r1, #0
 800a488:	2001      	movs	r0, #1
 800a48a:	f001 f8f9 	bl	800b680 <UTIL_ADV_TRACE_COND_FSend>
				APP_LOG(TS_ON, VLEVEL_L, "Slave  Tx start\n\r");
 800a48e:	4b42      	ldr	r3, [pc, #264]	; (800a598 <PingPong_Process+0x254>)
 800a490:	2201      	movs	r2, #1
 800a492:	2100      	movs	r1, #0
 800a494:	2001      	movs	r0, #1
 800a496:	f001 f8f3 	bl	800b680 <UTIL_ADV_TRACE_COND_FSend>
				memcpy(BufferTx, PONG, sizeof(PONG) - 1);
 800a49a:	2204      	movs	r2, #4
 800a49c:	4934      	ldr	r1, [pc, #208]	; (800a570 <PingPong_Process+0x22c>)
 800a49e:	483a      	ldr	r0, [pc, #232]	; (800a588 <PingPong_Process+0x244>)
 800a4a0:	f001 fb8c 	bl	800bbbc <memcpy>
				Radio.Send(BufferTx, PAYLOAD_LEN);
 800a4a4:	4b2e      	ldr	r3, [pc, #184]	; (800a560 <PingPong_Process+0x21c>)
 800a4a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4a8:	2140      	movs	r1, #64	; 0x40
 800a4aa:	4837      	ldr	r0, [pc, #220]	; (800a588 <PingPong_Process+0x244>)
 800a4ac:	4798      	blx	r3
		  break;
 800a4ae:	e054      	b.n	800a55a <PingPong_Process+0x216>
				isMaster = true;
 800a4b0:	4b2d      	ldr	r3, [pc, #180]	; (800a568 <PingPong_Process+0x224>)
 800a4b2:	2201      	movs	r2, #1
 800a4b4:	701a      	strb	r2, [r3, #0]
				APP_LOG(TS_ON, VLEVEL_L, "Master Rx start\n\r");
 800a4b6:	4b36      	ldr	r3, [pc, #216]	; (800a590 <PingPong_Process+0x24c>)
 800a4b8:	2201      	movs	r2, #1
 800a4ba:	2100      	movs	r1, #0
 800a4bc:	2001      	movs	r0, #1
 800a4be:	f001 f8df 	bl	800b680 <UTIL_ADV_TRACE_COND_FSend>
				Radio.Rx(RX_TIMEOUT_VALUE);
 800a4c2:	4b27      	ldr	r3, [pc, #156]	; (800a560 <PingPong_Process+0x21c>)
 800a4c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4c6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a4ca:	4798      	blx	r3
		  break;
 800a4cc:	e045      	b.n	800a55a <PingPong_Process+0x216>
		case TX:
		  APP_LOG(TS_ON, VLEVEL_L, "Rx start\n\r");
 800a4ce:	4b33      	ldr	r3, [pc, #204]	; (800a59c <PingPong_Process+0x258>)
 800a4d0:	2201      	movs	r2, #1
 800a4d2:	2100      	movs	r1, #0
 800a4d4:	2001      	movs	r0, #1
 800a4d6:	f001 f8d3 	bl	800b680 <UTIL_ADV_TRACE_COND_FSend>
		  Radio.Rx(RX_TIMEOUT_VALUE);
 800a4da:	4b21      	ldr	r3, [pc, #132]	; (800a560 <PingPong_Process+0x21c>)
 800a4dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4de:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a4e2:	4798      	blx	r3
		  break;
 800a4e4:	e03a      	b.n	800a55c <PingPong_Process+0x218>
		case RX_TIMEOUT:
		case RX_ERROR:
		  if (isMaster == true)
 800a4e6:	4b20      	ldr	r3, [pc, #128]	; (800a568 <PingPong_Process+0x224>)
 800a4e8:	781b      	ldrb	r3, [r3, #0]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d01b      	beq.n	800a526 <PingPong_Process+0x1e2>
		  {
			/* Send the next PING frame */
			/* Add delay between RX and TX*/
			/* add random_delay to force sync between boards after some trials*/
			HAL_Delay(Radio.GetWakeupTime() + RX_TIME_MARGIN + random_delay);
 800a4ee:	4b1c      	ldr	r3, [pc, #112]	; (800a560 <PingPong_Process+0x21c>)
 800a4f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4f2:	4798      	blx	r3
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	4a2a      	ldr	r2, [pc, #168]	; (800a5a0 <PingPong_Process+0x25c>)
 800a4f8:	6812      	ldr	r2, [r2, #0]
 800a4fa:	4413      	add	r3, r2
 800a4fc:	33c8      	adds	r3, #200	; 0xc8
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7f6 fbf3 	bl	8000cea <HAL_Delay>
			APP_LOG(TS_ON, VLEVEL_L, "Master Tx start\n\r");
 800a504:	4b1e      	ldr	r3, [pc, #120]	; (800a580 <PingPong_Process+0x23c>)
 800a506:	2201      	movs	r2, #1
 800a508:	2100      	movs	r1, #0
 800a50a:	2001      	movs	r0, #1
 800a50c:	f001 f8b8 	bl	800b680 <UTIL_ADV_TRACE_COND_FSend>
			/* master sends PING*/
			memcpy(BufferTx, PING, sizeof(PING) - 1);
 800a510:	2204      	movs	r2, #4
 800a512:	491c      	ldr	r1, [pc, #112]	; (800a584 <PingPong_Process+0x240>)
 800a514:	481c      	ldr	r0, [pc, #112]	; (800a588 <PingPong_Process+0x244>)
 800a516:	f001 fb51 	bl	800bbbc <memcpy>
			Radio.Send(BufferTx, PAYLOAD_LEN);
 800a51a:	4b11      	ldr	r3, [pc, #68]	; (800a560 <PingPong_Process+0x21c>)
 800a51c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a51e:	2140      	movs	r1, #64	; 0x40
 800a520:	4819      	ldr	r0, [pc, #100]	; (800a588 <PingPong_Process+0x244>)
 800a522:	4798      	blx	r3
		  else
		  {
			APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
			Radio.Rx(RX_TIMEOUT_VALUE);
		  }
		  break;
 800a524:	e01a      	b.n	800a55c <PingPong_Process+0x218>
			APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 800a526:	4b19      	ldr	r3, [pc, #100]	; (800a58c <PingPong_Process+0x248>)
 800a528:	2201      	movs	r2, #1
 800a52a:	2100      	movs	r1, #0
 800a52c:	2001      	movs	r0, #1
 800a52e:	f001 f8a7 	bl	800b680 <UTIL_ADV_TRACE_COND_FSend>
			Radio.Rx(RX_TIMEOUT_VALUE);
 800a532:	4b0b      	ldr	r3, [pc, #44]	; (800a560 <PingPong_Process+0x21c>)
 800a534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a536:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a53a:	4798      	blx	r3
		  break;
 800a53c:	e00e      	b.n	800a55c <PingPong_Process+0x218>
		case TX_TIMEOUT:
		  APP_LOG(TS_ON, VLEVEL_L, "Slave Rx start\n\r");
 800a53e:	4b13      	ldr	r3, [pc, #76]	; (800a58c <PingPong_Process+0x248>)
 800a540:	2201      	movs	r2, #1
 800a542:	2100      	movs	r1, #0
 800a544:	2001      	movs	r0, #1
 800a546:	f001 f89b 	bl	800b680 <UTIL_ADV_TRACE_COND_FSend>
		  Radio.Rx(RX_TIMEOUT_VALUE);
 800a54a:	4b05      	ldr	r3, [pc, #20]	; (800a560 <PingPong_Process+0x21c>)
 800a54c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a54e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800a552:	4798      	blx	r3
		  break;
 800a554:	e002      	b.n	800a55c <PingPong_Process+0x218>
		default:
		  break;
 800a556:	bf00      	nop
 800a558:	e000      	b.n	800a55c <PingPong_Process+0x218>
		  break;
 800a55a:	bf00      	nop
	  }
	}
 800a55c:	bf00      	nop
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	0800bff4 	.word	0x0800bff4
 800a564:	20000178 	.word	0x20000178
 800a568:	20000009 	.word	0x20000009
 800a56c:	2000037c 	.word	0x2000037c
 800a570:	0800bde8 	.word	0x0800bde8
 800a574:	2000017c 	.word	0x2000017c
 800a578:	20000380 	.word	0x20000380
 800a57c:	0800bdf0 	.word	0x0800bdf0
 800a580:	0800bdfc 	.word	0x0800bdfc
 800a584:	0800be10 	.word	0x0800be10
 800a588:	2000027c 	.word	0x2000027c
 800a58c:	0800be18 	.word	0x0800be18
 800a590:	0800be2c 	.word	0x0800be2c
 800a594:	0800be40 	.word	0x0800be40
 800a598:	0800be4c 	.word	0x0800be4c
 800a59c:	0800be60 	.word	0x0800be60
 800a5a0:	20000398 	.word	0x20000398

0800a5a4 <OnledEvent>:

	static void OnledEvent(void *context)
	{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 800a5ac:	2101      	movs	r1, #1
 800a5ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a5b2:	f7f7 ff2e 	bl	8002412 <HAL_GPIO_TogglePin>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_1);
 800a5b6:	2102      	movs	r1, #2
 800a5b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a5bc:	f7f7 ff29 	bl	8002412 <HAL_GPIO_TogglePin>
	  UTIL_TIMER_Start(&timerLed);
 800a5c0:	4803      	ldr	r0, [pc, #12]	; (800a5d0 <OnledEvent+0x2c>)
 800a5c2:	f000 fdf7 	bl	800b1b4 <UTIL_TIMER_Start>
	}
 800a5c6:	bf00      	nop
 800a5c8:	3708      	adds	r7, #8
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	bf00      	nop
 800a5d0:	20000380 	.word	0x20000380

0800a5d4 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b086      	sub	sp, #24
 800a5d8:	af00      	add	r7, sp, #0
  /* and define USE_BSP_DRIVER in the preprocessor definitions  or in platform.h */
  return BSP_RADIO_Init();
#elif defined(MX_NUCLEO_WL55JC1)
  /* should be calling BSP_RADIO_Init() but not supported by MX*/

  GPIO_InitTypeDef  gpio_init_structure = {0};
 800a5da:	1d3b      	adds	r3, r7, #4
 800a5dc:	2200      	movs	r2, #0
 800a5de:	601a      	str	r2, [r3, #0]
 800a5e0:	605a      	str	r2, [r3, #4]
 800a5e2:	609a      	str	r2, [r3, #8]
 800a5e4:	60da      	str	r2, [r3, #12]
 800a5e6:	611a      	str	r2, [r3, #16]

  /* Enable the Radio Switch Clock */
//  RF_SW_CTRL3_GPIO_CLK_ENABLE();

  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 800a5e8:	2310      	movs	r3, #16
 800a5ea:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800a5ec:	2301      	movs	r3, #1
 800a5ee:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a5f4:	2303      	movs	r3, #3
 800a5f6:	613b      	str	r3, [r7, #16]

  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 800a5f8:	1d3b      	adds	r3, r7, #4
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a600:	f7f7 fcc2 	bl	8001f88 <HAL_GPIO_Init>

  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 800a604:	2320      	movs	r3, #32
 800a606:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 800a608:	1d3b      	adds	r3, r7, #4
 800a60a:	4619      	mov	r1, r3
 800a60c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a610:	f7f7 fcba 	bl	8001f88 <HAL_GPIO_Init>

  // gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
  // HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800a614:	2200      	movs	r2, #0
 800a616:	2120      	movs	r1, #32
 800a618:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a61c:	f7f7 fee2 	bl	80023e4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800a620:	2200      	movs	r2, #0
 800a622:	2110      	movs	r1, #16
 800a624:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a628:	f7f7 fedc 	bl	80023e4 <HAL_GPIO_WritePin>
  // HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);

  return 0;
 800a62c:	2300      	movs	r3, #0
  /* USER CODE END RBI_Init_2 */
#endif  /* USE_BSP_DRIVER  || MX_NUCLEO_WL55JC1  */
  /* USER CODE BEGIN RBI_Init_3 */

  /* USER CODE END RBI_Init_3 */
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3718      	adds	r7, #24
 800a632:	46bd      	mov	sp, r7
 800a634:	bd80      	pop	{r7, pc}
	...

0800a638 <RBI_ConfigRFSwitch>:

  /* USER CODE END RBI_DeInit_3 */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	4603      	mov	r3, r0
 800a640:	71fb      	strb	r3, [r7, #7]
  /* code generated by MX does not support BSP */
  /* In order to use BSP driver, add the correspondent files in the IDE workspace */
  /* and define USE_BSP_DRIVER in the preprocessor definitions  or in platform.h */
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
#elif defined(MX_NUCLEO_WL55JC1)
  switch (Config)
 800a642:	79fb      	ldrb	r3, [r7, #7]
 800a644:	2b03      	cmp	r3, #3
 800a646:	d83f      	bhi.n	800a6c8 <RBI_ConfigRFSwitch+0x90>
 800a648:	a201      	add	r2, pc, #4	; (adr r2, 800a650 <RBI_ConfigRFSwitch+0x18>)
 800a64a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a64e:	bf00      	nop
 800a650:	0800a661 	.word	0x0800a661
 800a654:	0800a67b 	.word	0x0800a67b
 800a658:	0800a695 	.word	0x0800a695
 800a65c:	0800a6af 	.word	0x0800a6af
  {
    case RBI_SWITCH_OFF:
    {
      /* Turn off switch */
      // HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800a660:	2200      	movs	r2, #0
 800a662:	2110      	movs	r1, #16
 800a664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a668:	f7f7 febc 	bl	80023e4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800a66c:	2200      	movs	r2, #0
 800a66e:	2120      	movs	r1, #32
 800a670:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a674:	f7f7 feb6 	bl	80023e4 <HAL_GPIO_WritePin>
      break;
 800a678:	e027      	b.n	800a6ca <RBI_ConfigRFSwitch+0x92>
    }
    case RBI_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      // HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 800a67a:	2201      	movs	r2, #1
 800a67c:	2110      	movs	r1, #16
 800a67e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a682:	f7f7 feaf 	bl	80023e4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 800a686:	2200      	movs	r2, #0
 800a688:	2120      	movs	r1, #32
 800a68a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a68e:	f7f7 fea9 	bl	80023e4 <HAL_GPIO_WritePin>
      break;
 800a692:	e01a      	b.n	800a6ca <RBI_ConfigRFSwitch+0x92>
    }
    case RBI_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      // HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET);
 800a694:	2201      	movs	r2, #1
 800a696:	2110      	movs	r1, #16
 800a698:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a69c:	f7f7 fea2 	bl	80023e4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	2120      	movs	r1, #32
 800a6a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a6a8:	f7f7 fe9c 	bl	80023e4 <HAL_GPIO_WritePin>
      break;
 800a6ac:	e00d      	b.n	800a6ca <RBI_ConfigRFSwitch+0x92>
    }
    case RBI_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      // HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800a6ae:	2200      	movs	r2, #0
 800a6b0:	2110      	movs	r1, #16
 800a6b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a6b6:	f7f7 fe95 	bl	80023e4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET);
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	2120      	movs	r1, #32
 800a6be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a6c2:	f7f7 fe8f 	bl	80023e4 <HAL_GPIO_WritePin>
      break;
 800a6c6:	e000      	b.n	800a6ca <RBI_ConfigRFSwitch+0x92>
    }
    default:
      break;
 800a6c8:	bf00      	nop
  }

  return 0;
 800a6ca:	2300      	movs	r3, #0
  /* USER CODE END RBI_ConfigRFSwitch_2 */
#endif  /* USE_BSP_DRIVER  || MX_NUCLEO_WL55JC1 */
  /* USER CODE BEGIN RBI_ConfigRFSwitch_3 */

  /* USER CODE END RBI_ConfigRFSwitch_3 */
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3708      	adds	r7, #8
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	af00      	add	r7, sp, #0
  /* In order to use BSP driver, add the correspondent files in the IDE workspace */
  /* and define USE_BSP_DRIVER in the preprocessor definitions  or in platform.h */
  return BSP_RADIO_GetTxConfig();

#elif defined(MX_NUCLEO_WL55JC1)
  return RBI_CONF_RFO;
 800a6d8:	2302      	movs	r3, #2
  /* USER CODE END RBI_GetTxConfig_2 */
#endif  /* USE_BSP_DRIVER  || MX_NUCLEO_WL55JC1 */
  /* USER CODE BEGIN RBI_GetTxConfig_3 */

  /* USER CODE END RBI_GetTxConfig_3 */
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bc80      	pop	{r7}
 800a6e0:	4770      	bx	lr

0800a6e2 <RBI_IsTCXO>:

  /* USER CODE END RBI_GetWakeUpTime_3 */
}

int32_t RBI_IsTCXO(void)
{
 800a6e2:	b480      	push	{r7}
 800a6e4:	af00      	add	r7, sp, #0
  /* In order to use BSP driver, add the correspondent files in the IDE workspace */
  /* and define USE_BSP_DRIVER in the preprocessor definitions  or in platform.h */
  return BSP_RADIO_IsTCXO();

#elif defined(MX_NUCLEO_WL55JC1)
  return IS_TCXO_SUPPORTED;
 800a6e6:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsTCXO_2 */
#endif  /* USE_BSP_DRIVER   || MX_NUCLEO_WL55JC1 */
  /* USER CODE BEGIN RBI_IsTCXO_3 */

  /* USER CODE END RBI_IsTCXO_3 */
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bc80      	pop	{r7}
 800a6ee:	4770      	bx	lr

0800a6f0 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	af00      	add	r7, sp, #0
  /* In order to use BSP driver, add the correspondent files in the IDE workspace */
  /* and define USE_BSP_DRIVER in the preprocessor definitions  or in platform.h */
  return BSP_RADIO_IsDCDC();

#elif defined(MX_NUCLEO_WL55JC1)
  return IS_DCDC_SUPPORTED;
 800a6f4:	2301      	movs	r3, #1
  /* USER CODE END RBI_IsDCDC_2 */
#endif  /* USE_BSP_DRIVER   || MX_NUCLEO_WL55JC1 */
  /* USER CODE BEGIN RBI_IsDCDC_3 */

  /* USER CODE END RBI_IsDCDC_3 */
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bc80      	pop	{r7}
 800a6fc:	4770      	bx	lr
	...

0800a700 <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 800a700:	b480      	push	{r7}
 800a702:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 800a704:	4b04      	ldr	r3, [pc, #16]	; (800a718 <UTIL_LPM_Init+0x18>)
 800a706:	2200      	movs	r2, #0
 800a708:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 800a70a:	4b04      	ldr	r3, [pc, #16]	; (800a71c <UTIL_LPM_Init+0x1c>)
 800a70c:	2200      	movs	r2, #0
 800a70e:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 800a710:	bf00      	nop
 800a712:	46bd      	mov	sp, r7
 800a714:	bc80      	pop	{r7}
 800a716:	4770      	bx	lr
 800a718:	2000039c 	.word	0x2000039c
 800a71c:	200003a0 	.word	0x200003a0

0800a720 <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a720:	b480      	push	{r7}
 800a722:	b087      	sub	sp, #28
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
 800a728:	460b      	mov	r3, r1
 800a72a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a72c:	f3ef 8310 	mrs	r3, PRIMASK
 800a730:	613b      	str	r3, [r7, #16]
  return(result);
 800a732:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a734:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a736:	b672      	cpsid	i
}
 800a738:	bf00      	nop
  
  switch( state )
 800a73a:	78fb      	ldrb	r3, [r7, #3]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d008      	beq.n	800a752 <UTIL_LPM_SetStopMode+0x32>
 800a740:	2b01      	cmp	r3, #1
 800a742:	d10e      	bne.n	800a762 <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 800a744:	4b0d      	ldr	r3, [pc, #52]	; (800a77c <UTIL_LPM_SetStopMode+0x5c>)
 800a746:	681a      	ldr	r2, [r3, #0]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	4313      	orrs	r3, r2
 800a74c:	4a0b      	ldr	r2, [pc, #44]	; (800a77c <UTIL_LPM_SetStopMode+0x5c>)
 800a74e:	6013      	str	r3, [r2, #0]
      break;
 800a750:	e008      	b.n	800a764 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	43da      	mvns	r2, r3
 800a756:	4b09      	ldr	r3, [pc, #36]	; (800a77c <UTIL_LPM_SetStopMode+0x5c>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	4013      	ands	r3, r2
 800a75c:	4a07      	ldr	r2, [pc, #28]	; (800a77c <UTIL_LPM_SetStopMode+0x5c>)
 800a75e:	6013      	str	r3, [r2, #0]
      break;
 800a760:	e000      	b.n	800a764 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 800a762:	bf00      	nop
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f383 8810 	msr	PRIMASK, r3
}
 800a76e:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a770:	bf00      	nop
 800a772:	371c      	adds	r7, #28
 800a774:	46bd      	mov	sp, r7
 800a776:	bc80      	pop	{r7}
 800a778:	4770      	bx	lr
 800a77a:	bf00      	nop
 800a77c:	2000039c 	.word	0x2000039c

0800a780 <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 800a780:	b480      	push	{r7}
 800a782:	b087      	sub	sp, #28
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
 800a788:	460b      	mov	r3, r1
 800a78a:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a78c:	f3ef 8310 	mrs	r3, PRIMASK
 800a790:	613b      	str	r3, [r7, #16]
  return(result);
 800a792:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 800a794:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a796:	b672      	cpsid	i
}
 800a798:	bf00      	nop
  
  switch(state)
 800a79a:	78fb      	ldrb	r3, [r7, #3]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d008      	beq.n	800a7b2 <UTIL_LPM_SetOffMode+0x32>
 800a7a0:	2b01      	cmp	r3, #1
 800a7a2:	d10e      	bne.n	800a7c2 <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 800a7a4:	4b0d      	ldr	r3, [pc, #52]	; (800a7dc <UTIL_LPM_SetOffMode+0x5c>)
 800a7a6:	681a      	ldr	r2, [r3, #0]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	4313      	orrs	r3, r2
 800a7ac:	4a0b      	ldr	r2, [pc, #44]	; (800a7dc <UTIL_LPM_SetOffMode+0x5c>)
 800a7ae:	6013      	str	r3, [r2, #0]
      break;
 800a7b0:	e008      	b.n	800a7c4 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	43da      	mvns	r2, r3
 800a7b6:	4b09      	ldr	r3, [pc, #36]	; (800a7dc <UTIL_LPM_SetOffMode+0x5c>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4013      	ands	r3, r2
 800a7bc:	4a07      	ldr	r2, [pc, #28]	; (800a7dc <UTIL_LPM_SetOffMode+0x5c>)
 800a7be:	6013      	str	r3, [r2, #0]
      break;
 800a7c0:	e000      	b.n	800a7c4 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 800a7c2:	bf00      	nop
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f383 8810 	msr	PRIMASK, r3
}
 800a7ce:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 800a7d0:	bf00      	nop
 800a7d2:	371c      	adds	r7, #28
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bc80      	pop	{r7}
 800a7d8:	4770      	bx	lr
 800a7da:	bf00      	nop
 800a7dc:	200003a0 	.word	0x200003a0

0800a7e0 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 800a7e0:	b580      	push	{r7, lr}
 800a7e2:	b084      	sub	sp, #16
 800a7e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a7e6:	f3ef 8310 	mrs	r3, PRIMASK
 800a7ea:	60bb      	str	r3, [r7, #8]
  return(result);
 800a7ec:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 800a7ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800a7f0:	b672      	cpsid	i
}
 800a7f2:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800a7f4:	4b12      	ldr	r3, [pc, #72]	; (800a840 <UTIL_LPM_EnterLowPower+0x60>)
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d006      	beq.n	800a80a <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 800a7fc:	4b11      	ldr	r3, [pc, #68]	; (800a844 <UTIL_LPM_EnterLowPower+0x64>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 800a802:	4b10      	ldr	r3, [pc, #64]	; (800a844 <UTIL_LPM_EnterLowPower+0x64>)
 800a804:	685b      	ldr	r3, [r3, #4]
 800a806:	4798      	blx	r3
 800a808:	e010      	b.n	800a82c <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 800a80a:	4b0f      	ldr	r3, [pc, #60]	; (800a848 <UTIL_LPM_EnterLowPower+0x68>)
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d006      	beq.n	800a820 <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 800a812:	4b0c      	ldr	r3, [pc, #48]	; (800a844 <UTIL_LPM_EnterLowPower+0x64>)
 800a814:	689b      	ldr	r3, [r3, #8]
 800a816:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800a818:	4b0a      	ldr	r3, [pc, #40]	; (800a844 <UTIL_LPM_EnterLowPower+0x64>)
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	4798      	blx	r3
 800a81e:	e005      	b.n	800a82c <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 800a820:	4b08      	ldr	r3, [pc, #32]	; (800a844 <UTIL_LPM_EnterLowPower+0x64>)
 800a822:	691b      	ldr	r3, [r3, #16]
 800a824:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800a826:	4b07      	ldr	r3, [pc, #28]	; (800a844 <UTIL_LPM_EnterLowPower+0x64>)
 800a828:	695b      	ldr	r3, [r3, #20]
 800a82a:	4798      	blx	r3
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f383 8810 	msr	PRIMASK, r3
}
 800a836:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 800a838:	bf00      	nop
 800a83a:	3710      	adds	r7, #16
 800a83c:	46bd      	mov	sp, r7
 800a83e:	bd80      	pop	{r7, pc}
 800a840:	2000039c 	.word	0x2000039c
 800a844:	0800bec4 	.word	0x0800bec4
 800a848:	200003a0 	.word	0x200003a0

0800a84c <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 800a84c:	b480      	push	{r7}
 800a84e:	b085      	sub	sp, #20
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	460b      	mov	r3, r1
 800a856:	70fb      	strb	r3, [r7, #3]
 800a858:	4613      	mov	r3, r2
 800a85a:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	60fb      	str	r3, [r7, #12]
  while( size-- )
 800a860:	e004      	b.n	800a86c <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	1c5a      	adds	r2, r3, #1
 800a866:	60fa      	str	r2, [r7, #12]
 800a868:	78fa      	ldrb	r2, [r7, #3]
 800a86a:	701a      	strb	r2, [r3, #0]
  while( size-- )
 800a86c:	883b      	ldrh	r3, [r7, #0]
 800a86e:	1e5a      	subs	r2, r3, #1
 800a870:	803a      	strh	r2, [r7, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d1f5      	bne.n	800a862 <UTIL_MEM_set_8+0x16>
  }
}
 800a876:	bf00      	nop
 800a878:	bf00      	nop
 800a87a:	3714      	adds	r7, #20
 800a87c:	46bd      	mov	sp, r7
 800a87e:	bc80      	pop	{r7}
 800a880:	4770      	bx	lr

0800a882 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 800a882:	b082      	sub	sp, #8
 800a884:	b480      	push	{r7}
 800a886:	b087      	sub	sp, #28
 800a888:	af00      	add	r7, sp, #0
 800a88a:	60f8      	str	r0, [r7, #12]
 800a88c:	1d38      	adds	r0, r7, #4
 800a88e:	e880 0006 	stmia.w	r0, {r1, r2}
 800a892:	627b      	str	r3, [r7, #36]	; 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 800a894:	2300      	movs	r3, #0
 800a896:	613b      	str	r3, [r7, #16]
 800a898:	2300      	movs	r3, #0
 800a89a:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 800a89c:	687a      	ldr	r2, [r7, #4]
 800a89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a0:	4413      	add	r3, r2
 800a8a2:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 800a8a4:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800a8a8:	b29a      	uxth	r2, r3
 800a8aa:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800a8ae:	b29b      	uxth	r3, r3
 800a8b0:	4413      	add	r3, r2
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	b21b      	sxth	r3, r3
 800a8b6:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 800a8b8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a8bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a8c0:	db0a      	blt.n	800a8d8 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	3301      	adds	r3, #1
 800a8c6:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 800a8c8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800a8cc:	b29b      	uxth	r3, r3
 800a8ce:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 800a8d2:	b29b      	uxth	r3, r3
 800a8d4:	b21b      	sxth	r3, r3
 800a8d6:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	461a      	mov	r2, r3
 800a8dc:	f107 0310 	add.w	r3, r7, #16
 800a8e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a8e4:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800a8e8:	68f8      	ldr	r0, [r7, #12]
 800a8ea:	371c      	adds	r7, #28
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bc80      	pop	{r7}
 800a8f0:	b002      	add	sp, #8
 800a8f2:	4770      	bx	lr

0800a8f4 <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b08a      	sub	sp, #40	; 0x28
 800a8f8:	af02      	add	r7, sp, #8
 800a8fa:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	61bb      	str	r3, [r7, #24]
 800a900:	2300      	movs	r3, #0
 800a902:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 800a904:	2300      	movs	r3, #0
 800a906:	613b      	str	r3, [r7, #16]
 800a908:	2300      	movs	r3, #0
 800a90a:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800a90c:	4b14      	ldr	r3, [pc, #80]	; (800a960 <SysTimeGet+0x6c>)
 800a90e:	691b      	ldr	r3, [r3, #16]
 800a910:	f107 0218 	add.w	r2, r7, #24
 800a914:	3204      	adds	r2, #4
 800a916:	4610      	mov	r0, r2
 800a918:	4798      	blx	r3
 800a91a:	4603      	mov	r3, r0
 800a91c:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 800a91e:	4b10      	ldr	r3, [pc, #64]	; (800a960 <SysTimeGet+0x6c>)
 800a920:	68db      	ldr	r3, [r3, #12]
 800a922:	4798      	blx	r3
 800a924:	4603      	mov	r3, r0
 800a926:	b21b      	sxth	r3, r3
 800a928:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 800a92a:	4b0d      	ldr	r3, [pc, #52]	; (800a960 <SysTimeGet+0x6c>)
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	4798      	blx	r3
 800a930:	4603      	mov	r3, r0
 800a932:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 800a934:	f107 0010 	add.w	r0, r7, #16
 800a938:	69fb      	ldr	r3, [r7, #28]
 800a93a:	9300      	str	r3, [sp, #0]
 800a93c:	69bb      	ldr	r3, [r7, #24]
 800a93e:	f107 0208 	add.w	r2, r7, #8
 800a942:	ca06      	ldmia	r2, {r1, r2}
 800a944:	f7ff ff9d 	bl	800a882 <SysTimeAdd>

  return sysTime;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	461a      	mov	r2, r3
 800a94c:	f107 0310 	add.w	r3, r7, #16
 800a950:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a954:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	3720      	adds	r7, #32
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}
 800a960:	0800bfa8 	.word	0x0800bfa8

0800a964 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 800a964:	b480      	push	{r7}
 800a966:	b085      	sub	sp, #20
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  int i = 0;
 800a96c:	2300      	movs	r3, #0
 800a96e:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 800a970:	e00e      	b.n	800a990 <ee_skip_atoi+0x2c>
 800a972:	68fa      	ldr	r2, [r7, #12]
 800a974:	4613      	mov	r3, r2
 800a976:	009b      	lsls	r3, r3, #2
 800a978:	4413      	add	r3, r2
 800a97a:	005b      	lsls	r3, r3, #1
 800a97c:	4618      	mov	r0, r3
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	1c59      	adds	r1, r3, #1
 800a984:	687a      	ldr	r2, [r7, #4]
 800a986:	6011      	str	r1, [r2, #0]
 800a988:	781b      	ldrb	r3, [r3, #0]
 800a98a:	4403      	add	r3, r0
 800a98c:	3b30      	subs	r3, #48	; 0x30
 800a98e:	60fb      	str	r3, [r7, #12]
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	781b      	ldrb	r3, [r3, #0]
 800a996:	2b2f      	cmp	r3, #47	; 0x2f
 800a998:	d904      	bls.n	800a9a4 <ee_skip_atoi+0x40>
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	781b      	ldrb	r3, [r3, #0]
 800a9a0:	2b39      	cmp	r3, #57	; 0x39
 800a9a2:	d9e6      	bls.n	800a972 <ee_skip_atoi+0xe>
  return i;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3714      	adds	r7, #20
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bc80      	pop	{r7}
 800a9ae:	4770      	bx	lr

0800a9b0 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b099      	sub	sp, #100	; 0x64
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	60f8      	str	r0, [r7, #12]
 800a9b8:	60b9      	str	r1, [r7, #8]
 800a9ba:	607a      	str	r2, [r7, #4]
 800a9bc:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 800a9be:	4b72      	ldr	r3, [pc, #456]	; (800ab88 <ee_number+0x1d8>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	65bb      	str	r3, [r7, #88]	; 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 800a9c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a9c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d002      	beq.n	800a9d4 <ee_number+0x24>
 800a9ce:	4b6f      	ldr	r3, [pc, #444]	; (800ab8c <ee_number+0x1dc>)
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	65bb      	str	r3, [r7, #88]	; 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	dd02      	ble.n	800a9e0 <ee_number+0x30>
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	2b24      	cmp	r3, #36	; 0x24
 800a9de:	dd01      	ble.n	800a9e4 <ee_number+0x34>
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	e0cc      	b.n	800ab7e <ee_number+0x1ce>
  
  c = (type & ZEROPAD) ? '0' : ' ';
 800a9e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a9e6:	f003 0301 	and.w	r3, r3, #1
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d001      	beq.n	800a9f2 <ee_number+0x42>
 800a9ee:	2330      	movs	r3, #48	; 0x30
 800a9f0:	e000      	b.n	800a9f4 <ee_number+0x44>
 800a9f2:	2320      	movs	r3, #32
 800a9f4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  sign = 0;
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (type & SIGN)
 800a9fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa00:	f003 0302 	and.w	r3, r3, #2
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d00b      	beq.n	800aa20 <ee_number+0x70>
  {
    if (num < 0)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	da08      	bge.n	800aa20 <ee_number+0x70>
    {
      sign = '-';
 800aa0e:	232d      	movs	r3, #45	; 0x2d
 800aa10:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
      num = -num;
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	425b      	negs	r3, r3
 800aa18:	607b      	str	r3, [r7, #4]
      size--;
 800aa1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aa1c:	3b01      	subs	r3, #1
 800aa1e:	66bb      	str	r3, [r7, #104]	; 0x68
    else if (base == 8)
      size--;
  }
#endif
  
  i = 0;
 800aa20:	2300      	movs	r3, #0
 800aa22:	657b      	str	r3, [r7, #84]	; 0x54

  if (num == 0)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d120      	bne.n	800aa6c <ee_number+0xbc>
    tmp[i++] = '0';
 800aa2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa2c:	1c5a      	adds	r2, r3, #1
 800aa2e:	657a      	str	r2, [r7, #84]	; 0x54
 800aa30:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800aa34:	4413      	add	r3, r2
 800aa36:	2230      	movs	r2, #48	; 0x30
 800aa38:	f803 2c50 	strb.w	r2, [r3, #-80]
 800aa3c:	e019      	b.n	800aa72 <ee_number+0xc2>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	683a      	ldr	r2, [r7, #0]
 800aa42:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa46:	fb02 f201 	mul.w	r2, r2, r1
 800aa4a:	1a9b      	subs	r3, r3, r2
 800aa4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aa4e:	441a      	add	r2, r3
 800aa50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa52:	1c59      	adds	r1, r3, #1
 800aa54:	6579      	str	r1, [r7, #84]	; 0x54
 800aa56:	7812      	ldrb	r2, [r2, #0]
 800aa58:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800aa5c:	440b      	add	r3, r1
 800aa5e:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa6a:	607b      	str	r3, [r7, #4]
    while (num != 0)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d1e5      	bne.n	800aa3e <ee_number+0x8e>
    }
  }

  if (i > precision) precision = i;
 800aa72:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aa74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa76:	429a      	cmp	r2, r3
 800aa78:	dd01      	ble.n	800aa7e <ee_number+0xce>
 800aa7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa7c:	66fb      	str	r3, [r7, #108]	; 0x6c
  size -= precision;
 800aa7e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aa80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa82:	1ad3      	subs	r3, r2, r3
 800aa84:	66bb      	str	r3, [r7, #104]	; 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 800aa86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa88:	f003 0301 	and.w	r3, r3, #1
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d112      	bne.n	800aab6 <ee_number+0x106>
 800aa90:	e00c      	b.n	800aaac <ee_number+0xfc>
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	1c5a      	adds	r2, r3, #1
 800aa96:	60fa      	str	r2, [r7, #12]
 800aa98:	2220      	movs	r2, #32
 800aa9a:	701a      	strb	r2, [r3, #0]
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	3b01      	subs	r3, #1
 800aaa0:	60bb      	str	r3, [r7, #8]
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d101      	bne.n	800aaac <ee_number+0xfc>
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	e068      	b.n	800ab7e <ee_number+0x1ce>
 800aaac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aaae:	1e5a      	subs	r2, r3, #1
 800aab0:	66ba      	str	r2, [r7, #104]	; 0x68
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	dced      	bgt.n	800aa92 <ee_number+0xe2>
  if (sign) ASSIGN_STR(sign);
 800aab6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d01b      	beq.n	800aaf6 <ee_number+0x146>
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	1c5a      	adds	r2, r3, #1
 800aac2:	60fa      	str	r2, [r7, #12]
 800aac4:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800aac8:	701a      	strb	r2, [r3, #0]
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	3b01      	subs	r3, #1
 800aace:	60bb      	str	r3, [r7, #8]
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d10f      	bne.n	800aaf6 <ee_number+0x146>
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	e051      	b.n	800ab7e <ee_number+0x1ce>
    }
  }
#endif
  
#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	1c5a      	adds	r2, r3, #1
 800aade:	60fa      	str	r2, [r7, #12]
 800aae0:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 800aae4:	701a      	strb	r2, [r3, #0]
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	3b01      	subs	r3, #1
 800aaea:	60bb      	str	r3, [r7, #8]
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d101      	bne.n	800aaf6 <ee_number+0x146>
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	e043      	b.n	800ab7e <ee_number+0x1ce>
 800aaf6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aaf8:	1e5a      	subs	r2, r3, #1
 800aafa:	66ba      	str	r2, [r7, #104]	; 0x68
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	dcec      	bgt.n	800aada <ee_number+0x12a>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 800ab00:	e00c      	b.n	800ab1c <ee_number+0x16c>
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	1c5a      	adds	r2, r3, #1
 800ab06:	60fa      	str	r2, [r7, #12]
 800ab08:	2230      	movs	r2, #48	; 0x30
 800ab0a:	701a      	strb	r2, [r3, #0]
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	3b01      	subs	r3, #1
 800ab10:	60bb      	str	r3, [r7, #8]
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d101      	bne.n	800ab1c <ee_number+0x16c>
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	e030      	b.n	800ab7e <ee_number+0x1ce>
 800ab1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ab1e:	1e5a      	subs	r2, r3, #1
 800ab20:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ab22:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ab24:	429a      	cmp	r2, r3
 800ab26:	dbec      	blt.n	800ab02 <ee_number+0x152>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 800ab28:	e010      	b.n	800ab4c <ee_number+0x19c>
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	1c5a      	adds	r2, r3, #1
 800ab2e:	60fa      	str	r2, [r7, #12]
 800ab30:	f107 0110 	add.w	r1, r7, #16
 800ab34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ab36:	440a      	add	r2, r1
 800ab38:	7812      	ldrb	r2, [r2, #0]
 800ab3a:	701a      	strb	r2, [r3, #0]
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	3b01      	subs	r3, #1
 800ab40:	60bb      	str	r3, [r7, #8]
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d101      	bne.n	800ab4c <ee_number+0x19c>
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	e018      	b.n	800ab7e <ee_number+0x1ce>
 800ab4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ab4e:	1e5a      	subs	r2, r3, #1
 800ab50:	657a      	str	r2, [r7, #84]	; 0x54
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	dce9      	bgt.n	800ab2a <ee_number+0x17a>
  while (size-- > 0) ASSIGN_STR(' ');
 800ab56:	e00c      	b.n	800ab72 <ee_number+0x1c2>
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	1c5a      	adds	r2, r3, #1
 800ab5c:	60fa      	str	r2, [r7, #12]
 800ab5e:	2220      	movs	r2, #32
 800ab60:	701a      	strb	r2, [r3, #0]
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	3b01      	subs	r3, #1
 800ab66:	60bb      	str	r3, [r7, #8]
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d101      	bne.n	800ab72 <ee_number+0x1c2>
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	e005      	b.n	800ab7e <ee_number+0x1ce>
 800ab72:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ab74:	1e5a      	subs	r2, r3, #1
 800ab76:	66ba      	str	r2, [r7, #104]	; 0x68
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	dced      	bgt.n	800ab58 <ee_number+0x1a8>

  return str;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3764      	adds	r7, #100	; 0x64
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bc80      	pop	{r7}
 800ab86:	4770      	bx	lr
 800ab88:	2000000c 	.word	0x2000000c
 800ab8c:	20000010 	.word	0x20000010

0800ab90 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b092      	sub	sp, #72	; 0x48
 800ab94:	af04      	add	r7, sp, #16
 800ab96:	60f8      	str	r0, [r7, #12]
 800ab98:	60b9      	str	r1, [r7, #8]
 800ab9a:	607a      	str	r2, [r7, #4]
 800ab9c:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	dc01      	bgt.n	800aba8 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 800aba4:	2300      	movs	r3, #0
 800aba6:	e142      	b.n	800ae2e <tiny_vsnprintf_like+0x29e>
  }
  
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800abac:	e12a      	b.n	800ae04 <tiny_vsnprintf_like+0x274>
  {
    CHECK_STR_SIZE(buf, str, size);
 800abae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	1ad2      	subs	r2, r2, r3
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	3b01      	subs	r3, #1
 800abb8:	429a      	cmp	r2, r3
 800abba:	f280 8131 	bge.w	800ae20 <tiny_vsnprintf_like+0x290>
    
    if (*fmt != '%')
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	2b25      	cmp	r3, #37	; 0x25
 800abc4:	d006      	beq.n	800abd4 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 800abc6:	687a      	ldr	r2, [r7, #4]
 800abc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abca:	1c59      	adds	r1, r3, #1
 800abcc:	62f9      	str	r1, [r7, #44]	; 0x2c
 800abce:	7812      	ldrb	r2, [r2, #0]
 800abd0:	701a      	strb	r2, [r3, #0]
      continue;
 800abd2:	e114      	b.n	800adfe <tiny_vsnprintf_like+0x26e>
    }
                  
    // Process flags
    flags = 0;
 800abd4:	2300      	movs	r3, #0
 800abd6:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	3301      	adds	r3, #1
 800abdc:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	2b30      	cmp	r3, #48	; 0x30
 800abe4:	d103      	bne.n	800abee <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 800abe6:	6a3b      	ldr	r3, [r7, #32]
 800abe8:	f043 0301 	orr.w	r3, r3, #1
 800abec:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif
    
    // Get field width
    field_width = -1;
 800abee:	f04f 33ff 	mov.w	r3, #4294967295
 800abf2:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	2b2f      	cmp	r3, #47	; 0x2f
 800abfa:	d908      	bls.n	800ac0e <tiny_vsnprintf_like+0x7e>
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	781b      	ldrb	r3, [r3, #0]
 800ac00:	2b39      	cmp	r3, #57	; 0x39
 800ac02:	d804      	bhi.n	800ac0e <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 800ac04:	1d3b      	adds	r3, r7, #4
 800ac06:	4618      	mov	r0, r3
 800ac08:	f7ff feac 	bl	800a964 <ee_skip_atoi>
 800ac0c:	61f8      	str	r0, [r7, #28]
      }
    }
#endif
    
    // Get the precision
    precision = -1;
 800ac0e:	f04f 33ff 	mov.w	r3, #4294967295
 800ac12:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif
    
    // Get the conversion qualifier
    qualifier = -1;
 800ac14:	f04f 33ff 	mov.w	r3, #4294967295
 800ac18:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif
    
    // Default base
    base = 10;
 800ac1a:	230a      	movs	r3, #10
 800ac1c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (*fmt)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	781b      	ldrb	r3, [r3, #0]
 800ac22:	3b58      	subs	r3, #88	; 0x58
 800ac24:	2b20      	cmp	r3, #32
 800ac26:	f200 8094 	bhi.w	800ad52 <tiny_vsnprintf_like+0x1c2>
 800ac2a:	a201      	add	r2, pc, #4	; (adr r2, 800ac30 <tiny_vsnprintf_like+0xa0>)
 800ac2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac30:	0800ad3b 	.word	0x0800ad3b
 800ac34:	0800ad53 	.word	0x0800ad53
 800ac38:	0800ad53 	.word	0x0800ad53
 800ac3c:	0800ad53 	.word	0x0800ad53
 800ac40:	0800ad53 	.word	0x0800ad53
 800ac44:	0800ad53 	.word	0x0800ad53
 800ac48:	0800ad53 	.word	0x0800ad53
 800ac4c:	0800ad53 	.word	0x0800ad53
 800ac50:	0800ad53 	.word	0x0800ad53
 800ac54:	0800ad53 	.word	0x0800ad53
 800ac58:	0800ad53 	.word	0x0800ad53
 800ac5c:	0800acbf 	.word	0x0800acbf
 800ac60:	0800ad49 	.word	0x0800ad49
 800ac64:	0800ad53 	.word	0x0800ad53
 800ac68:	0800ad53 	.word	0x0800ad53
 800ac6c:	0800ad53 	.word	0x0800ad53
 800ac70:	0800ad53 	.word	0x0800ad53
 800ac74:	0800ad49 	.word	0x0800ad49
 800ac78:	0800ad53 	.word	0x0800ad53
 800ac7c:	0800ad53 	.word	0x0800ad53
 800ac80:	0800ad53 	.word	0x0800ad53
 800ac84:	0800ad53 	.word	0x0800ad53
 800ac88:	0800ad53 	.word	0x0800ad53
 800ac8c:	0800ad53 	.word	0x0800ad53
 800ac90:	0800ad53 	.word	0x0800ad53
 800ac94:	0800ad53 	.word	0x0800ad53
 800ac98:	0800ad53 	.word	0x0800ad53
 800ac9c:	0800acdf 	.word	0x0800acdf
 800aca0:	0800ad53 	.word	0x0800ad53
 800aca4:	0800ad9f 	.word	0x0800ad9f
 800aca8:	0800ad53 	.word	0x0800ad53
 800acac:	0800ad53 	.word	0x0800ad53
 800acb0:	0800ad43 	.word	0x0800ad43
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 800acb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb6:	1c5a      	adds	r2, r3, #1
 800acb8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800acba:	2220      	movs	r2, #32
 800acbc:	701a      	strb	r2, [r3, #0]
 800acbe:	69fb      	ldr	r3, [r7, #28]
 800acc0:	3b01      	subs	r3, #1
 800acc2:	61fb      	str	r3, [r7, #28]
 800acc4:	69fb      	ldr	r3, [r7, #28]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	dcf4      	bgt.n	800acb4 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	1d1a      	adds	r2, r3, #4
 800acce:	603a      	str	r2, [r7, #0]
 800acd0:	6819      	ldr	r1, [r3, #0]
 800acd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acd4:	1c5a      	adds	r2, r3, #1
 800acd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800acd8:	b2ca      	uxtb	r2, r1
 800acda:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 800acdc:	e08f      	b.n	800adfe <tiny_vsnprintf_like+0x26e>

      case 's':
        s = va_arg(args, char *);
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	1d1a      	adds	r2, r3, #4
 800ace2:	603a      	str	r2, [r7, #0]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	627b      	str	r3, [r7, #36]	; 0x24
        if (!s) s = "<NULL>";
 800ace8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acea:	2b00      	cmp	r3, #0
 800acec:	d101      	bne.n	800acf2 <tiny_vsnprintf_like+0x162>
 800acee:	4b52      	ldr	r3, [pc, #328]	; (800ae38 <tiny_vsnprintf_like+0x2a8>)
 800acf0:	627b      	str	r3, [r7, #36]	; 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 800acf2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800acf4:	f7f5 fa40 	bl	8000178 <strlen>
 800acf8:	4603      	mov	r3, r0
 800acfa:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 800acfc:	e004      	b.n	800ad08 <tiny_vsnprintf_like+0x178>
 800acfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad00:	1c5a      	adds	r2, r3, #1
 800ad02:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ad04:	2220      	movs	r2, #32
 800ad06:	701a      	strb	r2, [r3, #0]
 800ad08:	69fb      	ldr	r3, [r7, #28]
 800ad0a:	1e5a      	subs	r2, r3, #1
 800ad0c:	61fa      	str	r2, [r7, #28]
 800ad0e:	693a      	ldr	r2, [r7, #16]
 800ad10:	429a      	cmp	r2, r3
 800ad12:	dbf4      	blt.n	800acfe <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 800ad14:	2300      	movs	r3, #0
 800ad16:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad18:	e00a      	b.n	800ad30 <tiny_vsnprintf_like+0x1a0>
 800ad1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad1c:	1c53      	adds	r3, r2, #1
 800ad1e:	627b      	str	r3, [r7, #36]	; 0x24
 800ad20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad22:	1c59      	adds	r1, r3, #1
 800ad24:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ad26:	7812      	ldrb	r2, [r2, #0]
 800ad28:	701a      	strb	r2, [r3, #0]
 800ad2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad2c:	3301      	adds	r3, #1
 800ad2e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ad30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	429a      	cmp	r2, r3
 800ad36:	dbf0      	blt.n	800ad1a <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else        
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 800ad38:	e061      	b.n	800adfe <tiny_vsnprintf_like+0x26e>
        base = 8;
        break;
#endif
      
      case 'X':
        flags |= UPPERCASE;
 800ad3a:	6a3b      	ldr	r3, [r7, #32]
 800ad3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad40:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 800ad42:	2310      	movs	r3, #16
 800ad44:	633b      	str	r3, [r7, #48]	; 0x30
        break;
 800ad46:	e02d      	b.n	800ada4 <tiny_vsnprintf_like+0x214>

      case 'd':
      case 'i':
        flags |= SIGN;
 800ad48:	6a3b      	ldr	r3, [r7, #32]
 800ad4a:	f043 0302 	orr.w	r3, r3, #2
 800ad4e:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 800ad50:	e025      	b.n	800ad9e <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	781b      	ldrb	r3, [r3, #0]
 800ad56:	2b25      	cmp	r3, #37	; 0x25
 800ad58:	d004      	beq.n	800ad64 <tiny_vsnprintf_like+0x1d4>
 800ad5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad5c:	1c5a      	adds	r2, r3, #1
 800ad5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ad60:	2225      	movs	r2, #37	; 0x25
 800ad62:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 800ad64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	1ad2      	subs	r2, r2, r3
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	3b01      	subs	r3, #1
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	da17      	bge.n	800ada2 <tiny_vsnprintf_like+0x212>
        if (*fmt)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	781b      	ldrb	r3, [r3, #0]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d006      	beq.n	800ad88 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 800ad7a:	687a      	ldr	r2, [r7, #4]
 800ad7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad7e:	1c59      	adds	r1, r3, #1
 800ad80:	62f9      	str	r1, [r7, #44]	; 0x2c
 800ad82:	7812      	ldrb	r2, [r2, #0]
 800ad84:	701a      	strb	r2, [r3, #0]
 800ad86:	e002      	b.n	800ad8e <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	3b01      	subs	r3, #1
 800ad8c:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 800ad8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	1ad2      	subs	r2, r2, r3
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	3b01      	subs	r3, #1
 800ad98:	429a      	cmp	r2, r3
 800ad9a:	db2f      	blt.n	800adfc <tiny_vsnprintf_like+0x26c>
 800ad9c:	e002      	b.n	800ada4 <tiny_vsnprintf_like+0x214>
        break;
 800ad9e:	bf00      	nop
 800ada0:	e000      	b.n	800ada4 <tiny_vsnprintf_like+0x214>
        CHECK_STR_SIZE(buf, str, size);
 800ada2:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	2b6c      	cmp	r3, #108	; 0x6c
 800ada8:	d105      	bne.n	800adb6 <tiny_vsnprintf_like+0x226>
      num = va_arg(args, unsigned long);
 800adaa:	683b      	ldr	r3, [r7, #0]
 800adac:	1d1a      	adds	r2, r3, #4
 800adae:	603a      	str	r2, [r7, #0]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	637b      	str	r3, [r7, #52]	; 0x34
 800adb4:	e00f      	b.n	800add6 <tiny_vsnprintf_like+0x246>
    else if (flags & SIGN)
 800adb6:	6a3b      	ldr	r3, [r7, #32]
 800adb8:	f003 0302 	and.w	r3, r3, #2
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	d005      	beq.n	800adcc <tiny_vsnprintf_like+0x23c>
      num = va_arg(args, int);
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	1d1a      	adds	r2, r3, #4
 800adc4:	603a      	str	r2, [r7, #0]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	637b      	str	r3, [r7, #52]	; 0x34
 800adca:	e004      	b.n	800add6 <tiny_vsnprintf_like+0x246>
    else
      num = va_arg(args, unsigned int);
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	1d1a      	adds	r2, r3, #4
 800add0:	603a      	str	r2, [r7, #0]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	637b      	str	r3, [r7, #52]	; 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 800add6:	68bb      	ldr	r3, [r7, #8]
 800add8:	1e5a      	subs	r2, r3, #1
 800adda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	1acb      	subs	r3, r1, r3
 800ade0:	1ad1      	subs	r1, r2, r3
 800ade2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ade4:	6a3b      	ldr	r3, [r7, #32]
 800ade6:	9302      	str	r3, [sp, #8]
 800ade8:	69bb      	ldr	r3, [r7, #24]
 800adea:	9301      	str	r3, [sp, #4]
 800adec:	69fb      	ldr	r3, [r7, #28]
 800adee:	9300      	str	r3, [sp, #0]
 800adf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800adf4:	f7ff fddc 	bl	800a9b0 <ee_number>
 800adf8:	62f8      	str	r0, [r7, #44]	; 0x2c
 800adfa:	e000      	b.n	800adfe <tiny_vsnprintf_like+0x26e>
        continue;
 800adfc:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	3301      	adds	r3, #1
 800ae02:	607b      	str	r3, [r7, #4]
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	f47f aed0 	bne.w	800abae <tiny_vsnprintf_like+0x1e>
 800ae0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	1ad2      	subs	r2, r2, r3
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	3b01      	subs	r3, #1
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	f6bf aec8 	bge.w	800abae <tiny_vsnprintf_like+0x1e>
 800ae1e:	e000      	b.n	800ae22 <tiny_vsnprintf_like+0x292>
    CHECK_STR_SIZE(buf, str, size);
 800ae20:	bf00      	nop
  }

  *str = '\0';
 800ae22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae24:	2200      	movs	r2, #0
 800ae26:	701a      	strb	r2, [r3, #0]
  return str - buf;
 800ae28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	1ad3      	subs	r3, r2, r3
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	3738      	adds	r7, #56	; 0x38
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
 800ae36:	bf00      	nop
 800ae38:	0800bebc 	.word	0x0800bebc

0800ae3c <UTIL_SEQ_Run>:
 * This function can be nested.
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b08c      	sub	sp, #48	; 0x30
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
  /**
   *  When this function is nested, the mask to be applied cannot be larger than the first call
   *  The mask is always getting smaller and smaller
   *  A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 800ae44:	4b67      	ldr	r3, [pc, #412]	; (800afe4 <UTIL_SEQ_Run+0x1a8>)
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	62bb      	str	r3, [r7, #40]	; 0x28
  SuperMask &= Mask_bm;
 800ae4a:	4b66      	ldr	r3, [pc, #408]	; (800afe4 <UTIL_SEQ_Run+0x1a8>)
 800ae4c:	681a      	ldr	r2, [r3, #0]
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	4013      	ands	r3, r2
 800ae52:	4a64      	ldr	r2, [pc, #400]	; (800afe4 <UTIL_SEQ_Run+0x1a8>)
 800ae54:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800ae56:	e083      	b.n	800af60 <UTIL_SEQ_Run+0x124>
  {
    counter = 0U;
 800ae58:	2300      	movs	r3, #0
 800ae5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /**
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800ae5c:	e002      	b.n	800ae64 <UTIL_SEQ_Run+0x28>
    {
      counter++;
 800ae5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae60:	3301      	adds	r3, #1
 800ae62:	62fb      	str	r3, [r7, #44]	; 0x2c
    while((TaskPrio[counter].priority & TaskMask & SuperMask)== 0U)
 800ae64:	4a60      	ldr	r2, [pc, #384]	; (800afe8 <UTIL_SEQ_Run+0x1ac>)
 800ae66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae68:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ae6c:	4b5f      	ldr	r3, [pc, #380]	; (800afec <UTIL_SEQ_Run+0x1b0>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	401a      	ands	r2, r3
 800ae72:	4b5c      	ldr	r3, [pc, #368]	; (800afe4 <UTIL_SEQ_Run+0x1a8>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	4013      	ands	r3, r2
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d0f0      	beq.n	800ae5e <UTIL_SEQ_Run+0x22>
    }

    current_task_set = TaskPrio[counter].priority & TaskMask & SuperMask;
 800ae7c:	4a5a      	ldr	r2, [pc, #360]	; (800afe8 <UTIL_SEQ_Run+0x1ac>)
 800ae7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae80:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800ae84:	4b59      	ldr	r3, [pc, #356]	; (800afec <UTIL_SEQ_Run+0x1b0>)
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	401a      	ands	r2, r3
 800ae8a:	4b56      	ldr	r3, [pc, #344]	; (800afe4 <UTIL_SEQ_Run+0x1a8>)
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	4013      	ands	r3, r2
 800ae90:	627b      	str	r3, [r7, #36]	; 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800ae92:	4a55      	ldr	r2, [pc, #340]	; (800afe8 <UTIL_SEQ_Run+0x1ac>)
 800ae94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae96:	00db      	lsls	r3, r3, #3
 800ae98:	4413      	add	r3, r2
 800ae9a:	685a      	ldr	r2, [r3, #4]
 800ae9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae9e:	4013      	ands	r3, r2
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d106      	bne.n	800aeb2 <UTIL_SEQ_Run+0x76>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 800aea4:	4a50      	ldr	r2, [pc, #320]	; (800afe8 <UTIL_SEQ_Run+0x1ac>)
 800aea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aea8:	00db      	lsls	r3, r3, #3
 800aeaa:	4413      	add	r3, r2
 800aeac:	f04f 32ff 	mov.w	r2, #4294967295
 800aeb0:	605a      	str	r2, [r3, #4]

    /** Read the flag index of the task to be executed
	 *  Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 *  before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800aeb2:	4a4d      	ldr	r2, [pc, #308]	; (800afe8 <UTIL_SEQ_Run+0x1ac>)
 800aeb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeb6:	00db      	lsls	r3, r3, #3
 800aeb8:	4413      	add	r3, r2
 800aeba:	685a      	ldr	r2, [r3, #4]
 800aebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aebe:	4013      	ands	r3, r2
 800aec0:	4618      	mov	r0, r3
 800aec2:	f000 f8f9 	bl	800b0b8 <SEQ_BitPosition>
 800aec6:	4603      	mov	r3, r0
 800aec8:	461a      	mov	r2, r3
 800aeca:	4b49      	ldr	r3, [pc, #292]	; (800aff0 <UTIL_SEQ_Run+0x1b4>)
 800aecc:	601a      	str	r2, [r3, #0]

    /** remove from the roun_robin mask the task that has been selected to be executed */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800aece:	4a46      	ldr	r2, [pc, #280]	; (800afe8 <UTIL_SEQ_Run+0x1ac>)
 800aed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aed2:	00db      	lsls	r3, r3, #3
 800aed4:	4413      	add	r3, r2
 800aed6:	685a      	ldr	r2, [r3, #4]
 800aed8:	4b45      	ldr	r3, [pc, #276]	; (800aff0 <UTIL_SEQ_Run+0x1b4>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	2101      	movs	r1, #1
 800aede:	fa01 f303 	lsl.w	r3, r1, r3
 800aee2:	43db      	mvns	r3, r3
 800aee4:	401a      	ands	r2, r3
 800aee6:	4940      	ldr	r1, [pc, #256]	; (800afe8 <UTIL_SEQ_Run+0x1ac>)
 800aee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeea:	00db      	lsls	r3, r3, #3
 800aeec:	440b      	add	r3, r1
 800aeee:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aef0:	f3ef 8310 	mrs	r3, PRIMASK
 800aef4:	61bb      	str	r3, [r7, #24]
  return(result);
 800aef6:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800aef8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800aefa:	b672      	cpsid	i
}
 800aefc:	bf00      	nop
    /** remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 800aefe:	4b3c      	ldr	r3, [pc, #240]	; (800aff0 <UTIL_SEQ_Run+0x1b4>)
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	2201      	movs	r2, #1
 800af04:	fa02 f303 	lsl.w	r3, r2, r3
 800af08:	43da      	mvns	r2, r3
 800af0a:	4b3a      	ldr	r3, [pc, #232]	; (800aff4 <UTIL_SEQ_Run+0x1b8>)
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4013      	ands	r3, r2
 800af10:	4a38      	ldr	r2, [pc, #224]	; (800aff4 <UTIL_SEQ_Run+0x1b8>)
 800af12:	6013      	str	r3, [r2, #0]
    /** remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800af14:	2302      	movs	r3, #2
 800af16:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af18:	e013      	b.n	800af42 <UTIL_SEQ_Run+0x106>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 800af1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af1c:	3b01      	subs	r3, #1
 800af1e:	4a32      	ldr	r2, [pc, #200]	; (800afe8 <UTIL_SEQ_Run+0x1ac>)
 800af20:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800af24:	4b32      	ldr	r3, [pc, #200]	; (800aff0 <UTIL_SEQ_Run+0x1b4>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	2201      	movs	r2, #1
 800af2a:	fa02 f303 	lsl.w	r3, r2, r3
 800af2e:	43da      	mvns	r2, r3
 800af30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af32:	3b01      	subs	r3, #1
 800af34:	400a      	ands	r2, r1
 800af36:	492c      	ldr	r1, [pc, #176]	; (800afe8 <UTIL_SEQ_Run+0x1ac>)
 800af38:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 800af3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af3e:	3b01      	subs	r3, #1
 800af40:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af44:	2b00      	cmp	r3, #0
 800af46:	d1e8      	bne.n	800af1a <UTIL_SEQ_Run+0xde>
 800af48:	6a3b      	ldr	r3, [r7, #32]
 800af4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af4c:	697b      	ldr	r3, [r7, #20]
 800af4e:	f383 8810 	msr	PRIMASK, r3
}
 800af52:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );
    /** Execute the task */
    TaskCb[CurrentTaskIdx]( );
 800af54:	4b26      	ldr	r3, [pc, #152]	; (800aff0 <UTIL_SEQ_Run+0x1b4>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4a27      	ldr	r2, [pc, #156]	; (800aff8 <UTIL_SEQ_Run+0x1bc>)
 800af5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af5e:	4798      	blx	r3
  while(((TaskSet & TaskMask & SuperMask) != 0U) && ((EvtSet & EvtWaited)==0U))
 800af60:	4b24      	ldr	r3, [pc, #144]	; (800aff4 <UTIL_SEQ_Run+0x1b8>)
 800af62:	681a      	ldr	r2, [r3, #0]
 800af64:	4b21      	ldr	r3, [pc, #132]	; (800afec <UTIL_SEQ_Run+0x1b0>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	401a      	ands	r2, r3
 800af6a:	4b1e      	ldr	r3, [pc, #120]	; (800afe4 <UTIL_SEQ_Run+0x1a8>)
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	4013      	ands	r3, r2
 800af70:	2b00      	cmp	r3, #0
 800af72:	d007      	beq.n	800af84 <UTIL_SEQ_Run+0x148>
 800af74:	4b21      	ldr	r3, [pc, #132]	; (800affc <UTIL_SEQ_Run+0x1c0>)
 800af76:	681a      	ldr	r2, [r3, #0]
 800af78:	4b21      	ldr	r3, [pc, #132]	; (800b000 <UTIL_SEQ_Run+0x1c4>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4013      	ands	r3, r2
 800af7e:	2b00      	cmp	r3, #0
 800af80:	f43f af6a 	beq.w	800ae58 <UTIL_SEQ_Run+0x1c>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 800af84:	4b1a      	ldr	r3, [pc, #104]	; (800aff0 <UTIL_SEQ_Run+0x1b4>)
 800af86:	f04f 32ff 	mov.w	r2, #4294967295
 800af8a:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 800af8c:	f000 f888 	bl	800b0a0 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800af90:	f3ef 8310 	mrs	r3, PRIMASK
 800af94:	613b      	str	r3, [r7, #16]
  return(result);
 800af96:	693b      	ldr	r3, [r7, #16]
  
  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 800af98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800af9a:	b672      	cpsid	i
}
 800af9c:	bf00      	nop
  if (!(((TaskSet & TaskMask & SuperMask) != 0U) || ((EvtSet & EvtWaited)!= 0U))) 
 800af9e:	4b15      	ldr	r3, [pc, #84]	; (800aff4 <UTIL_SEQ_Run+0x1b8>)
 800afa0:	681a      	ldr	r2, [r3, #0]
 800afa2:	4b12      	ldr	r3, [pc, #72]	; (800afec <UTIL_SEQ_Run+0x1b0>)
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	401a      	ands	r2, r3
 800afa8:	4b0e      	ldr	r3, [pc, #56]	; (800afe4 <UTIL_SEQ_Run+0x1a8>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	4013      	ands	r3, r2
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d108      	bne.n	800afc4 <UTIL_SEQ_Run+0x188>
 800afb2:	4b12      	ldr	r3, [pc, #72]	; (800affc <UTIL_SEQ_Run+0x1c0>)
 800afb4:	681a      	ldr	r2, [r3, #0]
 800afb6:	4b12      	ldr	r3, [pc, #72]	; (800b000 <UTIL_SEQ_Run+0x1c4>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4013      	ands	r3, r2
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d101      	bne.n	800afc4 <UTIL_SEQ_Run+0x188>
  {
	UTIL_SEQ_Idle( );
 800afc0:	f7f5 fe36 	bl	8000c30 <UTIL_SEQ_Idle>
 800afc4:	69fb      	ldr	r3, [r7, #28]
 800afc6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	f383 8810 	msr	PRIMASK, r3
}
 800afce:	bf00      	nop
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );
  
  UTIL_SEQ_PostIdle( );
 800afd0:	f000 f86c 	bl	800b0ac <UTIL_SEQ_PostIdle>

  /** restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 800afd4:	4a03      	ldr	r2, [pc, #12]	; (800afe4 <UTIL_SEQ_Run+0x1a8>)
 800afd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afd8:	6013      	str	r3, [r2, #0]

  return;
 800afda:	bf00      	nop
}
 800afdc:	3730      	adds	r7, #48	; 0x30
 800afde:	46bd      	mov	sp, r7
 800afe0:	bd80      	pop	{r7, pc}
 800afe2:	bf00      	nop
 800afe4:	20000018 	.word	0x20000018
 800afe8:	20000434 	.word	0x20000434
 800afec:	20000014 	.word	0x20000014
 800aff0:	200003b0 	.word	0x200003b0
 800aff4:	200003a4 	.word	0x200003a4
 800aff8:	200003b4 	.word	0x200003b4
 800affc:	200003a8 	.word	0x200003a8
 800b000:	200003ac 	.word	0x200003ac

0800b004 <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b088      	sub	sp, #32
 800b008:	af00      	add	r7, sp, #0
 800b00a:	60f8      	str	r0, [r7, #12]
 800b00c:	60b9      	str	r1, [r7, #8]
 800b00e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b010:	f3ef 8310 	mrs	r3, PRIMASK
 800b014:	617b      	str	r3, [r7, #20]
  return(result);
 800b016:	697b      	ldr	r3, [r7, #20]
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 800b018:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b01a:	b672      	cpsid	i
}
 800b01c:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 800b01e:	68f8      	ldr	r0, [r7, #12]
 800b020:	f000 f84a 	bl	800b0b8 <SEQ_BitPosition>
 800b024:	4603      	mov	r3, r0
 800b026:	4619      	mov	r1, r3
 800b028:	4a06      	ldr	r2, [pc, #24]	; (800b044 <UTIL_SEQ_RegTask+0x40>)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800b030:	69fb      	ldr	r3, [r7, #28]
 800b032:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b034:	69bb      	ldr	r3, [r7, #24]
 800b036:	f383 8810 	msr	PRIMASK, r3
}
 800b03a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 800b03c:	bf00      	nop
}
 800b03e:	3720      	adds	r7, #32
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}
 800b044:	200003b4 	.word	0x200003b4

0800b048 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 800b048:	b480      	push	{r7}
 800b04a:	b087      	sub	sp, #28
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b052:	f3ef 8310 	mrs	r3, PRIMASK
 800b056:	60fb      	str	r3, [r7, #12]
  return(result);
 800b058:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 800b05a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b05c:	b672      	cpsid	i
}
 800b05e:	bf00      	nop

  TaskSet |= TaskId_bm;
 800b060:	4b0d      	ldr	r3, [pc, #52]	; (800b098 <UTIL_SEQ_SetTask+0x50>)
 800b062:	681a      	ldr	r2, [r3, #0]
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	4313      	orrs	r3, r2
 800b068:	4a0b      	ldr	r2, [pc, #44]	; (800b098 <UTIL_SEQ_SetTask+0x50>)
 800b06a:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 800b06c:	4a0b      	ldr	r2, [pc, #44]	; (800b09c <UTIL_SEQ_SetTask+0x54>)
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	431a      	orrs	r2, r3
 800b078:	4908      	ldr	r1, [pc, #32]	; (800b09c <UTIL_SEQ_SetTask+0x54>)
 800b07a:	683b      	ldr	r3, [r7, #0]
 800b07c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	f383 8810 	msr	PRIMASK, r3
}
 800b08a:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 800b08c:	bf00      	nop
}
 800b08e:	371c      	adds	r7, #28
 800b090:	46bd      	mov	sp, r7
 800b092:	bc80      	pop	{r7}
 800b094:	4770      	bx	lr
 800b096:	bf00      	nop
 800b098:	200003a4 	.word	0x200003a4
 800b09c:	20000434 	.word	0x20000434

0800b0a0 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b0a4:	bf00      	nop
}
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bc80      	pop	{r7}
 800b0aa:	4770      	bx	lr

0800b0ac <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	af00      	add	r7, sp, #0
  /**
   * Unless specified by the application, there is nothing to be done
   */
  return;
 800b0b0:	bf00      	nop
}
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bc80      	pop	{r7}
 800b0b6:	4770      	bx	lr

0800b0b8 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b085      	sub	sp, #20
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  uint8_t n = 0U;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	73fb      	strb	r3, [r7, #15]

  if ((Value & 0xFFFF0000U) == 0U)  { n  = 16U; Value <<= 16U;  }
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	0c1b      	lsrs	r3, r3, #16
 800b0c8:	041b      	lsls	r3, r3, #16
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d104      	bne.n	800b0d8 <SEQ_BitPosition+0x20>
 800b0ce:	2310      	movs	r3, #16
 800b0d0:	73fb      	strb	r3, [r7, #15]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	041b      	lsls	r3, r3, #16
 800b0d6:	607b      	str	r3, [r7, #4]
  if ((Value & 0xFF000000U) == 0U)  { n +=  8U; Value <<=  8U;  }
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d105      	bne.n	800b0ee <SEQ_BitPosition+0x36>
 800b0e2:	7bfb      	ldrb	r3, [r7, #15]
 800b0e4:	3308      	adds	r3, #8
 800b0e6:	73fb      	strb	r3, [r7, #15]
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	021b      	lsls	r3, r3, #8
 800b0ec:	607b      	str	r3, [r7, #4]
  if ((Value & 0xF0000000U) == 0U)  { n +=  4U; Value <<=  4U;  }
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d105      	bne.n	800b104 <SEQ_BitPosition+0x4c>
 800b0f8:	7bfb      	ldrb	r3, [r7, #15]
 800b0fa:	3304      	adds	r3, #4
 800b0fc:	73fb      	strb	r3, [r7, #15]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	011b      	lsls	r3, r3, #4
 800b102:	607b      	str	r3, [r7, #4]

  n += SEQ_clz_table_4bit[Value >> (32-4)];
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	0f1b      	lsrs	r3, r3, #28
 800b108:	4a06      	ldr	r2, [pc, #24]	; (800b124 <SEQ_BitPosition+0x6c>)
 800b10a:	5cd2      	ldrb	r2, [r2, r3]
 800b10c:	7bfb      	ldrb	r3, [r7, #15]
 800b10e:	4413      	add	r3, r2
 800b110:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 800b112:	7bfb      	ldrb	r3, [r7, #15]
 800b114:	f1c3 031f 	rsb	r3, r3, #31
 800b118:	b2db      	uxtb	r3, r3
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3714      	adds	r7, #20
 800b11e:	46bd      	mov	sp, r7
 800b120:	bc80      	pop	{r7}
 800b122:	4770      	bx	lr
 800b124:	0800c12c 	.word	0x0800c12c

0800b128 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 800b12c:	4b04      	ldr	r3, [pc, #16]	; (800b140 <UTIL_TIMER_Init+0x18>)
 800b12e:	2200      	movs	r2, #0
 800b130:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 800b132:	4b04      	ldr	r3, [pc, #16]	; (800b144 <UTIL_TIMER_Init+0x1c>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	4798      	blx	r3
 800b138:	4603      	mov	r3, r0
}
 800b13a:	4618      	mov	r0, r3
 800b13c:	bd80      	pop	{r7, pc}
 800b13e:	bf00      	nop
 800b140:	20000444 	.word	0x20000444
 800b144:	0800bf7c 	.word	0x0800bf7c

0800b148 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	60f8      	str	r0, [r7, #12]
 800b150:	60b9      	str	r1, [r7, #8]
 800b152:	603b      	str	r3, [r7, #0]
 800b154:	4613      	mov	r3, r2
 800b156:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d023      	beq.n	800b1a6 <UTIL_TIMER_Create+0x5e>
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d020      	beq.n	800b1a6 <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	2200      	movs	r2, #0
 800b168:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 800b16a:	4b11      	ldr	r3, [pc, #68]	; (800b1b0 <UTIL_TIMER_Create+0x68>)
 800b16c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b16e:	68b8      	ldr	r0, [r7, #8]
 800b170:	4798      	blx	r3
 800b172:	4602      	mov	r2, r0
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	2200      	movs	r2, #0
 800b17c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	2200      	movs	r2, #0
 800b182:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2200      	movs	r2, #0
 800b188:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	683a      	ldr	r2, [r7, #0]
 800b18e:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	69ba      	ldr	r2, [r7, #24]
 800b194:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	79fa      	ldrb	r2, [r7, #7]
 800b19a:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	2200      	movs	r2, #0
 800b1a0:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	e000      	b.n	800b1a8 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 800b1a6:	2301      	movs	r3, #1
  }
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3710      	adds	r7, #16
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}
 800b1b0:	0800bf7c 	.word	0x0800bf7c

0800b1b4 <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b08a      	sub	sp, #40	; 0x28
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d056      	beq.n	800b276 <UTIL_TIMER_Start+0xc2>
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 f9a9 	bl	800b520 <TimerExists>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	f083 0301 	eor.w	r3, r3, #1
 800b1d4:	b2db      	uxtb	r3, r3
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d04d      	beq.n	800b276 <UTIL_TIMER_Start+0xc2>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	7a5b      	ldrb	r3, [r3, #9]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d149      	bne.n	800b276 <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1e2:	f3ef 8310 	mrs	r3, PRIMASK
 800b1e6:	613b      	str	r3, [r7, #16]
  return(result);
 800b1e8:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b1ea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800b1ec:	b672      	cpsid	i
}
 800b1ee:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	685b      	ldr	r3, [r3, #4]
 800b1f4:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 800b1f6:	4b24      	ldr	r3, [pc, #144]	; (800b288 <UTIL_TIMER_Start+0xd4>)
 800b1f8:	6a1b      	ldr	r3, [r3, #32]
 800b1fa:	4798      	blx	r3
 800b1fc:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 800b1fe:	6a3a      	ldr	r2, [r7, #32]
 800b200:	69bb      	ldr	r3, [r7, #24]
 800b202:	429a      	cmp	r2, r3
 800b204:	d201      	bcs.n	800b20a <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 800b206:	69bb      	ldr	r3, [r7, #24]
 800b208:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	6a3a      	ldr	r2, [r7, #32]
 800b20e:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2200      	movs	r2, #0
 800b214:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	2201      	movs	r2, #1
 800b21a:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2200      	movs	r2, #0
 800b220:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 800b222:	4b1a      	ldr	r3, [pc, #104]	; (800b28c <UTIL_TIMER_Start+0xd8>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d106      	bne.n	800b238 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 800b22a:	4b17      	ldr	r3, [pc, #92]	; (800b288 <UTIL_TIMER_Start+0xd4>)
 800b22c:	691b      	ldr	r3, [r3, #16]
 800b22e:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f000 f9eb 	bl	800b60c <TimerInsertNewHeadTimer>
 800b236:	e017      	b.n	800b268 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 800b238:	4b13      	ldr	r3, [pc, #76]	; (800b288 <UTIL_TIMER_Start+0xd4>)
 800b23a:	699b      	ldr	r3, [r3, #24]
 800b23c:	4798      	blx	r3
 800b23e:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681a      	ldr	r2, [r3, #0]
 800b244:	697b      	ldr	r3, [r7, #20]
 800b246:	441a      	add	r2, r3
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681a      	ldr	r2, [r3, #0]
 800b250:	4b0e      	ldr	r3, [pc, #56]	; (800b28c <UTIL_TIMER_Start+0xd8>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	429a      	cmp	r2, r3
 800b258:	d203      	bcs.n	800b262 <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f000 f9d6 	bl	800b60c <TimerInsertNewHeadTimer>
 800b260:	e002      	b.n	800b268 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 f9a2 	bl	800b5ac <TimerInsertTimer>
 800b268:	69fb      	ldr	r3, [r7, #28]
 800b26a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	f383 8810 	msr	PRIMASK, r3
}
 800b272:	bf00      	nop
  {
 800b274:	e002      	b.n	800b27c <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 800b276:	2301      	movs	r3, #1
 800b278:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800b27c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b280:	4618      	mov	r0, r3
 800b282:	3728      	adds	r7, #40	; 0x28
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}
 800b288:	0800bf7c 	.word	0x0800bf7c
 800b28c:	20000444 	.word	0x20000444

0800b290 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b088      	sub	sp, #32
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b298:	2300      	movs	r3, #0
 800b29a:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d05b      	beq.n	800b35a <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b2a2:	f3ef 8310 	mrs	r3, PRIMASK
 800b2a6:	60fb      	str	r3, [r7, #12]
  return(result);
 800b2a8:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b2aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b2ac:	b672      	cpsid	i
}
 800b2ae:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 800b2b0:	4b2d      	ldr	r3, [pc, #180]	; (800b368 <UTIL_TIMER_Stop+0xd8>)
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 800b2b6:	4b2c      	ldr	r3, [pc, #176]	; (800b368 <UTIL_TIMER_Stop+0xd8>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 800b2c2:	4b29      	ldr	r3, [pc, #164]	; (800b368 <UTIL_TIMER_Stop+0xd8>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d041      	beq.n	800b34e <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 800b2d0:	4b25      	ldr	r3, [pc, #148]	; (800b368 <UTIL_TIMER_Stop+0xd8>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	687a      	ldr	r2, [r7, #4]
 800b2d6:	429a      	cmp	r2, r3
 800b2d8:	d134      	bne.n	800b344 <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 800b2da:	4b23      	ldr	r3, [pc, #140]	; (800b368 <UTIL_TIMER_Stop+0xd8>)
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 800b2e2:	4b21      	ldr	r3, [pc, #132]	; (800b368 <UTIL_TIMER_Stop+0xd8>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	695b      	ldr	r3, [r3, #20]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d00a      	beq.n	800b302 <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 800b2ec:	4b1e      	ldr	r3, [pc, #120]	; (800b368 <UTIL_TIMER_Stop+0xd8>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	695b      	ldr	r3, [r3, #20]
 800b2f2:	4a1d      	ldr	r2, [pc, #116]	; (800b368 <UTIL_TIMER_Stop+0xd8>)
 800b2f4:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 800b2f6:	4b1c      	ldr	r3, [pc, #112]	; (800b368 <UTIL_TIMER_Stop+0xd8>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	f000 f92c 	bl	800b558 <TimerSetTimeout>
 800b300:	e023      	b.n	800b34a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 800b302:	4b1a      	ldr	r3, [pc, #104]	; (800b36c <UTIL_TIMER_Stop+0xdc>)
 800b304:	68db      	ldr	r3, [r3, #12]
 800b306:	4798      	blx	r3
            TimerListHead = NULL;
 800b308:	4b17      	ldr	r3, [pc, #92]	; (800b368 <UTIL_TIMER_Stop+0xd8>)
 800b30a:	2200      	movs	r2, #0
 800b30c:	601a      	str	r2, [r3, #0]
 800b30e:	e01c      	b.n	800b34a <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 800b310:	697a      	ldr	r2, [r7, #20]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	429a      	cmp	r2, r3
 800b316:	d110      	bne.n	800b33a <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	695b      	ldr	r3, [r3, #20]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d006      	beq.n	800b32e <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	695b      	ldr	r3, [r3, #20]
 800b324:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800b326:	69bb      	ldr	r3, [r7, #24]
 800b328:	697a      	ldr	r2, [r7, #20]
 800b32a:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 800b32c:	e00d      	b.n	800b34a <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 800b32e:	2300      	movs	r3, #0
 800b330:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 800b332:	69bb      	ldr	r3, [r7, #24]
 800b334:	697a      	ldr	r2, [r7, #20]
 800b336:	615a      	str	r2, [r3, #20]
            break;
 800b338:	e007      	b.n	800b34a <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	695b      	ldr	r3, [r3, #20]
 800b342:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 800b344:	697b      	ldr	r3, [r7, #20]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d1e2      	bne.n	800b310 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 800b34a:	2300      	movs	r3, #0
 800b34c:	77fb      	strb	r3, [r7, #31]
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	f383 8810 	msr	PRIMASK, r3
}
 800b358:	e001      	b.n	800b35e <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 800b35a:	2301      	movs	r3, #1
 800b35c:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 800b35e:	7ffb      	ldrb	r3, [r7, #31]
}
 800b360:	4618      	mov	r0, r3
 800b362:	3720      	adds	r7, #32
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}
 800b368:	20000444 	.word	0x20000444
 800b36c:	0800bf7c 	.word	0x0800bf7c

0800b370 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b084      	sub	sp, #16
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
 800b378:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 800b37a:	2300      	movs	r3, #0
 800b37c:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d102      	bne.n	800b38a <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 800b384:	2301      	movs	r3, #1
 800b386:	73fb      	strb	r3, [r7, #15]
 800b388:	e014      	b.n	800b3b4 <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 800b38a:	4b0d      	ldr	r3, [pc, #52]	; (800b3c0 <UTIL_TIMER_SetPeriod+0x50>)
 800b38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b38e:	6838      	ldr	r0, [r7, #0]
 800b390:	4798      	blx	r3
 800b392:	4602      	mov	r2, r0
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 800b398:	6878      	ldr	r0, [r7, #4]
 800b39a:	f000 f8c1 	bl	800b520 <TimerExists>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d007      	beq.n	800b3b4 <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	f7ff ff73 	bl	800b290 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f7ff ff02 	bl	800b1b4 <UTIL_TIMER_Start>
 800b3b0:	4603      	mov	r3, r0
 800b3b2:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 800b3b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3b6:	4618      	mov	r0, r3
 800b3b8:	3710      	adds	r7, #16
 800b3ba:	46bd      	mov	sp, r7
 800b3bc:	bd80      	pop	{r7, pc}
 800b3be:	bf00      	nop
 800b3c0:	0800bf7c 	.word	0x0800bf7c

0800b3c4 <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 800b3c4:	b590      	push	{r4, r7, lr}
 800b3c6:	b089      	sub	sp, #36	; 0x24
 800b3c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b3ca:	f3ef 8310 	mrs	r3, PRIMASK
 800b3ce:	60bb      	str	r3, [r7, #8]
  return(result);
 800b3d0:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 800b3d2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800b3d4:	b672      	cpsid	i
}
 800b3d6:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 800b3d8:	4b38      	ldr	r3, [pc, #224]	; (800b4bc <UTIL_TIMER_IRQ_Handler+0xf8>)
 800b3da:	695b      	ldr	r3, [r3, #20]
 800b3dc:	4798      	blx	r3
 800b3de:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 800b3e0:	4b36      	ldr	r3, [pc, #216]	; (800b4bc <UTIL_TIMER_IRQ_Handler+0xf8>)
 800b3e2:	691b      	ldr	r3, [r3, #16]
 800b3e4:	4798      	blx	r3
 800b3e6:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 800b3e8:	693a      	ldr	r2, [r7, #16]
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	1ad3      	subs	r3, r2, r3
 800b3ee:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 800b3f0:	4b33      	ldr	r3, [pc, #204]	; (800b4c0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d037      	beq.n	800b468 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 800b3f8:	4b31      	ldr	r3, [pc, #196]	; (800b4c0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 800b3fe:	69fb      	ldr	r3, [r7, #28]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	68fa      	ldr	r2, [r7, #12]
 800b404:	429a      	cmp	r2, r3
 800b406:	d206      	bcs.n	800b416 <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 800b408:	69fb      	ldr	r3, [r7, #28]
 800b40a:	681a      	ldr	r2, [r3, #0]
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	1ad2      	subs	r2, r2, r3
 800b410:	69fb      	ldr	r3, [r7, #28]
 800b412:	601a      	str	r2, [r3, #0]
 800b414:	e002      	b.n	800b41c <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 800b416:	69fb      	ldr	r3, [r7, #28]
 800b418:	2200      	movs	r2, #0
 800b41a:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 800b41c:	69fb      	ldr	r3, [r7, #28]
 800b41e:	695b      	ldr	r3, [r3, #20]
 800b420:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 800b422:	69fb      	ldr	r3, [r7, #28]
 800b424:	2b00      	cmp	r3, #0
 800b426:	d1ea      	bne.n	800b3fe <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800b428:	e01e      	b.n	800b468 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 800b42a:	4b25      	ldr	r3, [pc, #148]	; (800b4c0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 800b430:	4b23      	ldr	r3, [pc, #140]	; (800b4c0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	695b      	ldr	r3, [r3, #20]
 800b436:	4a22      	ldr	r2, [pc, #136]	; (800b4c0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b438:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 800b43a:	69fb      	ldr	r3, [r7, #28]
 800b43c:	2200      	movs	r2, #0
 800b43e:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 800b440:	69fb      	ldr	r3, [r7, #28]
 800b442:	2200      	movs	r2, #0
 800b444:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 800b446:	69fb      	ldr	r3, [r7, #28]
 800b448:	68db      	ldr	r3, [r3, #12]
 800b44a:	69fa      	ldr	r2, [r7, #28]
 800b44c:	6912      	ldr	r2, [r2, #16]
 800b44e:	4610      	mov	r0, r2
 800b450:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 800b452:	69fb      	ldr	r3, [r7, #28]
 800b454:	7adb      	ldrb	r3, [r3, #11]
 800b456:	2b01      	cmp	r3, #1
 800b458:	d106      	bne.n	800b468 <UTIL_TIMER_IRQ_Handler+0xa4>
 800b45a:	69fb      	ldr	r3, [r7, #28]
 800b45c:	7a9b      	ldrb	r3, [r3, #10]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d102      	bne.n	800b468 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 800b462:	69f8      	ldr	r0, [r7, #28]
 800b464:	f7ff fea6 	bl	800b1b4 <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 800b468:	4b15      	ldr	r3, [pc, #84]	; (800b4c0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d00d      	beq.n	800b48c <UTIL_TIMER_IRQ_Handler+0xc8>
 800b470:	4b13      	ldr	r3, [pc, #76]	; (800b4c0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d0d7      	beq.n	800b42a <UTIL_TIMER_IRQ_Handler+0x66>
 800b47a:	4b11      	ldr	r3, [pc, #68]	; (800b4c0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	681c      	ldr	r4, [r3, #0]
 800b480:	4b0e      	ldr	r3, [pc, #56]	; (800b4bc <UTIL_TIMER_IRQ_Handler+0xf8>)
 800b482:	699b      	ldr	r3, [r3, #24]
 800b484:	4798      	blx	r3
 800b486:	4603      	mov	r3, r0
 800b488:	429c      	cmp	r4, r3
 800b48a:	d3ce      	bcc.n	800b42a <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 800b48c:	4b0c      	ldr	r3, [pc, #48]	; (800b4c0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d009      	beq.n	800b4a8 <UTIL_TIMER_IRQ_Handler+0xe4>
 800b494:	4b0a      	ldr	r3, [pc, #40]	; (800b4c0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	7a1b      	ldrb	r3, [r3, #8]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d104      	bne.n	800b4a8 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 800b49e:	4b08      	ldr	r3, [pc, #32]	; (800b4c0 <UTIL_TIMER_IRQ_Handler+0xfc>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f000 f858 	bl	800b558 <TimerSetTimeout>
 800b4a8:	69bb      	ldr	r3, [r7, #24]
 800b4aa:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f383 8810 	msr	PRIMASK, r3
}
 800b4b2:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 800b4b4:	bf00      	nop
 800b4b6:	3724      	adds	r7, #36	; 0x24
 800b4b8:	46bd      	mov	sp, r7
 800b4ba:	bd90      	pop	{r4, r7, pc}
 800b4bc:	0800bf7c 	.word	0x0800bf7c
 800b4c0:	20000444 	.word	0x20000444

0800b4c4 <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b082      	sub	sp, #8
 800b4c8:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 800b4ca:	4b06      	ldr	r3, [pc, #24]	; (800b4e4 <UTIL_TIMER_GetCurrentTime+0x20>)
 800b4cc:	69db      	ldr	r3, [r3, #28]
 800b4ce:	4798      	blx	r3
 800b4d0:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 800b4d2:	4b04      	ldr	r3, [pc, #16]	; (800b4e4 <UTIL_TIMER_GetCurrentTime+0x20>)
 800b4d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	4798      	blx	r3
 800b4da:	4603      	mov	r3, r0
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3708      	adds	r7, #8
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}
 800b4e4:	0800bf7c 	.word	0x0800bf7c

0800b4e8 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b084      	sub	sp, #16
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 800b4f0:	4b0a      	ldr	r3, [pc, #40]	; (800b51c <UTIL_TIMER_GetElapsedTime+0x34>)
 800b4f2:	69db      	ldr	r3, [r3, #28]
 800b4f4:	4798      	blx	r3
 800b4f6:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 800b4f8:	4b08      	ldr	r3, [pc, #32]	; (800b51c <UTIL_TIMER_GetElapsedTime+0x34>)
 800b4fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	4798      	blx	r3
 800b500:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 800b502:	4b06      	ldr	r3, [pc, #24]	; (800b51c <UTIL_TIMER_GetElapsedTime+0x34>)
 800b504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b506:	68f9      	ldr	r1, [r7, #12]
 800b508:	68ba      	ldr	r2, [r7, #8]
 800b50a:	1a8a      	subs	r2, r1, r2
 800b50c:	4610      	mov	r0, r2
 800b50e:	4798      	blx	r3
 800b510:	4603      	mov	r3, r0
}
 800b512:	4618      	mov	r0, r3
 800b514:	3710      	adds	r7, #16
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}
 800b51a:	bf00      	nop
 800b51c:	0800bf7c 	.word	0x0800bf7c

0800b520 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 800b520:	b480      	push	{r7}
 800b522:	b085      	sub	sp, #20
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800b528:	4b0a      	ldr	r3, [pc, #40]	; (800b554 <TimerExists+0x34>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 800b52e:	e008      	b.n	800b542 <TimerExists+0x22>
  {
    if( cur == TimerObject )
 800b530:	68fa      	ldr	r2, [r7, #12]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	429a      	cmp	r2, r3
 800b536:	d101      	bne.n	800b53c <TimerExists+0x1c>
    {
      return true;
 800b538:	2301      	movs	r3, #1
 800b53a:	e006      	b.n	800b54a <TimerExists+0x2a>
    }
    cur = cur->Next;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	695b      	ldr	r3, [r3, #20]
 800b540:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d1f3      	bne.n	800b530 <TimerExists+0x10>
  }
  return false;
 800b548:	2300      	movs	r3, #0
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3714      	adds	r7, #20
 800b54e:	46bd      	mov	sp, r7
 800b550:	bc80      	pop	{r7}
 800b552:	4770      	bx	lr
 800b554:	20000444 	.word	0x20000444

0800b558 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 800b558:	b590      	push	{r4, r7, lr}
 800b55a:	b085      	sub	sp, #20
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 800b560:	4b11      	ldr	r3, [pc, #68]	; (800b5a8 <TimerSetTimeout+0x50>)
 800b562:	6a1b      	ldr	r3, [r3, #32]
 800b564:	4798      	blx	r3
 800b566:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2201      	movs	r2, #1
 800b56c:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681c      	ldr	r4, [r3, #0]
 800b572:	4b0d      	ldr	r3, [pc, #52]	; (800b5a8 <TimerSetTimeout+0x50>)
 800b574:	699b      	ldr	r3, [r3, #24]
 800b576:	4798      	blx	r3
 800b578:	4602      	mov	r2, r0
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	4413      	add	r3, r2
 800b57e:	429c      	cmp	r4, r3
 800b580:	d207      	bcs.n	800b592 <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800b582:	4b09      	ldr	r3, [pc, #36]	; (800b5a8 <TimerSetTimeout+0x50>)
 800b584:	699b      	ldr	r3, [r3, #24]
 800b586:	4798      	blx	r3
 800b588:	4602      	mov	r2, r0
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	441a      	add	r2, r3
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 800b592:	4b05      	ldr	r3, [pc, #20]	; (800b5a8 <TimerSetTimeout+0x50>)
 800b594:	689b      	ldr	r3, [r3, #8]
 800b596:	687a      	ldr	r2, [r7, #4]
 800b598:	6812      	ldr	r2, [r2, #0]
 800b59a:	4610      	mov	r0, r2
 800b59c:	4798      	blx	r3
}
 800b59e:	bf00      	nop
 800b5a0:	3714      	adds	r7, #20
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	bd90      	pop	{r4, r7, pc}
 800b5a6:	bf00      	nop
 800b5a8:	0800bf7c 	.word	0x0800bf7c

0800b5ac <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 800b5ac:	b480      	push	{r7}
 800b5ae:	b085      	sub	sp, #20
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800b5b4:	4b14      	ldr	r3, [pc, #80]	; (800b608 <TimerInsertTimer+0x5c>)
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 800b5ba:	4b13      	ldr	r3, [pc, #76]	; (800b608 <TimerInsertTimer+0x5c>)
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	695b      	ldr	r3, [r3, #20]
 800b5c0:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 800b5c2:	e012      	b.n	800b5ea <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681a      	ldr	r2, [r3, #0]
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d905      	bls.n	800b5dc <TimerInsertTimer+0x30>
    {
        cur = next;
 800b5d0:	68bb      	ldr	r3, [r7, #8]
 800b5d2:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	695b      	ldr	r3, [r3, #20]
 800b5d8:	60bb      	str	r3, [r7, #8]
 800b5da:	e006      	b.n	800b5ea <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	687a      	ldr	r2, [r7, #4]
 800b5e0:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	68ba      	ldr	r2, [r7, #8]
 800b5e6:	615a      	str	r2, [r3, #20]
        return;
 800b5e8:	e009      	b.n	800b5fe <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	695b      	ldr	r3, [r3, #20]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d1e8      	bne.n	800b5c4 <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	687a      	ldr	r2, [r7, #4]
 800b5f6:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	615a      	str	r2, [r3, #20]
}
 800b5fe:	3714      	adds	r7, #20
 800b600:	46bd      	mov	sp, r7
 800b602:	bc80      	pop	{r7}
 800b604:	4770      	bx	lr
 800b606:	bf00      	nop
 800b608:	20000444 	.word	0x20000444

0800b60c <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b084      	sub	sp, #16
 800b610:	af00      	add	r7, sp, #0
 800b612:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800b614:	4b0b      	ldr	r3, [pc, #44]	; (800b644 <TimerInsertNewHeadTimer+0x38>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d002      	beq.n	800b626 <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	2200      	movs	r2, #0
 800b624:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	68fa      	ldr	r2, [r7, #12]
 800b62a:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 800b62c:	4a05      	ldr	r2, [pc, #20]	; (800b644 <TimerInsertNewHeadTimer+0x38>)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 800b632:	4b04      	ldr	r3, [pc, #16]	; (800b644 <TimerInsertNewHeadTimer+0x38>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	4618      	mov	r0, r3
 800b638:	f7ff ff8e 	bl	800b558 <TimerSetTimeout>
}
 800b63c:	bf00      	nop
 800b63e:	3710      	adds	r7, #16
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}
 800b644:	20000444 	.word	0x20000444

0800b648 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800b64c:	2218      	movs	r2, #24
 800b64e:	2100      	movs	r1, #0
 800b650:	4807      	ldr	r0, [pc, #28]	; (800b670 <UTIL_ADV_TRACE_Init+0x28>)
 800b652:	f7ff f8fb 	bl	800a84c <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 800b656:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b65a:	2100      	movs	r1, #0
 800b65c:	4805      	ldr	r0, [pc, #20]	; (800b674 <UTIL_ADV_TRACE_Init+0x2c>)
 800b65e:	f7ff f8f5 	bl	800a84c <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 800b662:	4b05      	ldr	r3, [pc, #20]	; (800b678 <UTIL_ADV_TRACE_Init+0x30>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	4805      	ldr	r0, [pc, #20]	; (800b67c <UTIL_ADV_TRACE_Init+0x34>)
 800b668:	4798      	blx	r3
 800b66a:	4603      	mov	r3, r0
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	bd80      	pop	{r7, pc}
 800b670:	20000448 	.word	0x20000448
 800b674:	20000460 	.word	0x20000460
 800b678:	0800bfbc 	.word	0x0800bfbc
 800b67c:	0800b8c9 	.word	0x0800b8c9

0800b680 <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 800b680:	b408      	push	{r3}
 800b682:	b580      	push	{r7, lr}
 800b684:	b08d      	sub	sp, #52	; 0x34
 800b686:	af00      	add	r7, sp, #0
 800b688:	60f8      	str	r0, [r7, #12]
 800b68a:	60b9      	str	r1, [r7, #8]
 800b68c:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 800b68e:	2300      	movs	r3, #0
 800b690:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 800b692:	2300      	movs	r3, #0
 800b694:	85bb      	strh	r3, [r7, #44]	; 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800b696:	4b38      	ldr	r3, [pc, #224]	; (800b778 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 800b698:	7a1b      	ldrb	r3, [r3, #8]
 800b69a:	461a      	mov	r2, r3
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d902      	bls.n	800b6a8 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 800b6a2:	f06f 0304 	mvn.w	r3, #4
 800b6a6:	e05f      	b.n	800b768 <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 800b6a8:	4b33      	ldr	r3, [pc, #204]	; (800b778 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 800b6aa:	68da      	ldr	r2, [r3, #12]
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	4013      	ands	r3, r2
 800b6b0:	68ba      	ldr	r2, [r7, #8]
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	d002      	beq.n	800b6bc <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 800b6b6:	f06f 0305 	mvn.w	r3, #5
 800b6ba:	e055      	b.n	800b768 <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800b6bc:	4b2e      	ldr	r3, [pc, #184]	; (800b778 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 800b6be:	685b      	ldr	r3, [r3, #4]
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d00a      	beq.n	800b6da <UTIL_ADV_TRACE_COND_FSend+0x5a>
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d007      	beq.n	800b6da <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 800b6ca:	4b2b      	ldr	r3, [pc, #172]	; (800b778 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 800b6cc:	685b      	ldr	r3, [r3, #4]
 800b6ce:	f107 0116 	add.w	r1, r7, #22
 800b6d2:	f107 0218 	add.w	r2, r7, #24
 800b6d6:	4610      	mov	r0, r2
 800b6d8:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 800b6da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b6de:	62bb      	str	r3, [r7, #40]	; 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800b6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b6e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b6e8:	4824      	ldr	r0, [pc, #144]	; (800b77c <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 800b6ea:	f7ff fa51 	bl	800ab90 <tiny_vsnprintf_like>
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	85bb      	strh	r3, [r7, #44]	; 0x2c

  TRACE_Lock();
 800b6f2:	f000 f9f3 	bl	800badc <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 800b6f6:	8afa      	ldrh	r2, [r7, #22]
 800b6f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b6fa:	4413      	add	r3, r2
 800b6fc:	b29b      	uxth	r3, r3
 800b6fe:	f107 0214 	add.w	r2, r7, #20
 800b702:	4611      	mov	r1, r2
 800b704:	4618      	mov	r0, r3
 800b706:	f000 f96b 	bl	800b9e0 <TRACE_AllocateBufer>
 800b70a:	4603      	mov	r3, r0
 800b70c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b710:	d026      	beq.n	800b760 <UTIL_ADV_TRACE_COND_FSend+0xe0>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 800b712:	2300      	movs	r3, #0
 800b714:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b716:	e00f      	b.n	800b738 <UTIL_ADV_TRACE_COND_FSend+0xb8>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800b718:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b71a:	8aba      	ldrh	r2, [r7, #20]
 800b71c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800b720:	440b      	add	r3, r1
 800b722:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 800b726:	4b16      	ldr	r3, [pc, #88]	; (800b780 <UTIL_ADV_TRACE_COND_FSend+0x100>)
 800b728:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 800b72a:	8abb      	ldrh	r3, [r7, #20]
 800b72c:	3301      	adds	r3, #1
 800b72e:	b29b      	uxth	r3, r3
 800b730:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 800b732:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b734:	3301      	adds	r3, #1
 800b736:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b738:	8afb      	ldrh	r3, [r7, #22]
 800b73a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b73c:	429a      	cmp	r2, r3
 800b73e:	d3eb      	bcc.n	800b718 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 800b740:	8abb      	ldrh	r3, [r7, #20]
 800b742:	461a      	mov	r2, r3
 800b744:	4b0e      	ldr	r3, [pc, #56]	; (800b780 <UTIL_ADV_TRACE_COND_FSend+0x100>)
 800b746:	18d0      	adds	r0, r2, r3
 800b748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b74a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b74c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b750:	f7ff fa1e 	bl	800ab90 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 800b754:	f000 f9e0 	bl	800bb18 <TRACE_UnLock>

    return TRACE_Send();
 800b758:	f000 f832 	bl	800b7c0 <TRACE_Send>
 800b75c:	4603      	mov	r3, r0
 800b75e:	e003      	b.n	800b768 <UTIL_ADV_TRACE_COND_FSend+0xe8>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 800b760:	f000 f9da 	bl	800bb18 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 800b764:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 800b768:	4618      	mov	r0, r3
 800b76a:	3734      	adds	r7, #52	; 0x34
 800b76c:	46bd      	mov	sp, r7
 800b76e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b772:	b001      	add	sp, #4
 800b774:	4770      	bx	lr
 800b776:	bf00      	nop
 800b778:	20000448 	.word	0x20000448
 800b77c:	20000660 	.word	0x20000660
 800b780:	20000460 	.word	0x20000460

0800b784 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 800b784:	b480      	push	{r7}
 800b786:	b083      	sub	sp, #12
 800b788:	af00      	add	r7, sp, #0
 800b78a:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 800b78c:	4a03      	ldr	r2, [pc, #12]	; (800b79c <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	6053      	str	r3, [r2, #4]
}
 800b792:	bf00      	nop
 800b794:	370c      	adds	r7, #12
 800b796:	46bd      	mov	sp, r7
 800b798:	bc80      	pop	{r7}
 800b79a:	4770      	bx	lr
 800b79c:	20000448 	.word	0x20000448

0800b7a0 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	b083      	sub	sp, #12
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 800b7aa:	4a04      	ldr	r2, [pc, #16]	; (800b7bc <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 800b7ac:	79fb      	ldrb	r3, [r7, #7]
 800b7ae:	7213      	strb	r3, [r2, #8]
}
 800b7b0:	bf00      	nop
 800b7b2:	370c      	adds	r7, #12
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bc80      	pop	{r7}
 800b7b8:	4770      	bx	lr
 800b7ba:	bf00      	nop
 800b7bc:	20000448 	.word	0x20000448

0800b7c0 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b088      	sub	sp, #32
 800b7c4:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b7ce:	f3ef 8310 	mrs	r3, PRIMASK
 800b7d2:	613b      	str	r3, [r7, #16]
  return(result);
 800b7d4:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800b7d6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800b7d8:	b672      	cpsid	i
}
 800b7da:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 800b7dc:	f000 f9ba 	bl	800bb54 <TRACE_IsLocked>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d15d      	bne.n	800b8a2 <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 800b7e6:	f000 f979 	bl	800badc <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 800b7ea:	4b34      	ldr	r3, [pc, #208]	; (800b8bc <TRACE_Send+0xfc>)
 800b7ec:	8a1a      	ldrh	r2, [r3, #16]
 800b7ee:	4b33      	ldr	r3, [pc, #204]	; (800b8bc <TRACE_Send+0xfc>)
 800b7f0:	8a5b      	ldrh	r3, [r3, #18]
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d04d      	beq.n	800b892 <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800b7f6:	4b31      	ldr	r3, [pc, #196]	; (800b8bc <TRACE_Send+0xfc>)
 800b7f8:	789b      	ldrb	r3, [r3, #2]
 800b7fa:	2b01      	cmp	r3, #1
 800b7fc:	d117      	bne.n	800b82e <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 800b7fe:	4b2f      	ldr	r3, [pc, #188]	; (800b8bc <TRACE_Send+0xfc>)
 800b800:	881a      	ldrh	r2, [r3, #0]
 800b802:	4b2e      	ldr	r3, [pc, #184]	; (800b8bc <TRACE_Send+0xfc>)
 800b804:	8a1b      	ldrh	r3, [r3, #16]
 800b806:	1ad3      	subs	r3, r2, r3
 800b808:	b29a      	uxth	r2, r3
 800b80a:	4b2c      	ldr	r3, [pc, #176]	; (800b8bc <TRACE_Send+0xfc>)
 800b80c:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800b80e:	4b2b      	ldr	r3, [pc, #172]	; (800b8bc <TRACE_Send+0xfc>)
 800b810:	2202      	movs	r2, #2
 800b812:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 800b814:	4b29      	ldr	r3, [pc, #164]	; (800b8bc <TRACE_Send+0xfc>)
 800b816:	2200      	movs	r2, #0
 800b818:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800b81a:	4b28      	ldr	r3, [pc, #160]	; (800b8bc <TRACE_Send+0xfc>)
 800b81c:	8a9b      	ldrh	r3, [r3, #20]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d105      	bne.n	800b82e <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800b822:	4b26      	ldr	r3, [pc, #152]	; (800b8bc <TRACE_Send+0xfc>)
 800b824:	2200      	movs	r2, #0
 800b826:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800b828:	4b24      	ldr	r3, [pc, #144]	; (800b8bc <TRACE_Send+0xfc>)
 800b82a:	2200      	movs	r2, #0
 800b82c:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800b82e:	4b23      	ldr	r3, [pc, #140]	; (800b8bc <TRACE_Send+0xfc>)
 800b830:	789b      	ldrb	r3, [r3, #2]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d115      	bne.n	800b862 <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800b836:	4b21      	ldr	r3, [pc, #132]	; (800b8bc <TRACE_Send+0xfc>)
 800b838:	8a5a      	ldrh	r2, [r3, #18]
 800b83a:	4b20      	ldr	r3, [pc, #128]	; (800b8bc <TRACE_Send+0xfc>)
 800b83c:	8a1b      	ldrh	r3, [r3, #16]
 800b83e:	429a      	cmp	r2, r3
 800b840:	d908      	bls.n	800b854 <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800b842:	4b1e      	ldr	r3, [pc, #120]	; (800b8bc <TRACE_Send+0xfc>)
 800b844:	8a5a      	ldrh	r2, [r3, #18]
 800b846:	4b1d      	ldr	r3, [pc, #116]	; (800b8bc <TRACE_Send+0xfc>)
 800b848:	8a1b      	ldrh	r3, [r3, #16]
 800b84a:	1ad3      	subs	r3, r2, r3
 800b84c:	b29a      	uxth	r2, r3
 800b84e:	4b1b      	ldr	r3, [pc, #108]	; (800b8bc <TRACE_Send+0xfc>)
 800b850:	829a      	strh	r2, [r3, #20]
 800b852:	e006      	b.n	800b862 <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800b854:	4b19      	ldr	r3, [pc, #100]	; (800b8bc <TRACE_Send+0xfc>)
 800b856:	8a1b      	ldrh	r3, [r3, #16]
 800b858:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b85c:	b29a      	uxth	r2, r3
 800b85e:	4b17      	ldr	r3, [pc, #92]	; (800b8bc <TRACE_Send+0xfc>)
 800b860:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800b862:	4b16      	ldr	r3, [pc, #88]	; (800b8bc <TRACE_Send+0xfc>)
 800b864:	8a1b      	ldrh	r3, [r3, #16]
 800b866:	461a      	mov	r2, r3
 800b868:	4b15      	ldr	r3, [pc, #84]	; (800b8c0 <TRACE_Send+0x100>)
 800b86a:	4413      	add	r3, r2
 800b86c:	61bb      	str	r3, [r7, #24]
 800b86e:	697b      	ldr	r3, [r7, #20]
 800b870:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	f383 8810 	msr	PRIMASK, r3
}
 800b878:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 800b87a:	f7f5 f9ff 	bl	8000c7c <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800b87e:	4b11      	ldr	r3, [pc, #68]	; (800b8c4 <TRACE_Send+0x104>)
 800b880:	68db      	ldr	r3, [r3, #12]
 800b882:	4a0e      	ldr	r2, [pc, #56]	; (800b8bc <TRACE_Send+0xfc>)
 800b884:	8a92      	ldrh	r2, [r2, #20]
 800b886:	4611      	mov	r1, r2
 800b888:	69b8      	ldr	r0, [r7, #24]
 800b88a:	4798      	blx	r3
 800b88c:	4603      	mov	r3, r0
 800b88e:	77fb      	strb	r3, [r7, #31]
 800b890:	e00d      	b.n	800b8ae <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 800b892:	f000 f941 	bl	800bb18 <TRACE_UnLock>
 800b896:	697b      	ldr	r3, [r7, #20]
 800b898:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b89a:	68bb      	ldr	r3, [r7, #8]
 800b89c:	f383 8810 	msr	PRIMASK, r3
}
 800b8a0:	e005      	b.n	800b8ae <TRACE_Send+0xee>
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	f383 8810 	msr	PRIMASK, r3
}
 800b8ac:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 800b8ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3720      	adds	r7, #32
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	bd80      	pop	{r7, pc}
 800b8ba:	bf00      	nop
 800b8bc:	20000448 	.word	0x20000448
 800b8c0:	20000460 	.word	0x20000460
 800b8c4:	0800bfbc 	.word	0x0800bfbc

0800b8c8 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 800b8c8:	b580      	push	{r7, lr}
 800b8ca:	b088      	sub	sp, #32
 800b8cc:	af00      	add	r7, sp, #0
 800b8ce:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8d4:	f3ef 8310 	mrs	r3, PRIMASK
 800b8d8:	617b      	str	r3, [r7, #20]
  return(result);
 800b8da:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800b8dc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 800b8de:	b672      	cpsid	i
}
 800b8e0:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 800b8e2:	4b3c      	ldr	r3, [pc, #240]	; (800b9d4 <TRACE_TxCpltCallback+0x10c>)
 800b8e4:	789b      	ldrb	r3, [r3, #2]
 800b8e6:	2b02      	cmp	r3, #2
 800b8e8:	d106      	bne.n	800b8f8 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800b8ea:	4b3a      	ldr	r3, [pc, #232]	; (800b9d4 <TRACE_TxCpltCallback+0x10c>)
 800b8ec:	2200      	movs	r2, #0
 800b8ee:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 800b8f0:	4b38      	ldr	r3, [pc, #224]	; (800b9d4 <TRACE_TxCpltCallback+0x10c>)
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	821a      	strh	r2, [r3, #16]
 800b8f6:	e00a      	b.n	800b90e <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800b8f8:	4b36      	ldr	r3, [pc, #216]	; (800b9d4 <TRACE_TxCpltCallback+0x10c>)
 800b8fa:	8a1a      	ldrh	r2, [r3, #16]
 800b8fc:	4b35      	ldr	r3, [pc, #212]	; (800b9d4 <TRACE_TxCpltCallback+0x10c>)
 800b8fe:	8a9b      	ldrh	r3, [r3, #20]
 800b900:	4413      	add	r3, r2
 800b902:	b29b      	uxth	r3, r3
 800b904:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b908:	b29a      	uxth	r2, r3
 800b90a:	4b32      	ldr	r3, [pc, #200]	; (800b9d4 <TRACE_TxCpltCallback+0x10c>)
 800b90c:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 800b90e:	4b31      	ldr	r3, [pc, #196]	; (800b9d4 <TRACE_TxCpltCallback+0x10c>)
 800b910:	8a1a      	ldrh	r2, [r3, #16]
 800b912:	4b30      	ldr	r3, [pc, #192]	; (800b9d4 <TRACE_TxCpltCallback+0x10c>)
 800b914:	8a5b      	ldrh	r3, [r3, #18]
 800b916:	429a      	cmp	r2, r3
 800b918:	d04d      	beq.n	800b9b6 <TRACE_TxCpltCallback+0xee>
 800b91a:	4b2e      	ldr	r3, [pc, #184]	; (800b9d4 <TRACE_TxCpltCallback+0x10c>)
 800b91c:	8adb      	ldrh	r3, [r3, #22]
 800b91e:	2b01      	cmp	r3, #1
 800b920:	d149      	bne.n	800b9b6 <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 800b922:	4b2c      	ldr	r3, [pc, #176]	; (800b9d4 <TRACE_TxCpltCallback+0x10c>)
 800b924:	789b      	ldrb	r3, [r3, #2]
 800b926:	2b01      	cmp	r3, #1
 800b928:	d117      	bne.n	800b95a <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 800b92a:	4b2a      	ldr	r3, [pc, #168]	; (800b9d4 <TRACE_TxCpltCallback+0x10c>)
 800b92c:	881a      	ldrh	r2, [r3, #0]
 800b92e:	4b29      	ldr	r3, [pc, #164]	; (800b9d4 <TRACE_TxCpltCallback+0x10c>)
 800b930:	8a1b      	ldrh	r3, [r3, #16]
 800b932:	1ad3      	subs	r3, r2, r3
 800b934:	b29a      	uxth	r2, r3
 800b936:	4b27      	ldr	r3, [pc, #156]	; (800b9d4 <TRACE_TxCpltCallback+0x10c>)
 800b938:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800b93a:	4b26      	ldr	r3, [pc, #152]	; (800b9d4 <TRACE_TxCpltCallback+0x10c>)
 800b93c:	2202      	movs	r2, #2
 800b93e:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 800b940:	4b24      	ldr	r3, [pc, #144]	; (800b9d4 <TRACE_TxCpltCallback+0x10c>)
 800b942:	2200      	movs	r2, #0
 800b944:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 800b946:	4b23      	ldr	r3, [pc, #140]	; (800b9d4 <TRACE_TxCpltCallback+0x10c>)
 800b948:	8a9b      	ldrh	r3, [r3, #20]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d105      	bne.n	800b95a <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800b94e:	4b21      	ldr	r3, [pc, #132]	; (800b9d4 <TRACE_TxCpltCallback+0x10c>)
 800b950:	2200      	movs	r2, #0
 800b952:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800b954:	4b1f      	ldr	r3, [pc, #124]	; (800b9d4 <TRACE_TxCpltCallback+0x10c>)
 800b956:	2200      	movs	r2, #0
 800b958:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800b95a:	4b1e      	ldr	r3, [pc, #120]	; (800b9d4 <TRACE_TxCpltCallback+0x10c>)
 800b95c:	789b      	ldrb	r3, [r3, #2]
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d115      	bne.n	800b98e <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800b962:	4b1c      	ldr	r3, [pc, #112]	; (800b9d4 <TRACE_TxCpltCallback+0x10c>)
 800b964:	8a5a      	ldrh	r2, [r3, #18]
 800b966:	4b1b      	ldr	r3, [pc, #108]	; (800b9d4 <TRACE_TxCpltCallback+0x10c>)
 800b968:	8a1b      	ldrh	r3, [r3, #16]
 800b96a:	429a      	cmp	r2, r3
 800b96c:	d908      	bls.n	800b980 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 800b96e:	4b19      	ldr	r3, [pc, #100]	; (800b9d4 <TRACE_TxCpltCallback+0x10c>)
 800b970:	8a5a      	ldrh	r2, [r3, #18]
 800b972:	4b18      	ldr	r3, [pc, #96]	; (800b9d4 <TRACE_TxCpltCallback+0x10c>)
 800b974:	8a1b      	ldrh	r3, [r3, #16]
 800b976:	1ad3      	subs	r3, r2, r3
 800b978:	b29a      	uxth	r2, r3
 800b97a:	4b16      	ldr	r3, [pc, #88]	; (800b9d4 <TRACE_TxCpltCallback+0x10c>)
 800b97c:	829a      	strh	r2, [r3, #20]
 800b97e:	e006      	b.n	800b98e <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800b980:	4b14      	ldr	r3, [pc, #80]	; (800b9d4 <TRACE_TxCpltCallback+0x10c>)
 800b982:	8a1b      	ldrh	r3, [r3, #16]
 800b984:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800b988:	b29a      	uxth	r2, r3
 800b98a:	4b12      	ldr	r3, [pc, #72]	; (800b9d4 <TRACE_TxCpltCallback+0x10c>)
 800b98c:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800b98e:	4b11      	ldr	r3, [pc, #68]	; (800b9d4 <TRACE_TxCpltCallback+0x10c>)
 800b990:	8a1b      	ldrh	r3, [r3, #16]
 800b992:	461a      	mov	r2, r3
 800b994:	4b10      	ldr	r3, [pc, #64]	; (800b9d8 <TRACE_TxCpltCallback+0x110>)
 800b996:	4413      	add	r3, r2
 800b998:	61fb      	str	r3, [r7, #28]
 800b99a:	69bb      	ldr	r3, [r7, #24]
 800b99c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	f383 8810 	msr	PRIMASK, r3
}
 800b9a4:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800b9a6:	4b0d      	ldr	r3, [pc, #52]	; (800b9dc <TRACE_TxCpltCallback+0x114>)
 800b9a8:	68db      	ldr	r3, [r3, #12]
 800b9aa:	4a0a      	ldr	r2, [pc, #40]	; (800b9d4 <TRACE_TxCpltCallback+0x10c>)
 800b9ac:	8a92      	ldrh	r2, [r2, #20]
 800b9ae:	4611      	mov	r1, r2
 800b9b0:	69f8      	ldr	r0, [r7, #28]
 800b9b2:	4798      	blx	r3
 800b9b4:	e00a      	b.n	800b9cc <TRACE_TxCpltCallback+0x104>
 800b9b6:	69bb      	ldr	r3, [r7, #24]
 800b9b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	f383 8810 	msr	PRIMASK, r3
}
 800b9c0:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 800b9c2:	f7f5 f963 	bl	8000c8c <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 800b9c6:	f000 f8a7 	bl	800bb18 <TRACE_UnLock>
  }
}
 800b9ca:	bf00      	nop
 800b9cc:	bf00      	nop
 800b9ce:	3720      	adds	r7, #32
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}
 800b9d4:	20000448 	.word	0x20000448
 800b9d8:	20000460 	.word	0x20000460
 800b9dc:	0800bfbc 	.word	0x0800bfbc

0800b9e0 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 800b9e0:	b480      	push	{r7}
 800b9e2:	b087      	sub	sp, #28
 800b9e4:	af00      	add	r7, sp, #0
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	6039      	str	r1, [r7, #0]
 800b9ea:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 800b9ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b9f0:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b9f2:	f3ef 8310 	mrs	r3, PRIMASK
 800b9f6:	60fb      	str	r3, [r7, #12]
  return(result);
 800b9f8:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800b9fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800b9fc:	b672      	cpsid	i
}
 800b9fe:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 800ba00:	4b35      	ldr	r3, [pc, #212]	; (800bad8 <TRACE_AllocateBufer+0xf8>)
 800ba02:	8a5a      	ldrh	r2, [r3, #18]
 800ba04:	4b34      	ldr	r3, [pc, #208]	; (800bad8 <TRACE_AllocateBufer+0xf8>)
 800ba06:	8a1b      	ldrh	r3, [r3, #16]
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d11b      	bne.n	800ba44 <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800ba0c:	4b32      	ldr	r3, [pc, #200]	; (800bad8 <TRACE_AllocateBufer+0xf8>)
 800ba0e:	8a5b      	ldrh	r3, [r3, #18]
 800ba10:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ba14:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 800ba16:	88fa      	ldrh	r2, [r7, #6]
 800ba18:	8afb      	ldrh	r3, [r7, #22]
 800ba1a:	429a      	cmp	r2, r3
 800ba1c:	d33a      	bcc.n	800ba94 <TRACE_AllocateBufer+0xb4>
 800ba1e:	4b2e      	ldr	r3, [pc, #184]	; (800bad8 <TRACE_AllocateBufer+0xf8>)
 800ba20:	8a1b      	ldrh	r3, [r3, #16]
 800ba22:	88fa      	ldrh	r2, [r7, #6]
 800ba24:	429a      	cmp	r2, r3
 800ba26:	d235      	bcs.n	800ba94 <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800ba28:	4b2b      	ldr	r3, [pc, #172]	; (800bad8 <TRACE_AllocateBufer+0xf8>)
 800ba2a:	2201      	movs	r2, #1
 800ba2c:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800ba2e:	4b2a      	ldr	r3, [pc, #168]	; (800bad8 <TRACE_AllocateBufer+0xf8>)
 800ba30:	8a5a      	ldrh	r2, [r3, #18]
 800ba32:	4b29      	ldr	r3, [pc, #164]	; (800bad8 <TRACE_AllocateBufer+0xf8>)
 800ba34:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800ba36:	4b28      	ldr	r3, [pc, #160]	; (800bad8 <TRACE_AllocateBufer+0xf8>)
 800ba38:	8a1b      	ldrh	r3, [r3, #16]
 800ba3a:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 800ba3c:	4b26      	ldr	r3, [pc, #152]	; (800bad8 <TRACE_AllocateBufer+0xf8>)
 800ba3e:	2200      	movs	r2, #0
 800ba40:	825a      	strh	r2, [r3, #18]
 800ba42:	e027      	b.n	800ba94 <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 800ba44:	4b24      	ldr	r3, [pc, #144]	; (800bad8 <TRACE_AllocateBufer+0xf8>)
 800ba46:	8a5a      	ldrh	r2, [r3, #18]
 800ba48:	4b23      	ldr	r3, [pc, #140]	; (800bad8 <TRACE_AllocateBufer+0xf8>)
 800ba4a:	8a1b      	ldrh	r3, [r3, #16]
 800ba4c:	429a      	cmp	r2, r3
 800ba4e:	d91b      	bls.n	800ba88 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 800ba50:	4b21      	ldr	r3, [pc, #132]	; (800bad8 <TRACE_AllocateBufer+0xf8>)
 800ba52:	8a5b      	ldrh	r3, [r3, #18]
 800ba54:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800ba58:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 800ba5a:	88fa      	ldrh	r2, [r7, #6]
 800ba5c:	8afb      	ldrh	r3, [r7, #22]
 800ba5e:	429a      	cmp	r2, r3
 800ba60:	d318      	bcc.n	800ba94 <TRACE_AllocateBufer+0xb4>
 800ba62:	4b1d      	ldr	r3, [pc, #116]	; (800bad8 <TRACE_AllocateBufer+0xf8>)
 800ba64:	8a1b      	ldrh	r3, [r3, #16]
 800ba66:	88fa      	ldrh	r2, [r7, #6]
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d213      	bcs.n	800ba94 <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 800ba6c:	4b1a      	ldr	r3, [pc, #104]	; (800bad8 <TRACE_AllocateBufer+0xf8>)
 800ba6e:	2201      	movs	r2, #1
 800ba70:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 800ba72:	4b19      	ldr	r3, [pc, #100]	; (800bad8 <TRACE_AllocateBufer+0xf8>)
 800ba74:	8a5a      	ldrh	r2, [r3, #18]
 800ba76:	4b18      	ldr	r3, [pc, #96]	; (800bad8 <TRACE_AllocateBufer+0xf8>)
 800ba78:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 800ba7a:	4b17      	ldr	r3, [pc, #92]	; (800bad8 <TRACE_AllocateBufer+0xf8>)
 800ba7c:	8a1b      	ldrh	r3, [r3, #16]
 800ba7e:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 800ba80:	4b15      	ldr	r3, [pc, #84]	; (800bad8 <TRACE_AllocateBufer+0xf8>)
 800ba82:	2200      	movs	r2, #0
 800ba84:	825a      	strh	r2, [r3, #18]
 800ba86:	e005      	b.n	800ba94 <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 800ba88:	4b13      	ldr	r3, [pc, #76]	; (800bad8 <TRACE_AllocateBufer+0xf8>)
 800ba8a:	8a1a      	ldrh	r2, [r3, #16]
 800ba8c:	4b12      	ldr	r3, [pc, #72]	; (800bad8 <TRACE_AllocateBufer+0xf8>)
 800ba8e:	8a5b      	ldrh	r3, [r3, #18]
 800ba90:	1ad3      	subs	r3, r2, r3
 800ba92:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 800ba94:	8afa      	ldrh	r2, [r7, #22]
 800ba96:	88fb      	ldrh	r3, [r7, #6]
 800ba98:	429a      	cmp	r2, r3
 800ba9a:	d90f      	bls.n	800babc <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 800ba9c:	4b0e      	ldr	r3, [pc, #56]	; (800bad8 <TRACE_AllocateBufer+0xf8>)
 800ba9e:	8a5a      	ldrh	r2, [r3, #18]
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 800baa4:	4b0c      	ldr	r3, [pc, #48]	; (800bad8 <TRACE_AllocateBufer+0xf8>)
 800baa6:	8a5a      	ldrh	r2, [r3, #18]
 800baa8:	88fb      	ldrh	r3, [r7, #6]
 800baaa:	4413      	add	r3, r2
 800baac:	b29b      	uxth	r3, r3
 800baae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bab2:	b29a      	uxth	r2, r3
 800bab4:	4b08      	ldr	r3, [pc, #32]	; (800bad8 <TRACE_AllocateBufer+0xf8>)
 800bab6:	825a      	strh	r2, [r3, #18]
    ret = 0;
 800bab8:	2300      	movs	r3, #0
 800baba:	82bb      	strh	r3, [r7, #20]
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bac0:	68bb      	ldr	r3, [r7, #8]
 800bac2:	f383 8810 	msr	PRIMASK, r3
}
 800bac6:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 800bac8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 800bacc:	4618      	mov	r0, r3
 800bace:	371c      	adds	r7, #28
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bc80      	pop	{r7}
 800bad4:	4770      	bx	lr
 800bad6:	bf00      	nop
 800bad8:	20000448 	.word	0x20000448

0800badc <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 800badc:	b480      	push	{r7}
 800bade:	b085      	sub	sp, #20
 800bae0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bae2:	f3ef 8310 	mrs	r3, PRIMASK
 800bae6:	607b      	str	r3, [r7, #4]
  return(result);
 800bae8:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800baea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800baec:	b672      	cpsid	i
}
 800baee:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 800baf0:	4b08      	ldr	r3, [pc, #32]	; (800bb14 <TRACE_Lock+0x38>)
 800baf2:	8adb      	ldrh	r3, [r3, #22]
 800baf4:	3301      	adds	r3, #1
 800baf6:	b29a      	uxth	r2, r3
 800baf8:	4b06      	ldr	r3, [pc, #24]	; (800bb14 <TRACE_Lock+0x38>)
 800bafa:	82da      	strh	r2, [r3, #22]
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb00:	68bb      	ldr	r3, [r7, #8]
 800bb02:	f383 8810 	msr	PRIMASK, r3
}
 800bb06:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800bb08:	bf00      	nop
 800bb0a:	3714      	adds	r7, #20
 800bb0c:	46bd      	mov	sp, r7
 800bb0e:	bc80      	pop	{r7}
 800bb10:	4770      	bx	lr
 800bb12:	bf00      	nop
 800bb14:	20000448 	.word	0x20000448

0800bb18 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b085      	sub	sp, #20
 800bb1c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb1e:	f3ef 8310 	mrs	r3, PRIMASK
 800bb22:	607b      	str	r3, [r7, #4]
  return(result);
 800bb24:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 800bb26:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800bb28:	b672      	cpsid	i
}
 800bb2a:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 800bb2c:	4b08      	ldr	r3, [pc, #32]	; (800bb50 <TRACE_UnLock+0x38>)
 800bb2e:	8adb      	ldrh	r3, [r3, #22]
 800bb30:	3b01      	subs	r3, #1
 800bb32:	b29a      	uxth	r2, r3
 800bb34:	4b06      	ldr	r3, [pc, #24]	; (800bb50 <TRACE_UnLock+0x38>)
 800bb36:	82da      	strh	r2, [r3, #22]
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	f383 8810 	msr	PRIMASK, r3
}
 800bb42:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800bb44:	bf00      	nop
 800bb46:	3714      	adds	r7, #20
 800bb48:	46bd      	mov	sp, r7
 800bb4a:	bc80      	pop	{r7}
 800bb4c:	4770      	bx	lr
 800bb4e:	bf00      	nop
 800bb50:	20000448 	.word	0x20000448

0800bb54 <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 800bb54:	b480      	push	{r7}
 800bb56:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 800bb58:	4b05      	ldr	r3, [pc, #20]	; (800bb70 <TRACE_IsLocked+0x1c>)
 800bb5a:	8adb      	ldrh	r3, [r3, #22]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	bf14      	ite	ne
 800bb60:	2301      	movne	r3, #1
 800bb62:	2300      	moveq	r3, #0
 800bb64:	b2db      	uxtb	r3, r3
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bc80      	pop	{r7}
 800bb6c:	4770      	bx	lr
 800bb6e:	bf00      	nop
 800bb70:	20000448 	.word	0x20000448

0800bb74 <__libc_init_array>:
 800bb74:	b570      	push	{r4, r5, r6, lr}
 800bb76:	4d0d      	ldr	r5, [pc, #52]	; (800bbac <__libc_init_array+0x38>)
 800bb78:	4c0d      	ldr	r4, [pc, #52]	; (800bbb0 <__libc_init_array+0x3c>)
 800bb7a:	1b64      	subs	r4, r4, r5
 800bb7c:	10a4      	asrs	r4, r4, #2
 800bb7e:	2600      	movs	r6, #0
 800bb80:	42a6      	cmp	r6, r4
 800bb82:	d109      	bne.n	800bb98 <__libc_init_array+0x24>
 800bb84:	4d0b      	ldr	r5, [pc, #44]	; (800bbb4 <__libc_init_array+0x40>)
 800bb86:	4c0c      	ldr	r4, [pc, #48]	; (800bbb8 <__libc_init_array+0x44>)
 800bb88:	f000 f840 	bl	800bc0c <_init>
 800bb8c:	1b64      	subs	r4, r4, r5
 800bb8e:	10a4      	asrs	r4, r4, #2
 800bb90:	2600      	movs	r6, #0
 800bb92:	42a6      	cmp	r6, r4
 800bb94:	d105      	bne.n	800bba2 <__libc_init_array+0x2e>
 800bb96:	bd70      	pop	{r4, r5, r6, pc}
 800bb98:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb9c:	4798      	blx	r3
 800bb9e:	3601      	adds	r6, #1
 800bba0:	e7ee      	b.n	800bb80 <__libc_init_array+0xc>
 800bba2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bba6:	4798      	blx	r3
 800bba8:	3601      	adds	r6, #1
 800bbaa:	e7f2      	b.n	800bb92 <__libc_init_array+0x1e>
 800bbac:	0800c144 	.word	0x0800c144
 800bbb0:	0800c144 	.word	0x0800c144
 800bbb4:	0800c144 	.word	0x0800c144
 800bbb8:	0800c148 	.word	0x0800c148

0800bbbc <memcpy>:
 800bbbc:	440a      	add	r2, r1
 800bbbe:	4291      	cmp	r1, r2
 800bbc0:	f100 33ff 	add.w	r3, r0, #4294967295
 800bbc4:	d100      	bne.n	800bbc8 <memcpy+0xc>
 800bbc6:	4770      	bx	lr
 800bbc8:	b510      	push	{r4, lr}
 800bbca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbd2:	4291      	cmp	r1, r2
 800bbd4:	d1f9      	bne.n	800bbca <memcpy+0xe>
 800bbd6:	bd10      	pop	{r4, pc}

0800bbd8 <memset>:
 800bbd8:	4402      	add	r2, r0
 800bbda:	4603      	mov	r3, r0
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	d100      	bne.n	800bbe2 <memset+0xa>
 800bbe0:	4770      	bx	lr
 800bbe2:	f803 1b01 	strb.w	r1, [r3], #1
 800bbe6:	e7f9      	b.n	800bbdc <memset+0x4>

0800bbe8 <strncmp>:
 800bbe8:	b510      	push	{r4, lr}
 800bbea:	b16a      	cbz	r2, 800bc08 <strncmp+0x20>
 800bbec:	3901      	subs	r1, #1
 800bbee:	1884      	adds	r4, r0, r2
 800bbf0:	f810 3b01 	ldrb.w	r3, [r0], #1
 800bbf4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d103      	bne.n	800bc04 <strncmp+0x1c>
 800bbfc:	42a0      	cmp	r0, r4
 800bbfe:	d001      	beq.n	800bc04 <strncmp+0x1c>
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d1f5      	bne.n	800bbf0 <strncmp+0x8>
 800bc04:	1a98      	subs	r0, r3, r2
 800bc06:	bd10      	pop	{r4, pc}
 800bc08:	4610      	mov	r0, r2
 800bc0a:	e7fc      	b.n	800bc06 <strncmp+0x1e>

0800bc0c <_init>:
 800bc0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc0e:	bf00      	nop
 800bc10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc12:	bc08      	pop	{r3}
 800bc14:	469e      	mov	lr, r3
 800bc16:	4770      	bx	lr

0800bc18 <_fini>:
 800bc18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc1a:	bf00      	nop
 800bc1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bc1e:	bc08      	pop	{r3}
 800bc20:	469e      	mov	lr, r3
 800bc22:	4770      	bx	lr
